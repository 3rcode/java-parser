[
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/entity/User_ESTest.java",
        "class": "User_ESTest",
        "name": "test0",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test0() throws Throwable {\n  User user0\u003dUser.INSTANCE;\n  boolean boolean0\u003duser0.isPlaying();\n  assertFalse(boolean0);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/entity/User_ESTest.java",
        "class": "User_ESTest",
        "name": "test1",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test1() throws Throwable {\n  User user0\u003dUser.INSTANCE;\n  user0.setWatching(false);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/entity/User_ESTest.java",
        "class": "User_ESTest",
        "name": "test2",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test2() throws Throwable {\n  User user0\u003dUser.INSTANCE;\n  boolean boolean0\u003duser0.isWatching();\n  assertFalse(boolean0);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/entity/User_ESTest.java",
        "class": "User_ESTest",
        "name": "test3",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test3() throws Throwable {\n  User user0\u003dUser.INSTANCE;\n  String string0\u003duser0.getNickname();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/entity/User_ESTest.java",
        "class": "User_ESTest",
        "name": "test4",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test4() throws Throwable {\n  User user0\u003dUser.INSTANCE;\n  user0.INSTANCE.setNickname(\"i~6e+d\");\n  assertFalse(user0.isPlaying());\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/entity/User_ESTest.java",
        "class": "User_ESTest",
        "name": "test5",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test5() throws Throwable {\n  User user0\u003dUser.INSTANCE;\n  user0.setPlaying(false);\n  assertFalse(user0.isPlaying());\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/entity/User_ESTest_scaffolding.java",
        "class": "User_ESTest_scaffolding",
        "name": "initEvoSuiteFramework",
        "return_type": "void",
        "modifiers": "@BeforeClass public static",
        "parameters": [],
        "raw": "@BeforeClass public static void initEvoSuiteFramework(){\n  org.evosuite.runtime.RuntimeSettings.className\u003d\"org.nico.ratel.landlords.client.entity.User\";\n  org.evosuite.runtime.GuiSupport.initialize();\n  org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads\u003d100;\n  org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop\u003d10000;\n  org.evosuite.runtime.RuntimeSettings.mockSystemIn\u003dtrue;\n  org.evosuite.runtime.RuntimeSettings.sandboxMode\u003dorg.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED;\n  org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT();\n  org.evosuite.runtime.classhandling.JDKClassResetter.init();\n  setSystemProperties();\n  initializeClasses();\n  org.evosuite.runtime.Runtime.getInstance().resetRuntime();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/entity/User_ESTest_scaffolding.java",
        "class": "User_ESTest_scaffolding",
        "name": "clearEvoSuiteFramework",
        "return_type": "void",
        "modifiers": "@AfterClass public static",
        "parameters": [],
        "raw": "@AfterClass public static void clearEvoSuiteFramework(){\n  Sandbox.resetDefaultSecurityManager();\n  java.lang.System.setProperties((java.util.Properties)defaultProperties.clone());\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/entity/User_ESTest_scaffolding.java",
        "class": "User_ESTest_scaffolding",
        "name": "initTestCase",
        "return_type": "void",
        "modifiers": "@Before public",
        "parameters": [],
        "raw": "@Before public void initTestCase(){\n  threadStopper.storeCurrentThreads();\n  threadStopper.startRecordingTime();\n  org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler();\n  org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode();\n  setSystemProperties();\n  org.evosuite.runtime.GuiSupport.setHeadless();\n  org.evosuite.runtime.Runtime.getInstance().resetRuntime();\n  org.evosuite.runtime.agent.InstrumentingAgent.activate();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/entity/User_ESTest_scaffolding.java",
        "class": "User_ESTest_scaffolding",
        "name": "doneWithTestCase",
        "return_type": "void",
        "modifiers": "@After public",
        "parameters": [],
        "raw": "@After public void doneWithTestCase(){\n  threadStopper.killAndJoinClientThreads();\n  org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks();\n  org.evosuite.runtime.classhandling.JDKClassResetter.reset();\n  resetClasses();\n  org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode();\n  org.evosuite.runtime.agent.InstrumentingAgent.deactivate();\n  org.evosuite.runtime.GuiSupport.restoreHeadlessMode();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/entity/User_ESTest_scaffolding.java",
        "class": "User_ESTest_scaffolding",
        "name": "setSystemProperties",
        "return_type": "void",
        "modifiers": "public static",
        "parameters": [],
        "raw": "public static void setSystemProperties(){\n  java.lang.System.setProperties((java.util.Properties)defaultProperties.clone());\n  java.lang.System.setProperty(\"file.encoding\",\"UTF-8\");\n  java.lang.System.setProperty(\"java.awt.headless\",\"true\");\n  java.lang.System.setProperty(\"java.io.tmpdir\",\"/tmp\");\n  java.lang.System.setProperty(\"user.country\",\"US\");\n  java.lang.System.setProperty(\"user.dir\",\"/home/lvdthieu/code-gen/ratel/landlords-client\");\n  java.lang.System.setProperty(\"user.home\",\"/home/lvdthieu\");\n  java.lang.System.setProperty(\"user.language\",\"en\");\n  java.lang.System.setProperty(\"user.name\",\"lvdthieu\");\n  java.lang.System.setProperty(\"user.timezone\",\"Asia/Ho_Chi_Minh\");\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/entity/User_ESTest_scaffolding.java",
        "class": "User_ESTest_scaffolding",
        "name": "initializeClasses",
        "return_type": "void",
        "modifiers": "private static",
        "parameters": [],
        "raw": "private static void initializeClasses(){\n  org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(User_ESTest_scaffolding.class.getClassLoader(),\"org.nico.ratel.landlords.client.entity.User\");\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/entity/User_ESTest_scaffolding.java",
        "class": "User_ESTest_scaffolding",
        "name": "resetClasses",
        "return_type": "void",
        "modifiers": "private static",
        "parameters": [],
        "raw": "private static void resetClasses(){\n  org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(User_ESTest_scaffolding.class.getClassLoader());\n  org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\"org.nico.ratel.landlords.client.entity.User\");\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/SimpleClient_ESTest.java",
        "class": "SimpleClient_ESTest",
        "name": "test0",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test0() throws Throwable {\n  String[] stringArray0\u003dnew String[4];\n  stringArray0[0]\u003d\"pb\";\n  SimpleClient.protocol\u003d\"\";\n  SimpleClient.serverAddress\u003d\"pb\";\n  stringArray0[2]\u003d\"xI^OXjdv8Xx$6ql*8%\";\n  try {\n    SimpleClient.main(stringArray0);\n    fail(\"Expecting exception: UnsupportedOperationException\");\n  }\n catch (  UnsupportedOperationException e) {\n    verifyException(\"org.nico.ratel.landlords.client.SimpleClient\",e);\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/SimpleClient_ESTest.java",
        "class": "SimpleClient_ESTest",
        "name": "test1",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test1() throws Throwable {\n  String[] stringArray0\u003dnew String[6];\n  stringArray0[0]\u003d\"-protocol\";\n  try {\n    SimpleClient.main(stringArray0);\n    fail(\"Expecting exception: NullPointerException\");\n  }\n catch (  NullPointerException e) {\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/SimpleClient_ESTest.java",
        "class": "SimpleClient_ESTest",
        "name": "test2",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test2() throws Throwable {\n  String[] stringArray0\u003dnew String[3];\n  stringArray0[0]\u003d\"v1.3.0\";\n  try {\n    SimpleClient.main(stringArray0);\n    fail(\"Expecting exception: RuntimeException\");\n  }\n catch (  RuntimeException e) {\n    verifyException(\"org.nico.ratel.landlords.client.SimpleClient\",e);\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/SimpleClient_ESTest.java",
        "class": "SimpleClient_ESTest",
        "name": "test3",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test3() throws Throwable {\n  String[] stringArray0\u003dnew String[0];\n  try {\n    SimpleClient.main(stringArray0);\n    fail(\"Expecting exception: RuntimeException\");\n  }\n catch (  RuntimeException e) {\n    verifyException(\"org.nico.ratel.landlords.client.SimpleClient\",e);\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/SimpleClient_ESTest.java",
        "class": "SimpleClient_ESTest",
        "name": "test4",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test4() throws Throwable {\n  try {\n    SimpleClient.main((String[])null);\n    fail(\"Expecting exception: RuntimeException\");\n  }\n catch (  RuntimeException e) {\n    verifyException(\"org.nico.ratel.landlords.client.SimpleClient\",e);\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/SimpleClient_ESTest.java",
        "class": "SimpleClient_ESTest",
        "name": "test5",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test5() throws Throwable {\n  SimpleClient simpleClient0\u003dnew SimpleClient();\n  assertEquals((-1),SimpleClient.id);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/SimpleClient_ESTest_scaffolding.java",
        "class": "SimpleClient_ESTest_scaffolding",
        "name": "initEvoSuiteFramework",
        "return_type": "void",
        "modifiers": "@BeforeClass public static",
        "parameters": [],
        "raw": "@BeforeClass public static void initEvoSuiteFramework(){\n  org.evosuite.runtime.RuntimeSettings.className\u003d\"org.nico.ratel.landlords.client.SimpleClient\";\n  org.evosuite.runtime.GuiSupport.initialize();\n  org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads\u003d100;\n  org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop\u003d10000;\n  org.evosuite.runtime.RuntimeSettings.mockSystemIn\u003dtrue;\n  org.evosuite.runtime.RuntimeSettings.sandboxMode\u003dorg.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED;\n  org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT();\n  org.evosuite.runtime.classhandling.JDKClassResetter.init();\n  setSystemProperties();\n  initializeClasses();\n  org.evosuite.runtime.Runtime.getInstance().resetRuntime();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/SimpleClient_ESTest_scaffolding.java",
        "class": "SimpleClient_ESTest_scaffolding",
        "name": "clearEvoSuiteFramework",
        "return_type": "void",
        "modifiers": "@AfterClass public static",
        "parameters": [],
        "raw": "@AfterClass public static void clearEvoSuiteFramework(){\n  Sandbox.resetDefaultSecurityManager();\n  java.lang.System.setProperties((java.util.Properties)defaultProperties.clone());\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/SimpleClient_ESTest_scaffolding.java",
        "class": "SimpleClient_ESTest_scaffolding",
        "name": "initTestCase",
        "return_type": "void",
        "modifiers": "@Before public",
        "parameters": [],
        "raw": "@Before public void initTestCase(){\n  threadStopper.storeCurrentThreads();\n  threadStopper.startRecordingTime();\n  org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler();\n  org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode();\n  setSystemProperties();\n  org.evosuite.runtime.GuiSupport.setHeadless();\n  org.evosuite.runtime.Runtime.getInstance().resetRuntime();\n  org.evosuite.runtime.agent.InstrumentingAgent.activate();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/SimpleClient_ESTest_scaffolding.java",
        "class": "SimpleClient_ESTest_scaffolding",
        "name": "doneWithTestCase",
        "return_type": "void",
        "modifiers": "@After public",
        "parameters": [],
        "raw": "@After public void doneWithTestCase(){\n  threadStopper.killAndJoinClientThreads();\n  org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks();\n  org.evosuite.runtime.classhandling.JDKClassResetter.reset();\n  resetClasses();\n  org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode();\n  org.evosuite.runtime.agent.InstrumentingAgent.deactivate();\n  org.evosuite.runtime.GuiSupport.restoreHeadlessMode();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/SimpleClient_ESTest_scaffolding.java",
        "class": "SimpleClient_ESTest_scaffolding",
        "name": "setSystemProperties",
        "return_type": "void",
        "modifiers": "public static",
        "parameters": [],
        "raw": "public static void setSystemProperties(){\n  java.lang.System.setProperties((java.util.Properties)defaultProperties.clone());\n  java.lang.System.setProperty(\"file.encoding\",\"UTF-8\");\n  java.lang.System.setProperty(\"java.awt.headless\",\"true\");\n  java.lang.System.setProperty(\"java.io.tmpdir\",\"/tmp\");\n  java.lang.System.setProperty(\"user.country\",\"US\");\n  java.lang.System.setProperty(\"user.dir\",\"/home/lvdthieu/code-gen/ratel/landlords-client\");\n  java.lang.System.setProperty(\"user.home\",\"/home/lvdthieu\");\n  java.lang.System.setProperty(\"user.language\",\"en\");\n  java.lang.System.setProperty(\"user.name\",\"lvdthieu\");\n  java.lang.System.setProperty(\"user.timezone\",\"Asia/Ho_Chi_Minh\");\n  java.lang.System.setProperty(\"sun.arch.data.model\",\"64\");\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/SimpleClient_ESTest_scaffolding.java",
        "class": "SimpleClient_ESTest_scaffolding",
        "name": "initializeClasses",
        "return_type": "void",
        "modifiers": "private static",
        "parameters": [],
        "raw": "private static void initializeClasses(){\n  org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(SimpleClient_ESTest_scaffolding.class.getClassLoader(),\"com.google.protobuf.DescriptorProtos$OneofOptionsOrBuilder\",\"org.nico.noson.handler.reversal.ReversalHandlerQueue\",\"io.netty.channel.ChannelInboundHandlerAdapter\",\"io.netty.util.internal.PlatformDependent0\",\"io.netty.buffer.UnpooledByteBufAllocator$InstrumentedUnpooledDirectByteBuf\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo$Location\",\"com.google.protobuf.CodedInputStream$UnsafeDirectNioDecoder\",\"io.netty.util.internal.ReflectionUtil\",\"com.google.protobuf.Extension$ExtensionType\",\"io.netty.util.concurrent.MultithreadEventExecutorGroup$1\",\"io.netty.channel.DefaultChannelPipeline$PendingHandlerRemovedTask\",\"io.netty.buffer.DuplicatedByteBuf\",\"io.netty.util.concurrent.FastThreadLocalThread\",\"com.google.protobuf.Descriptors$ServiceDescriptor\",\"io.netty.util.internal.ThreadLocalRandom\",\"com.google.protobuf.MessageReflection$MergeTarget\",\"com.google.protobuf.DescriptorProtos$EnumOptionsOrBuilder\",\"io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue\",\"com.google.protobuf.ByteString$LeafByteString\",\"com.google.protobuf.DescriptorProtos$MethodDescriptorProto\",\"io.netty.util.internal.PlatformDependent0$3\",\"io.netty.channel.ChannelOutboundBuffer$MessageProcessor\",\"io.netty.util.internal.PlatformDependent0$4\",\"org.nico.noson.NosonConfig\",\"io.netty.util.internal.PlatformDependent0$5\",\"com.google.protobuf.DescriptorProtos$DescriptorProtoOrBuilder\",\"io.netty.buffer.PooledByteBufAllocator\",\"io.netty.util.internal.PlatformDependent0$1\",\"io.netty.util.internal.PlatformDependent0$2\",\"io.netty.channel.socket.ServerSocketChannelConfig\",\"io.netty.util.concurrent.AbstractScheduledEventExecutor\",\"io.netty.util.internal.PlatformDependent0$8\",\"com.google.protobuf.SmallSortedMap$EmptySet$1\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ReservedRange\",\"io.netty.buffer.PoolThreadCache$MemoryRegionCache$Entry\",\"com.google.protobuf.DescriptorProtos$UninterpretedOption$NamePart\",\"io.netty.bootstrap.BootstrapConfig\",\"com.google.protobuf.SmallSortedMap$EmptySet$2\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProto\",\"com.google.protobuf.Descriptors$DescriptorPool$SearchFilter\",\"io.netty.util.internal.PlatformDependent$1\",\"io.netty.util.internal.PlatformDependent$2\",\"io.netty.util.ResourceLeakDetector$DefaultResourceLeak\",\"com.google.protobuf.AbstractMessage$BuilderParent\",\"com.google.protobuf.DescriptorProtos$EnumValueOptions$1\",\"com.google.protobuf.DescriptorProtos$OneofDescriptorProto$Builder\",\"com.google.protobuf.UnsafeUtil$MemoryAccessor\",\"io.netty.util.internal.shaded.org.jctools.queues.LinkedQueueNode\",\"com.google.protobuf.SingleFieldBuilderV3\",\"io.netty.util.concurrent.EventExecutorChooserFactory\",\"io.netty.buffer.AdvancedLeakAwareByteBuf\",\"io.netty.buffer.FixedCompositeByteBuf\",\"io.netty.util.internal.StringUtil\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto\",\"io.netty.channel.nio.SelectedSelectionKeySetSelector\",\"io.netty.util.internal.logging.AbstractInternalLogger\",\"com.google.protobuf.CodedOutputStream$OutputStreamEncoder\",\"com.google.protobuf.UnknownFieldSet$Field$Builder\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueueColdProducerFields\",\"io.netty.util.internal.LongAdderCounter\",\"io.netty.channel.AbstractChannelHandlerContext\",\"io.netty.util.internal.ThrowableUtil\",\"com.google.protobuf.UnsafeUtil\",\"io.netty.buffer.PoolArena$SizeClass\",\"io.netty.channel.ChannelFlushPromiseNotifier$FlushCheckpoint\",\"com.google.protobuf.CodedOutputStream$AbstractBufferedEncoder\",\"com.google.protobuf.DescriptorProtos$MethodDescriptorProtoOrBuilder\",\"io.netty.channel.ChannelOutboundHandler\",\"com.google.protobuf.ByteString$BoundedByteString\",\"io.netty.channel.SelectStrategy\",\"com.google.protobuf.Descriptors$DescriptorPool\",\"io.netty.util.internal.UnpaddedInternalThreadLocalMap\",\"com.google.protobuf.UnknownFieldSet$Field\",\"io.netty.buffer.PooledByteBuf\",\"io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory\",\"com.google.protobuf.Internal$BooleanList\",\"com.google.protobuf.DescriptorProtos$ServiceOptionsOrBuilder\",\"io.netty.util.concurrent.SingleThreadEventExecutor$5\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable$FieldAccessor\",\"io.netty.util.concurrent.SingleThreadEventExecutor$1\",\"com.google.protobuf.DescriptorProtos$OneofOptions$1\",\"io.netty.util.concurrent.SingleThreadEventExecutor$2\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Label$1\",\"io.netty.resolver.DefaultAddressResolverGroup\",\"io.netty.util.concurrent.Future\",\"com.google.protobuf.Writer\",\"io.netty.channel.nio.AbstractNioByteChannel\",\"io.netty.util.HashingStrategy$1\",\"io.netty.util.concurrent.DefaultThreadFactory\",\"com.google.protobuf.ProtocolMessageEnum\",\"com.google.protobuf.DescriptorProtos$OneofDescriptorProtoOrBuilder\",\"io.netty.channel.MultithreadEventLoopGroup\",\"io.netty.buffer.ByteBufAllocator\",\"com.google.protobuf.Internal$FloatList\",\"io.netty.buffer.PoolChunkList\",\"io.netty.buffer.PoolSubpage\",\"io.netty.buffer.SwappedByteBuf\",\"io.netty.buffer.Unpooled\",\"io.netty.channel.ChannelProgressiveFuture\",\"io.netty.util.NettyRuntime$AvailableProcessorsHolder\",\"io.netty.util.internal.DefaultPriorityQueue\",\"io.netty.util.Recycler$Handle\",\"com.google.protobuf.Descriptors$DescriptorValidationException\",\"com.google.protobuf.IntArrayList\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Builder\",\"com.google.protobuf.DescriptorProtos$MessageOptions$Builder\",\"org.nico.noson.exception.NosonException\",\"io.netty.util.internal.PlatformDependent$AtomicLongCounter\",\"io.netty.buffer.AbstractByteBufAllocator\",\"org.nico.ratel.landlords.client.proxy.ProtobufProxy\",\"io.netty.buffer.WrappedUnpooledUnsafeDirectByteBuf\",\"io.netty.util.internal.PriorityQueueNode\",\"com.google.protobuf.DescriptorProtos$UninterpretedOption$NamePart$Builder\",\"io.netty.util.internal.MacAddressUtil\",\"io.netty.buffer.PooledDuplicatedByteBuf\",\"com.google.protobuf.Writer$FieldOrder\",\"com.google.protobuf.DescriptorProtos$FileDescriptorProto$1\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueuePad2\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueuePad0\",\"io.netty.channel.SingleThreadEventLoop\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueuePad1\",\"com.google.protobuf.Descriptors$OneofDescriptor\",\"org.nico.ratel.landlords.client.SimpleClient\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo$Builder\",\"com.google.protobuf.GeneratedMessageV3$ExtendableMessage\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueProducerIndexField\",\"com.google.protobuf.FieldSet$FieldDescriptorLite\",\"com.google.protobuf.DescriptorProtos$ServiceDescriptorProtoOrBuilder\",\"io.netty.util.internal.InternalThreadLocalMap\",\"com.google.protobuf.MessageOrBuilder\",\"com.google.protobuf.DescriptorProtos$UninterpretedOption$1\",\"org.nico.ratel.landlords.utils.StreamUtils\",\"io.netty.util.ResourceLeak\",\"io.netty.channel.ChannelHandlerContext\",\"io.netty.util.HashingStrategy\",\"com.google.protobuf.DescriptorProtos$FieldOptions$Builder\",\"io.netty.util.internal.MathUtil\",\"io.netty.channel.ChannelFutureListener\",\"io.netty.util.concurrent.BlockingOperationException\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueProducerLimitField\",\"org.nico.noson.scanner.buddy.JsonValueParser\",\"com.google.protobuf.WireFormat$FieldType\",\"io.netty.channel.nio.AbstractNioChannel\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Type\",\"io.netty.channel.FileRegion\",\"io.netty.channel.nio.AbstractNioChannel$NioUnsafe\",\"com.google.protobuf.ExtensionRegistryFactory\",\"io.netty.channel.EventLoopGroup\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ReservedRange$Builder\",\"io.netty.buffer.AbstractUnpooledSlicedByteBuf\",\"com.google.protobuf.MessageLiteOrBuilder\",\"io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Supplier\",\"io.netty.channel.Channel$Unsafe\",\"io.netty.channel.VoidChannelPromise\",\"com.google.protobuf.MessageLite\",\"io.netty.util.internal.shaded.org.jctools.queues.QueueProgressIndicators\",\"com.google.protobuf.UnsafeUtil$1\",\"com.google.protobuf.DescriptorProtos$EnumValueDescriptorProtoOrBuilder\",\"com.google.protobuf.CodedInputStream\",\"io.netty.buffer.EmptyByteBuf\",\"io.netty.buffer.AbstractPooledDerivedByteBuf$PooledNonRetainedSlicedByteBuf\",\"com.google.protobuf.Schema\",\"com.google.protobuf.ExtensionRegistry\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Label\",\"org.nico.noson.entity.NoType\",\"com.google.protobuf.CodedInputStream$ArrayDecoder\",\"io.netty.channel.ChannelOutboundBuffer$Entry$1\",\"io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe\",\"com.google.protobuf.DescriptorProtos$MethodOptions$Builder\",\"io.netty.channel.nio.SelectedSelectionKeySet\",\"io.netty.buffer.ReadOnlyByteBuf\",\"com.google.protobuf.TextFormat$InvalidEscapeSequenceException\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ExtensionRangeOrBuilder\",\"com.google.protobuf.Android\",\"com.google.protobuf.AbstractMessageLite$Builder$LimitedInputStream\",\"io.netty.bootstrap.AbstractBootstrapConfig\",\"io.netty.util.AsciiString\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue\",\"org.nico.noson.Noson\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueL2Pad\",\"io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory$1\",\"com.google.protobuf.Internal$IntList\",\"com.google.protobuf.ExtensionRegistryLite\",\"com.google.protobuf.GeneratedMessageV3$ExtendableMessage$ExtensionWriter\",\"io.netty.util.CharsetUtil\",\"com.google.protobuf.DescriptorProtos$OneofOptions$Builder\",\"com.google.protobuf.DescriptorProtos$MessageOptions\",\"org.nico.noson.scanner.buddy.JsonKeyParser\",\"io.netty.util.concurrent.GenericProgressiveFutureListener\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueue\",\"io.netty.channel.AbstractChannel$AnnotatedSocketException\",\"io.netty.channel.DefaultChannelPipeline$PendingHandlerCallback\",\"com.google.protobuf.ByteString$Output\",\"io.netty.util.internal.shaded.org.jctools.queues.SpscLinkedQueue\",\"io.netty.buffer.UnsafeDirectSwappedByteBuf\",\"io.netty.util.NettyRuntime\",\"org.nico.noson.handler.reversal.impl.ReversalVerityHandler\",\"io.netty.buffer.PooledSlicedByteBuf\",\"io.netty.channel.ChannelPipeline\",\"io.netty.channel.RecvByteBufAllocator\",\"com.google.protobuf.DescriptorProtos$FileOptions$OptimizeMode$1\",\"io.netty.channel.ChannelException\",\"com.google.protobuf.GeneratedMessage$GeneratedExtension\",\"com.google.protobuf.MapField$MutatabilityAwareMap\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$1\",\"io.netty.util.concurrent.ProgressivePromise\",\"com.google.protobuf.ExtensionLite\",\"com.google.protobuf.DescriptorProtos$ServiceDescriptorProto\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$Builder\",\"io.netty.util.internal.PlatformDependent0$10\",\"io.netty.util.Constant\",\"com.google.protobuf.UnknownFieldSet$Builder\",\"org.nico.noson.scanner.impl.EmptyScanner\",\"io.netty.channel.ChannelOption$1\",\"io.netty.util.concurrent.RejectedExecutionHandlers$1\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseLinkedAtomicQueuePad0\",\"io.netty.buffer.PooledByteBufAllocator$PoolThreadLocalCache\",\"com.google.protobuf.Descriptors$GenericDescriptor\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ReservedRange$1\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseLinkedAtomicQueuePad1\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseLinkedAtomicQueue\",\"io.netty.util.concurrent.CompleteFuture\",\"io.netty.util.Recycler$DefaultHandle\",\"io.netty.channel.nio.NioEventLoop$SelectorTuple\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueMidPad\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseLinkedAtomicQueuePad2\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable\",\"io.netty.buffer.UnsafeHeapSwappedByteBuf\",\"io.netty.util.ByteProcessor$IndexOfProcessor\",\"io.netty.util.concurrent.SingleThreadEventExecutor\",\"io.netty.util.ByteProcessor\",\"com.google.protobuf.DescriptorProtos$ExtensionRangeOptionsOrBuilder\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueProducerFields\",\"com.google.protobuf.DescriptorProtos$FileDescriptorProtoOrBuilder\",\"io.netty.util.internal.shaded.org.jctools.queues.ConcurrentCircularArrayQueueL0Pad\",\"io.netty.channel.Channel\",\"com.google.protobuf.Reader\",\"com.google.protobuf.NioByteString$1\",\"com.google.protobuf.DescriptorProtos$FieldOptionsOrBuilder\",\"io.netty.channel.RecvByteBufAllocator$Handle\",\"com.google.protobuf.Descriptors$EnumValueDescriptor\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue\",\"com.google.protobuf.DescriptorProtos$ExtensionRangeOptions\",\"io.netty.channel.ReflectiveChannelFactory\",\"com.google.protobuf.AbstractParser\",\"com.google.protobuf.CodedInputStream$IterableDirectByteBufferDecoder\",\"io.netty.util.internal.logging.InternalLoggerFactory\",\"com.google.protobuf.GeneratedMessageV3$Builder\",\"io.netty.channel.DefaultChannelPipeline$TailContext\",\"com.google.protobuf.GeneratedMessageV3$ExtendableBuilder\",\"org.nico.noson.scanner.buddy.JsonWrapper\",\"io.netty.channel.nio.NioTask\",\"io.netty.buffer.PoolSubpageMetric\",\"io.netty.buffer.WrappedCompositeByteBuf\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueProducerLimitField\",\"io.netty.channel.ChannelPromise\",\"com.google.protobuf.DescriptorProtos$FileOptions\",\"io.netty.util.Recycler$WeakOrderQueue\",\"com.google.protobuf.MessageLite$Builder\",\"io.netty.bootstrap.AbstractBootstrap\",\"com.google.protobuf.AbstractMessageLite\",\"org.nico.noson.handler.reversal.impl.ReversalNosonHandler\",\"com.google.protobuf.DescriptorProtos$UninterpretedOptionOrBuilder\",\"io.netty.channel.SelectStrategyFactory\",\"io.netty.channel.socket.ChannelOutputShutdownException\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo\",\"com.google.protobuf.NioByteString\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProtoOrBuilder\",\"io.netty.channel.DefaultChannelId\",\"io.netty.channel.ChannelInitializer\",\"com.google.protobuf.LazyFieldLite\",\"com.google.protobuf.UnsafeUtil$Android32MemoryAccessor\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueueColdProducerFields\",\"io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf$1\",\"com.google.protobuf.Parser\",\"io.netty.channel.ChannelOutboundBuffer\",\"io.netty.buffer.UnpooledDuplicatedByteBuf\",\"com.google.protobuf.Descriptors$FieldDescriptor\",\"com.google.protobuf.LazyStringList\",\"com.google.protobuf.MutabilityOracle$1\",\"io.netty.buffer.AbstractDerivedByteBuf\",\"io.netty.buffer.PoolChunkMetric\",\"com.google.protobuf.DescriptorProtos$MessageOptionsOrBuilder\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueuePad2\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueuePad3\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueuePad1\",\"io.netty.channel.DefaultChannelPipeline\",\"com.google.protobuf.Descriptors$FileDescriptor\",\"org.nico.noson.scanner.buddy.JsonFieldParser\",\"io.netty.buffer.UnpooledSlicedByteBuf\",\"com.google.protobuf.WireFormat$FieldType$1\",\"com.google.protobuf.WireFormat$FieldType$2\",\"org.nico.ratel.landlords.print.SimpleWriter\",\"com.google.protobuf.WireFormat$FieldType$3\",\"com.google.protobuf.WireFormat$FieldType$4\",\"com.google.protobuf.Descriptors$FieldDescriptor$JavaType\",\"com.google.protobuf.DescriptorProtos$EnumOptions$Builder\",\"com.google.protobuf.AbstractMessageLite$Builder\",\"com.google.protobuf.DescriptorProtos$ServiceOptions$1\",\"io.netty.util.IntSupplier\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.LinkedQueueAtomicNode\",\"io.netty.buffer.ByteBuf\",\"io.netty.channel.socket.DuplexChannel\",\"io.netty.util.concurrent.DefaultEventExecutorChooserFactory$GenericEventExecutorChooser\",\"io.netty.buffer.SimpleLeakAwareCompositeByteBuf\",\"com.google.protobuf.Descriptors$EnumDescriptor\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueuePad3\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.SpscLinkedAtomicQueue\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueuePad2\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueuePad1\",\"com.google.protobuf.WireFormat$JavaType\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo$LocationOrBuilder\",\"com.google.protobuf.DescriptorProtos$UninterpretedOption\",\"io.netty.util.NetUtil\",\"com.google.protobuf.Descriptors$Descriptor\",\"io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf\",\"io.netty.buffer.WrappedByteBuf\",\"com.google.protobuf.CodedOutputStream$HeapNioEncoder\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ExtensionRange\",\"io.netty.util.concurrent.DefaultEventExecutorChooserFactory\",\"io.netty.channel.ChannelFuture\",\"io.netty.channel.SingleThreadEventLoop$NonWakeupRunnable\",\"com.google.protobuf.DescriptorProtos$ExtensionRangeOptions$Builder\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueL1Pad\",\"io.netty.channel.ChannelConfig\",\"com.google.protobuf.GeneratedMessageV3\",\"com.google.protobuf.DescriptorProtos$EnumValueDescriptorProto$Builder\",\"io.netty.util.concurrent.FailedFuture\",\"io.netty.util.internal.SystemPropertyUtil$1\",\"io.netty.channel.AbstractChannel$AnnotatedNoRouteToHostException\",\"com.google.protobuf.PrimitiveNonBoxingCollection\",\"com.google.protobuf.DescriptorProtos$MethodOptions\",\"io.netty.util.AttributeMap\",\"com.google.protobuf.DescriptorProtos$OneofDescriptorProto\",\"io.netty.util.internal.Cleaner\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueL1Pad\",\"io.netty.util.IllegalReferenceCountException\",\"io.netty.util.concurrent.ScheduledFuture\",\"io.netty.buffer.ByteBufUtil$1\",\"io.netty.buffer.ByteBufUtil$2\",\"io.netty.buffer.CompositeByteBuf$Component\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Type$1\",\"io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$ExitCondition\",\"com.google.protobuf.LazyStringArrayList\",\"io.netty.buffer.AbstractPooledDerivedByteBuf$PooledNonRetainedDuplicateByteBuf\",\"io.netty.channel.nio.NioEventLoop$1\",\"io.netty.channel.nio.NioEventLoop$2\",\"io.netty.channel.nio.NioEventLoop$3\",\"io.netty.util.concurrent.AbstractEventExecutorGroup\",\"io.netty.channel.nio.NioEventLoop$4\",\"io.netty.util.internal.shaded.org.jctools.queues.ConcurrentCircularArrayQueue\",\"com.google.protobuf.InvalidProtocolBufferException\",\"com.google.protobuf.Descriptors$MethodDescriptor\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto$1\",\"io.netty.buffer.UnpooledByteBufAllocator$InstrumentedUnpooledUnsafeNoCleanerDirectByteBuf\",\"com.google.protobuf.GeneratedMessageLite$GeneratedExtension\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo$Location$Builder\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseLinkedAtomicQueueProducerNodeRef\",\"io.netty.util.internal.CleanerJava6\",\"io.netty.channel.AbstractChannelHandlerContext$WriteTask\",\"io.netty.channel.ChannelPipelineException\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ReservedRangeOrBuilder\",\"com.google.protobuf.DescriptorProtos$MethodDescriptorProto$Builder\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueConsumerFields\",\"com.google.protobuf.DescriptorProtos$FieldOptions$JSType\",\"com.google.protobuf.DescriptorProtos$UninterpretedOption$NamePartOrBuilder\",\"io.netty.util.ByteProcessor$1\",\"com.google.protobuf.DescriptorProtos$MessageOptions$1\",\"io.netty.util.internal.logging.InternalLogger\",\"org.nico.noson.handler.reversal.impl.ReversalObjectHandler\",\"org.nico.noson.scanner.NoScanner\",\"io.netty.buffer.AbstractReferenceCountedByteBuf\",\"com.google.protobuf.DescriptorProtos$ExtensionRangeOptions$1\",\"io.netty.buffer.UnpooledHeapByteBuf\",\"io.netty.util.concurrent.EventExecutor\",\"com.google.protobuf.DescriptorProtos$UninterpretedOption$Builder\",\"com.google.protobuf.SmallSortedMap$1\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueueProducerNodeRef\",\"io.netty.channel.ChannelOption\",\"io.netty.util.internal.LongCounter\",\"io.netty.util.ByteProcessor$4\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo$Location$1\",\"io.netty.util.internal.ThreadLocalRandom$1\",\"io.netty.util.ByteProcessor$3\",\"io.netty.util.ByteProcessor$2\",\"io.netty.util.ResourceLeakHint\",\"io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Consumer\",\"io.netty.channel.DefaultChannelPipeline$PendingHandlerAddedTask\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueConsumerIndexField\",\"io.netty.util.internal.shaded.org.jctools.util.RangeUtil\",\"io.netty.channel.ChannelMetadata\",\"io.netty.util.Recycler$3\",\"io.netty.buffer.FixedCompositeByteBuf$Component\",\"com.google.protobuf.DescriptorProtos$MethodDescriptorProto$1\",\"io.netty.buffer.SimpleLeakAwareByteBuf\",\"io.netty.channel.ChannelOutboundBuffer$1\",\"io.netty.util.Recycler$1\",\"io.netty.util.Recycler$2\",\"com.google.protobuf.MapEntryLite$Metadata\",\"org.nico.noson.scanner.buddy.JsonFieldParser$ParserResult\",\"io.netty.util.concurrent.GlobalEventExecutor$TaskRunner\",\"io.netty.util.Attribute\",\"io.netty.util.concurrent.AbstractFuture\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueL2Pad\",\"com.google.protobuf.Descriptors$FileDescriptor$InternalDescriptorAssigner\",\"com.google.protobuf.UnsafeUtil$JvmMemoryAccessor\",\"io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueConsumerFields\",\"com.google.protobuf.DescriptorProtos$FieldOptions$CType$1\",\"io.netty.buffer.PoolThreadCache$MemoryRegionCache$1\",\"io.netty.util.ReferenceCounted\",\"org.nico.ratel.landlords.client.entity.User\",\"io.netty.buffer.PooledDuplicatedByteBuf$1\",\"io.netty.util.concurrent.DefaultFutureListeners\",\"com.google.protobuf.DescriptorProtos$EnumOptions\",\"io.netty.buffer.AbstractPooledDerivedByteBuf\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueConsumerIndexField\",\"com.google.protobuf.DescriptorProtos$FieldOptions\",\"io.netty.channel.nio.NioEventLoop\",\"io.netty.util.ResourceLeakDetectorFactory\",\"io.netty.buffer.UnpooledByteBufAllocator$InstrumentedUnpooledUnsafeHeapByteBuf\",\"io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf\",\"com.google.protobuf.CodedOutputStream$UnsafeDirectNioEncoder\",\"io.netty.buffer.ByteBufAllocatorMetricProvider\",\"org.nico.noson.cache.CacheManager\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfoOrBuilder\",\"io.netty.buffer.UnreleasableByteBuf\",\"io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf$1\",\"io.netty.channel.ChannelId\",\"io.netty.buffer.CompositeByteBuf$ComponentList\",\"com.google.protobuf.AbstractMessage$Builder\",\"org.nico.noson.entity.ReversalRecorder\",\"io.netty.util.AbstractConstant\",\"io.netty.util.concurrent.GlobalEventExecutor\",\"com.google.protobuf.CodedOutputStream$ArrayEncoder\",\"io.netty.channel.MessageSizeEstimator\",\"io.netty.buffer.ReadOnlyByteBufferBuf\",\"com.google.protobuf.SmallSortedMap$EmptySet\",\"io.netty.util.internal.PlatformDependent\",\"com.google.protobuf.DescriptorProtos$ServiceDescriptorProto$1\",\"com.google.protobuf.LazyField\",\"io.netty.bootstrap.FailedChannel\",\"com.google.protobuf.UnknownFieldSet$Parser\",\"com.google.protobuf.AbstractProtobufList\",\"io.netty.util.concurrent.OrderedEventExecutor\",\"com.google.protobuf.DescriptorProtos$MethodOptions$IdempotencyLevel\",\"com.google.protobuf.ByteOutput\",\"com.google.protobuf.Internal$EnumLiteMap\",\"io.netty.channel.ChannelHandlerAdapter\",\"com.google.protobuf.DescriptorProtos$FieldOptions$JSType$1\",\"io.netty.channel.AbstractChannel$AbstractUnsafe\",\"io.netty.channel.EventLoop\",\"io.netty.channel.nio.NioEventLoopGroup\",\"io.netty.buffer.PoolArenaMetric\",\"com.google.protobuf.ByteString\",\"io.netty.buffer.UnpooledUnsafeNoCleanerDirectByteBuf\",\"io.netty.buffer.PooledDirectByteBuf$1\",\"io.netty.buffer.PoolThreadCache\",\"com.google.protobuf.Internal$EnumLite\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueL3Pad\",\"com.google.protobuf.CodedOutputStream$OutOfSpaceException\",\"org.nico.noson.handler.reversal.impl.ReversalMapHandler\",\"com.google.protobuf.SmallSortedMap\",\"io.netty.util.AsciiString$2\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueL3Pad\",\"io.netty.util.internal.PriorityQueue\",\"io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask$1\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue\",\"io.netty.channel.ChannelFutureListener$3\",\"io.netty.channel.ChannelFutureListener$2\",\"io.netty.channel.ChannelFutureListener$1\",\"com.google.protobuf.ByteString$2\",\"io.netty.buffer.PooledByteBufAllocatorMetric\",\"io.netty.util.AsciiString$1\",\"com.google.protobuf.DescriptorProtos$ServiceOptions$Builder\",\"io.netty.util.concurrent.AbstractEventExecutor\",\"io.netty.buffer.PooledUnsafeDirectByteBuf\",\"com.google.protobuf.ByteString$ByteIterator\",\"io.netty.channel.AbstractChannelHandlerContext$WriteTask$1\",\"io.netty.util.ResourceLeakTracker\",\"com.google.protobuf.ExtensionRegistry$ExtensionInfo\",\"io.netty.channel.ChannelProgressivePromise\",\"com.google.protobuf.UnknownFieldSet\",\"com.google.protobuf.ByteString$LiteralByteString\",\"io.netty.channel.socket.nio.NioSocketChannel$NioSocketChannelUnsafe\",\"com.google.protobuf.InvalidProtocolBufferException$InvalidWireTypeException\",\"io.netty.bootstrap.FailedChannel$FailedChannelUnsafe\",\"com.google.protobuf.AbstractMessage\",\"com.google.protobuf.Extension$MessageType\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProto$EnumReservedRange$Builder\",\"com.google.protobuf.WireFormat$Utf8Validation\",\"io.netty.util.concurrent.GenericFutureListener\",\"com.google.protobuf.Utf8$UnpairedSurrogateException\",\"org.nico.ratel.landlords.print.SimplePrinter\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProto$1\",\"com.google.protobuf.Internal$LongList\",\"com.google.protobuf.MapField$Converter\",\"com.google.protobuf.MapField\",\"io.netty.util.concurrent.GlobalEventExecutor$1\",\"io.netty.util.ByteProcessor$IndexNotOfProcessor\",\"io.netty.util.concurrent.ScheduledFutureTask\",\"io.netty.util.AttributeKey\",\"com.google.protobuf.Internal\",\"io.netty.util.concurrent.RejectedExecutionHandlers\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseLinkedAtomicQueueConsumerNodeRef\",\"io.netty.buffer.PooledSlicedByteBuf$1\",\"com.google.protobuf.DescriptorProtos$DescriptorProto\",\"io.netty.util.Recycler$WeakOrderQueue$Head\",\"com.google.protobuf.DescriptorProtos$MethodOptions$1\",\"io.netty.channel.ChannelInboundHandler\",\"com.google.protobuf.Message$Builder\",\"com.google.protobuf.MapEntry$Metadata\",\"io.netty.util.ResourceLeakDetector$Record\",\"com.google.protobuf.DescriptorProtos$FieldOptions$1\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueProducerIndexField\",\"com.google.protobuf.DescriptorProtos$ServiceDescriptorProto$Builder\",\"com.google.protobuf.UnsafeUtil$Android64MemoryAccessor\",\"org.nico.noson.scanner.impl.SimpleScanner\",\"io.netty.channel.DefaultChannelHandlerContext\",\"com.google.protobuf.DescriptorProtos$EnumValueOptions\",\"io.netty.util.concurrent.RejectedExecutionHandler\",\"io.netty.channel.socket.SocketChannel\",\"com.google.protobuf.DescriptorProtos$ServiceOptions\",\"io.netty.buffer.PooledDirectByteBuf\",\"io.netty.buffer.AbstractUnsafeSwappedByteBuf\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueProducerFields\",\"io.netty.util.internal.logging.Slf4JLoggerFactory\",\"io.netty.channel.ChannelHandler$Sharable\",\"com.google.protobuf.CodedInputStream$StreamDecoder\",\"com.google.protobuf.DescriptorProtos$MethodOptionsOrBuilder\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueMidPad\",\"io.netty.util.concurrent.DefaultPromise$CauseHolder\",\"com.google.protobuf.ByteString$CodedBuilder\",\"io.netty.buffer.UnpooledByteBufAllocator$InstrumentedUnpooledUnsafeDirectByteBuf\",\"io.netty.channel.ServerChannel\",\"io.netty.util.Recycler\",\"com.google.protobuf.Descriptors$FieldDescriptor$Type\",\"com.google.protobuf.CodedOutputStream$SafeDirectNioEncoder\",\"io.netty.resolver.AddressResolverGroup\",\"io.netty.util.AttributeKey$1\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ExtensionRange$1\",\"com.google.protobuf.DescriptorProtos$OneofDescriptorProto$1\",\"io.netty.util.internal.shaded.org.jctools.util.Pow2\",\"io.netty.buffer.UnpooledDirectByteBuf\",\"io.netty.buffer.UnpooledByteBufAllocator$UnpooledByteBufAllocatorMetric\",\"io.netty.util.concurrent.ThreadProperties\",\"com.google.protobuf.MutabilityOracle\",\"com.google.protobuf.CodedOutputStream$ByteOutputEncoder\",\"io.netty.buffer.UnpooledByteBufAllocator\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicReferenceArrayQueue\",\"com.google.protobuf.RepeatedFieldBuilderV3\",\"io.netty.util.ResourceLeakDetector$Level\",\"io.netty.util.concurrent.ProgressiveFuture\",\"io.netty.buffer.UnpooledByteBufAllocator$InstrumentedUnpooledHeapByteBuf\",\"io.netty.channel.AbstractChannel\",\"io.netty.util.concurrent.FastThreadLocalRunnable\",\"io.netty.util.concurrent.PromiseTask\",\"io.netty.util.internal.PlatformDependent$Mpsc\",\"io.netty.bootstrap.ChannelFactory\",\"com.google.protobuf.Extension\",\"io.netty.channel.MessageSizeEstimator$Handle\",\"io.netty.channel.socket.ServerSocketChannel\",\"io.netty.util.internal.shaded.org.jctools.queues.CircularArrayOffsetCalculator\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ExtensionRange$Builder\",\"io.netty.util.internal.EmptyArrays\",\"io.netty.buffer.PooledUnsafeDirectByteBuf$1\",\"com.google.protobuf.WireFormat$Utf8Validation$1\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueColdProducerFields\",\"com.google.protobuf.WireFormat$Utf8Validation$2\",\"io.netty.channel.ChannelFactory\",\"com.google.protobuf.FieldSet\",\"com.google.protobuf.WireFormat$Utf8Validation$3\",\"io.netty.channel.DefaultSelectStrategyFactory\",\"com.google.protobuf.DescriptorProtos$OneofOptions\",\"org.nico.ratel.landlords.client.proxy.Proxy\",\"io.netty.util.concurrent.Promise\",\"io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe\",\"org.nico.noson.handler.reversal.impl.ReversalListHandler\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProto$EnumReservedRange\",\"io.netty.channel.AbstractChannel$AnnotatedConnectException\",\"io.netty.buffer.ByteBufAllocatorMetric\",\"io.netty.bootstrap.Bootstrap\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueueConsumerNodeRef\",\"io.netty.buffer.PoolArena$DirectArena\",\"io.netty.util.internal.PlatformDependent$ThreadLocalRandomProvider\",\"io.netty.buffer.ReadOnlyUnsafeDirectByteBuf\",\"io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask\",\"io.netty.util.internal.shaded.org.jctools.util.UnsafeAccess\",\"io.netty.util.concurrent.DefaultEventExecutorChooserFactory$PowerOfTwoEventExecutorChooser\",\"org.nico.noson.handler.reversal.impl.ReversalArrayHandler\",\"org.nico.noson.handler.reversal.ReversalHandler\",\"com.google.protobuf.FieldSet$Builder\",\"io.netty.util.internal.shaded.org.jctools.queues.IndexedQueueSizeUtil$IndexedQueue\",\"io.netty.buffer.AdvancedLeakAwareCompositeByteBuf\",\"org.nico.noson.cache.Cache\",\"com.google.protobuf.MapEntry\",\"com.google.protobuf.DescriptorProtos$FileDescriptorProto$Builder\",\"io.netty.util.ConstantPool\",\"com.google.protobuf.ProtocolStringList\",\"com.google.protobuf.GeneratedMessage$ExtensionDescriptorRetriever\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProto$EnumReservedRange$1\",\"org.nico.ratel.landlords.client.SimpleClient$1\",\"com.google.protobuf.GeneratedMessageV3$UnusedPrivateParameter\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueColdProducerFields\",\"io.netty.buffer.UnpooledUnsafeHeapByteBuf\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueue\",\"com.google.protobuf.DescriptorProtos$UninterpretedOption$NamePart$1\",\"com.google.protobuf.DescriptorProtos$EnumValueOptions$Builder\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProto$EnumReservedRangeOrBuilder\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue\",\"io.netty.util.internal.ObjectUtil\",\"com.google.protobuf.DescriptorProtos$FieldOptions$CType\",\"io.netty.channel.DefaultChannelPromise\",\"io.netty.resolver.AddressResolver\",\"com.google.protobuf.DescriptorProtos$EnumOptions$1\",\"io.netty.buffer.AbstractByteBuf\",\"io.netty.util.concurrent.FutureListener\",\"io.netty.buffer.UnpooledUnsafeDirectByteBuf\",\"io.netty.buffer.PoolArena\",\"io.netty.util.AsciiString$CharEqualityComparator\",\"io.netty.util.internal.logging.InternalLogLevel\",\"io.netty.util.ResourceLeakDetector\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscGrowableAtomicArrayQueue\",\"com.google.protobuf.IterableByteBufferInputStream\",\"com.google.protobuf.DescriptorProtos$FileDescriptorProto\",\"com.google.protobuf.DescriptorProtos$EnumValueDescriptorProto\",\"io.netty.util.concurrent.DefaultPromise\",\"io.netty.buffer.CompositeByteBuf\",\"com.google.protobuf.UninitializedMessageException\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProtoOrBuilder\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue\",\"io.netty.channel.ChannelOutboundInvoker\",\"io.netty.buffer.PoolChunk\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo$1\",\"com.google.protobuf.GeneratedMessageV3$BuilderParent\",\"com.google.protobuf.DescriptorProtos$FileOptions$Builder\",\"io.netty.channel.ChannelOutboundBuffer$Entry\",\"io.netty.util.concurrent.MultithreadEventExecutorGroup\",\"io.netty.channel.socket.nio.NioSocketChannel\",\"com.google.protobuf.DescriptorProtos$EnumValueOptionsOrBuilder\",\"com.google.protobuf.MessageReflection$MergeTarget$ContainerType\",\"com.google.protobuf.MapEntry$Builder\",\"io.netty.channel.WriteBufferWaterMark\",\"io.netty.channel.socket.SocketChannelConfig\",\"com.google.protobuf.Internal$DoubleList\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable$OneofAccessor\",\"io.netty.util.Recycler$Stack\",\"com.google.protobuf.DescriptorProtos$FileOptionsOrBuilder\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProto$Builder\",\"org.nico.ratel.landlords.client.proxy.ProtobufProxy$1\",\"com.google.protobuf.DescriptorProtos$FileOptions$OptimizeMode\",\"io.netty.channel.EventLoopException\",\"io.netty.channel.DefaultChannelPipeline$HeadContext\",\"io.netty.util.internal.logging.Slf4JLogger\",\"com.google.protobuf.ByteString$ByteArrayCopier\",\"io.netty.util.concurrent.EventExecutorChooserFactory$EventExecutorChooser\",\"io.netty.util.DefaultAttributeMap\",\"io.netty.util.concurrent.FastThreadLocal\",\"com.google.protobuf.DescriptorProtos$EnumValueDescriptorProto$1\",\"io.netty.util.internal.OutOfDirectMemoryError\",\"com.google.protobuf.CodedOutputStream\",\"io.netty.util.concurrent.AbstractScheduledEventExecutor$1\",\"io.netty.util.internal.IntegerHolder\",\"com.google.protobuf.Internal$ProtobufList\",\"io.netty.util.internal.PlatformDependent$Mpsc$1\",\"io.netty.buffer.PoolThreadCache$MemoryRegionCache\",\"io.netty.util.concurrent.EventExecutorGroup\",\"io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$WaitStrategy\",\"io.netty.channel.ChannelInboundInvoker\",\"io.netty.util.internal.SystemPropertyUtil\",\"com.google.protobuf.DescriptorProtos$FileOptions$1\",\"io.netty.util.concurrent.ThreadPerTaskExecutor\",\"io.netty.channel.AbstractChannel$CloseFuture\",\"com.google.protobuf.Descriptors$FileDescriptor$Syntax\",\"io.netty.buffer.ByteBufUtil\",\"io.netty.buffer.PoolChunkListMetric\",\"com.google.protobuf.ArrayDecoders$Registers\",\"com.google.protobuf.Message\",\"io.netty.channel.ChannelHandler\",\"io.netty.channel.DefaultSelectStrategy\",\"com.google.protobuf.ByteString$ArraysByteArrayCopier\",\"io.netty.channel.DefaultChannelPipeline$1\",\"com.google.protobuf.GeneratedMessageV3$ExtendableMessageOrBuilder\");\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/SimpleClient_ESTest_scaffolding.java",
        "class": "SimpleClient_ESTest_scaffolding",
        "name": "resetClasses",
        "return_type": "void",
        "modifiers": "private static",
        "parameters": [],
        "raw": "private static void resetClasses(){\n  org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(SimpleClient_ESTest_scaffolding.class.getClassLoader());\n  org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\"org.nico.ratel.landlords.client.SimpleClient\",\"org.nico.noson.entity.NoType\",\"org.nico.ratel.landlords.client.SimpleClient$1\",\"org.nico.noson.handler.reversal.ReversalHandlerQueue\",\"org.nico.noson.handler.reversal.ReversalHandler\",\"org.nico.noson.handler.reversal.impl.ReversalVerityHandler\",\"org.nico.noson.handler.reversal.impl.ReversalNosonHandler\",\"org.nico.noson.handler.reversal.impl.ReversalListHandler\",\"org.nico.noson.handler.reversal.impl.ReversalArrayHandler\",\"org.nico.noson.handler.reversal.impl.ReversalMapHandler\",\"org.nico.noson.handler.reversal.impl.ReversalObjectHandler\",\"org.nico.noson.scanner.buddy.JsonWrapper\",\"org.nico.noson.scanner.impl.EmptyScanner\",\"org.nico.noson.scanner.impl.SimpleScanner\",\"org.nico.noson.scanner.buddy.JsonKeyParser\",\"org.nico.noson.scanner.buddy.JsonValueParser\",\"org.nico.noson.NosonConfig\",\"org.nico.noson.cache.CacheManager\",\"org.nico.ratel.landlords.client.entity.User\",\"org.nico.ratel.landlords.print.SimpleWriter\",\"org.nico.ratel.landlords.utils.StreamUtils\",\"org.nico.ratel.landlords.print.SimplePrinter\",\"org.nico.ratel.landlords.client.proxy.ProtobufProxy\",\"io.netty.util.concurrent.AbstractEventExecutorGroup\",\"io.netty.util.concurrent.MultithreadEventExecutorGroup\",\"io.netty.util.internal.logging.InternalLoggerFactory\",\"io.netty.util.internal.logging.Slf4JLoggerFactory\",\"io.netty.util.internal.logging.AbstractInternalLogger\",\"io.netty.util.internal.logging.Slf4JLogger\",\"io.netty.util.NettyRuntime$AvailableProcessorsHolder\",\"io.netty.util.NettyRuntime\",\"io.netty.util.internal.SystemPropertyUtil\",\"io.netty.util.internal.SystemPropertyUtil$1\",\"io.netty.util.internal.ObjectUtil\",\"io.netty.channel.MultithreadEventLoopGroup\",\"io.netty.channel.nio.NioEventLoopGroup\",\"io.netty.channel.DefaultSelectStrategyFactory\",\"io.netty.util.concurrent.RejectedExecutionHandlers$1\",\"io.netty.util.concurrent.RejectedExecutionHandlers\",\"io.netty.util.concurrent.DefaultEventExecutorChooserFactory\",\"io.netty.util.concurrent.AbstractFuture\",\"io.netty.util.concurrent.DefaultPromise$CauseHolder\",\"io.netty.util.internal.ThrowableUtil\",\"io.netty.util.concurrent.DefaultPromise\",\"io.netty.util.concurrent.AbstractEventExecutor\",\"io.netty.util.concurrent.AbstractScheduledEventExecutor$1\",\"io.netty.util.concurrent.AbstractScheduledEventExecutor\",\"io.netty.util.concurrent.PromiseTask\",\"io.netty.util.concurrent.ScheduledFutureTask\",\"io.netty.util.concurrent.GlobalEventExecutor$1\",\"io.netty.util.concurrent.DefaultThreadFactory\",\"io.netty.util.internal.StringUtil\",\"io.netty.util.concurrent.GlobalEventExecutor$TaskRunner\",\"io.netty.util.concurrent.CompleteFuture\",\"io.netty.util.concurrent.FailedFuture\",\"io.netty.util.internal.DefaultPriorityQueue\",\"io.netty.util.concurrent.GlobalEventExecutor\",\"io.netty.util.concurrent.ThreadPerTaskExecutor\",\"io.netty.util.concurrent.SingleThreadEventExecutor$1\",\"io.netty.util.concurrent.SingleThreadEventExecutor$2\",\"io.netty.util.concurrent.SingleThreadEventExecutor\",\"io.netty.channel.SingleThreadEventLoop\",\"io.netty.channel.nio.NioEventLoop$2\",\"io.netty.channel.nio.NioEventLoop\",\"io.netty.channel.DefaultSelectStrategy\",\"io.netty.util.internal.PlatformDependent0$1\",\"io.netty.util.internal.ReflectionUtil\",\"io.netty.util.internal.PlatformDependent0$2\",\"io.netty.util.internal.PlatformDependent0$3\",\"io.netty.util.internal.PlatformDependent0$4\",\"io.netty.util.internal.PlatformDependent0$5\",\"io.netty.util.internal.PlatformDependent0$10\",\"io.netty.util.internal.PlatformDependent0\",\"io.netty.util.internal.PlatformDependent$1\",\"io.netty.util.internal.PlatformDependent$2\",\"io.netty.util.internal.CleanerJava6\",\"io.netty.util.internal.PlatformDependent\",\"io.netty.util.internal.PlatformDependent$Mpsc$1\",\"io.netty.util.internal.shaded.org.jctools.util.UnsafeAccess\",\"io.netty.util.internal.PlatformDependent$Mpsc\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueuePad1\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueProducerFields\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueuePad2\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueConsumerFields\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueuePad3\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueColdProducerFields\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue\",\"io.netty.util.internal.shaded.org.jctools.util.RangeUtil\",\"io.netty.util.internal.shaded.org.jctools.util.Pow2\",\"io.netty.util.internal.shaded.org.jctools.queues.CircularArrayOffsetCalculator\",\"io.netty.channel.nio.NioEventLoop$1\",\"io.netty.channel.nio.NioEventLoop$3\",\"io.netty.channel.nio.SelectedSelectionKeySet\",\"io.netty.channel.nio.NioEventLoop$4\",\"io.netty.channel.nio.NioEventLoop$SelectorTuple\",\"io.netty.channel.nio.SelectedSelectionKeySetSelector\",\"io.netty.util.concurrent.DefaultEventExecutorChooserFactory$PowerOfTwoEventExecutorChooser\",\"io.netty.util.concurrent.MultithreadEventExecutorGroup$1\",\"io.netty.bootstrap.AbstractBootstrap\",\"io.netty.resolver.AddressResolverGroup\",\"io.netty.resolver.DefaultAddressResolverGroup\",\"io.netty.bootstrap.Bootstrap\",\"io.netty.bootstrap.AbstractBootstrapConfig\",\"io.netty.bootstrap.BootstrapConfig\",\"io.netty.channel.ReflectiveChannelFactory\",\"io.netty.channel.ChannelHandlerAdapter\",\"io.netty.channel.ChannelInboundHandlerAdapter\",\"io.netty.channel.ChannelInitializer\",\"org.nico.ratel.landlords.client.proxy.ProtobufProxy$1\",\"io.netty.util.DefaultAttributeMap\",\"io.netty.channel.AbstractChannel\",\"io.netty.channel.nio.AbstractNioChannel\",\"io.netty.channel.ChannelMetadata\",\"io.netty.channel.nio.AbstractNioByteChannel\",\"io.netty.channel.socket.nio.NioSocketChannel\",\"io.netty.channel.VoidChannelPromise\",\"io.netty.channel.DefaultChannelPromise\",\"io.netty.channel.AbstractChannel$CloseFuture\",\"io.netty.util.internal.PlatformDependent0$8\",\"io.netty.util.internal.EmptyArrays\",\"io.netty.util.internal.MacAddressUtil\",\"io.netty.util.NetUtil\",\"io.netty.channel.DefaultChannelId\",\"io.netty.channel.ChannelException\",\"io.netty.bootstrap.FailedChannel\",\"io.netty.util.concurrent.SingleThreadEventExecutor$5\",\"io.netty.util.concurrent.FastThreadLocalRunnable\",\"io.netty.util.concurrent.FastThreadLocalThread\");\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/handler/WebsocketTransferHandler_ESTest.java",
        "class": "WebsocketTransferHandler_ESTest",
        "name": "test0",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test0() throws Throwable {\n  WebsocketTransferHandler websocketTransferHandler0\u003dnew WebsocketTransferHandler();\n  ChannelHandlerContext channelHandlerContext0\u003dmock(ChannelHandlerContext.class,new ViolatedAssumptionAnswer());\n  doReturn((Channel)null).when(channelHandlerContext0).channel();\n  IdleStateEvent idleStateEvent0\u003dIdleStateEvent.WRITER_IDLE_STATE_EVENT;\n  try {\n    websocketTransferHandler0.userEventTriggered(channelHandlerContext0,idleStateEvent0);\n    fail(\"Expecting exception: NullPointerException\");\n  }\n catch (  NullPointerException e) {\n    verifyException(\"org.nico.ratel.landlords.channel.ChannelUtils\",e);\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/handler/WebsocketTransferHandler_ESTest.java",
        "class": "WebsocketTransferHandler_ESTest",
        "name": "test1",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test1() throws Throwable {\n  WebsocketTransferHandler websocketTransferHandler0\u003dnew WebsocketTransferHandler();\n  ChannelHandlerContext channelHandlerContext0\u003dmock(ChannelHandlerContext.class,new ViolatedAssumptionAnswer());\n  TextWebSocketFrame textWebSocketFrame0\u003dnew TextWebSocketFrame();\n  textWebSocketFrame0.release();\n  try {\n    websocketTransferHandler0.channelRead0(channelHandlerContext0,textWebSocketFrame0);\n    fail(\"Expecting exception: IllegalStateException\");\n  }\n catch (  IllegalStateException e) {\n    verifyException(\"io.netty.buffer.DefaultByteBufHolder\",e);\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/handler/WebsocketTransferHandler_ESTest.java",
        "class": "WebsocketTransferHandler_ESTest",
        "name": "test2",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test2() throws Throwable {\n  WebsocketTransferHandler websocketTransferHandler0\u003dnew WebsocketTransferHandler();\n  TextWebSocketFrame textWebSocketFrame0\u003dnew TextWebSocketFrame();\n  try {\n    websocketTransferHandler0.channelRead0((ChannelHandlerContext)null,textWebSocketFrame0);\n    fail(\"Expecting exception: NullPointerException\");\n  }\n catch (  NullPointerException e) {\n    verifyException(\"org.nico.ratel.landlords.client.handler.WebsocketTransferHandler\",e);\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/handler/WebsocketTransferHandler_ESTest.java",
        "class": "WebsocketTransferHandler_ESTest",
        "name": "test3",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test3() throws Throwable {\n  WebsocketTransferHandler websocketTransferHandler0\u003dnew WebsocketTransferHandler();\n  ChannelHandlerContext channelHandlerContext0\u003dmock(ChannelHandlerContext.class,new ViolatedAssumptionAnswer());\n  TextWebSocketFrame textWebSocketFrame0\u003dnew TextWebSocketFrame(false,1943,\"uf/Bi@O\");\n  try {\n    websocketTransferHandler0.channelRead0(channelHandlerContext0,textWebSocketFrame0);\n    fail(\"Expecting exception: RuntimeException\");\n  }\n catch (  RuntimeException e) {\n    verifyException(\"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter\",e);\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/handler/WebsocketTransferHandler_ESTest.java",
        "class": "WebsocketTransferHandler_ESTest",
        "name": "test4",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test4() throws Throwable {\n  WebsocketTransferHandler websocketTransferHandler0\u003dnew WebsocketTransferHandler();\n  MockIOException mockIOException0\u003dnew MockIOException();\n  try {\n    websocketTransferHandler0.exceptionCaught((ChannelHandlerContext)null,mockIOException0);\n    fail(\"Expecting exception: System.SystemExitException\");\n  }\n catch (  System.SystemExitException e) {\n    verifyException(\"org.evosuite.runtime.System\",e);\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/handler/WebsocketTransferHandler_ESTest.java",
        "class": "WebsocketTransferHandler_ESTest",
        "name": "test5",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test5() throws Throwable {\n  WebsocketTransferHandler websocketTransferHandler0\u003dnew WebsocketTransferHandler();\n  SQLTransactionRollbackException sQLTransactionRollbackException0\u003dnew SQLTransactionRollbackException(\"{%*ZUFQn()GmXDvu69U\",\"{%*ZUFQn()GmXDvu69U\");\n  websocketTransferHandler0.exceptionCaught((ChannelHandlerContext)null,sQLTransactionRollbackException0);\n  assertEquals(0,sQLTransactionRollbackException0.getErrorCode());\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/handler/WebsocketTransferHandler_ESTest.java",
        "class": "WebsocketTransferHandler_ESTest",
        "name": "test6",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test6() throws Throwable {\n  WebsocketTransferHandler websocketTransferHandler0\u003dnew WebsocketTransferHandler();\n  IdleStateEvent idleStateEvent0\u003dIdleStateEvent.FIRST_READER_IDLE_STATE_EVENT;\n  websocketTransferHandler0.userEventTriggered((ChannelHandlerContext)null,idleStateEvent0);\n  assertTrue(idleStateEvent0.isFirst());\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/handler/WebsocketTransferHandler_ESTest.java",
        "class": "WebsocketTransferHandler_ESTest",
        "name": "test7",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test7() throws Throwable {\n  WebsocketTransferHandler websocketTransferHandler0\u003dnew WebsocketTransferHandler();\n  ChannelHandlerContext channelHandlerContext0\u003dmock(ChannelHandlerContext.class,new ViolatedAssumptionAnswer());\n  websocketTransferHandler0.userEventTriggered(channelHandlerContext0,\"8)cPeQ:\");\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/handler/WebsocketTransferHandler_ESTest_scaffolding.java",
        "class": "WebsocketTransferHandler_ESTest_scaffolding",
        "name": "initEvoSuiteFramework",
        "return_type": "void",
        "modifiers": "@BeforeClass public static",
        "parameters": [],
        "raw": "@BeforeClass public static void initEvoSuiteFramework(){\n  org.evosuite.runtime.RuntimeSettings.className\u003d\"org.nico.ratel.landlords.client.handler.WebsocketTransferHandler\";\n  org.evosuite.runtime.GuiSupport.initialize();\n  org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads\u003d100;\n  org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop\u003d10000;\n  org.evosuite.runtime.RuntimeSettings.mockSystemIn\u003dtrue;\n  org.evosuite.runtime.RuntimeSettings.sandboxMode\u003dorg.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED;\n  org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT();\n  org.evosuite.runtime.classhandling.JDKClassResetter.init();\n  setSystemProperties();\n  initializeClasses();\n  org.evosuite.runtime.Runtime.getInstance().resetRuntime();\n  try {\n    initMocksToAvoidTimeoutsInTheTests();\n  }\n catch (  ClassNotFoundException e) {\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/handler/WebsocketTransferHandler_ESTest_scaffolding.java",
        "class": "WebsocketTransferHandler_ESTest_scaffolding",
        "name": "clearEvoSuiteFramework",
        "return_type": "void",
        "modifiers": "@AfterClass public static",
        "parameters": [],
        "raw": "@AfterClass public static void clearEvoSuiteFramework(){\n  Sandbox.resetDefaultSecurityManager();\n  java.lang.System.setProperties((java.util.Properties)defaultProperties.clone());\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/handler/WebsocketTransferHandler_ESTest_scaffolding.java",
        "class": "WebsocketTransferHandler_ESTest_scaffolding",
        "name": "initTestCase",
        "return_type": "void",
        "modifiers": "@Before public",
        "parameters": [],
        "raw": "@Before public void initTestCase(){\n  threadStopper.storeCurrentThreads();\n  threadStopper.startRecordingTime();\n  org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler();\n  org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode();\n  setSystemProperties();\n  org.evosuite.runtime.GuiSupport.setHeadless();\n  org.evosuite.runtime.Runtime.getInstance().resetRuntime();\n  org.evosuite.runtime.agent.InstrumentingAgent.activate();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/handler/WebsocketTransferHandler_ESTest_scaffolding.java",
        "class": "WebsocketTransferHandler_ESTest_scaffolding",
        "name": "doneWithTestCase",
        "return_type": "void",
        "modifiers": "@After public",
        "parameters": [],
        "raw": "@After public void doneWithTestCase(){\n  threadStopper.killAndJoinClientThreads();\n  org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks();\n  org.evosuite.runtime.classhandling.JDKClassResetter.reset();\n  resetClasses();\n  org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode();\n  org.evosuite.runtime.agent.InstrumentingAgent.deactivate();\n  org.evosuite.runtime.GuiSupport.restoreHeadlessMode();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/handler/WebsocketTransferHandler_ESTest_scaffolding.java",
        "class": "WebsocketTransferHandler_ESTest_scaffolding",
        "name": "setSystemProperties",
        "return_type": "void",
        "modifiers": "public static",
        "parameters": [],
        "raw": "public static void setSystemProperties(){\n  java.lang.System.setProperties((java.util.Properties)defaultProperties.clone());\n  java.lang.System.setProperty(\"file.encoding\",\"UTF-8\");\n  java.lang.System.setProperty(\"java.awt.headless\",\"true\");\n  java.lang.System.setProperty(\"java.io.tmpdir\",\"/tmp\");\n  java.lang.System.setProperty(\"user.country\",\"US\");\n  java.lang.System.setProperty(\"user.dir\",\"/home/lvdthieu/code-gen/ratel/landlords-client\");\n  java.lang.System.setProperty(\"user.home\",\"/home/lvdthieu\");\n  java.lang.System.setProperty(\"user.language\",\"en\");\n  java.lang.System.setProperty(\"user.name\",\"lvdthieu\");\n  java.lang.System.setProperty(\"user.timezone\",\"Asia/Ho_Chi_Minh\");\n  java.lang.System.setProperty(\"sun.arch.data.model\",\"64\");\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/handler/WebsocketTransferHandler_ESTest_scaffolding.java",
        "class": "WebsocketTransferHandler_ESTest_scaffolding",
        "name": "initializeClasses",
        "return_type": "void",
        "modifiers": "private static",
        "parameters": [],
        "raw": "private static void initializeClasses(){\n  org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(WebsocketTransferHandler_ESTest_scaffolding.class.getClassLoader(),\"com.google.protobuf.DescriptorProtos$OneofOptionsOrBuilder\",\"com.google.gson.internal.bind.TimeTypeAdapter$1\",\"io.netty.channel.ChannelInboundHandlerAdapter\",\"io.netty.util.internal.PlatformDependent0\",\"io.netty.buffer.UnpooledByteBufAllocator$InstrumentedUnpooledDirectByteBuf\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo$Location\",\"com.google.gson.internal.bind.JsonTreeWriter\",\"com.google.gson.GsonBuilder\",\"com.google.protobuf.CodedInputStream$UnsafeDirectNioDecoder\",\"com.google.gson.JsonDeserializationContext\",\"io.netty.util.internal.ReflectionUtil\",\"com.google.protobuf.Extension$ExtensionType\",\"io.netty.buffer.DuplicatedByteBuf\",\"io.netty.util.concurrent.FastThreadLocalThread\",\"com.google.protobuf.Descriptors$ServiceDescriptor\",\"com.google.gson.internal.bind.TimeTypeAdapter\",\"io.netty.util.internal.ThreadLocalRandom\",\"com.google.protobuf.MessageReflection$MergeTarget\",\"com.google.protobuf.DescriptorProtos$EnumOptionsOrBuilder\",\"io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue\",\"com.google.protobuf.ByteString$LeafByteString\",\"com.google.protobuf.DescriptorProtos$MethodDescriptorProto\",\"io.netty.util.internal.PlatformDependent0$3\",\"io.netty.channel.ChannelOutboundBuffer$MessageProcessor\",\"io.netty.util.internal.PlatformDependent0$4\",\"io.netty.util.internal.PlatformDependent0$5\",\"com.google.protobuf.DescriptorProtos$DescriptorProtoOrBuilder\",\"io.netty.buffer.PooledByteBufAllocator\",\"io.netty.util.internal.PlatformDependent0$1\",\"io.netty.util.internal.PlatformDependent0$2\",\"io.netty.util.internal.TypeParameterMatcher$1\",\"com.google.gson.LongSerializationPolicy\",\"com.google.protobuf.GeneratedMessageV3$ExtensionDescriptorRetriever\",\"com.google.gson.internal.Excluder\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ReservedRange\",\"com.google.protobuf.SmallSortedMap$EmptySet$1\",\"io.netty.buffer.PoolThreadCache$MemoryRegionCache$Entry\",\"com.google.protobuf.DescriptorProtos$UninterpretedOption$NamePart\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProto\",\"com.google.protobuf.SmallSortedMap$EmptySet$2\",\"com.google.protobuf.Descriptors$DescriptorPool$SearchFilter\",\"io.netty.util.internal.PlatformDependent$1\",\"io.netty.util.internal.PlatformDependent$2\",\"io.netty.util.ResourceLeakDetector$DefaultResourceLeak\",\"com.google.protobuf.AbstractMessage$BuilderParent\",\"com.google.protobuf.DescriptorProtos$EnumValueOptions$1\",\"com.google.protobuf.DescriptorProtos$OneofDescriptorProto$Builder\",\"com.google.protobuf.UnsafeUtil$MemoryAccessor\",\"io.netty.util.internal.shaded.org.jctools.queues.LinkedQueueNode\",\"com.google.protobuf.SingleFieldBuilderV3\",\"io.netty.buffer.FixedCompositeByteBuf\",\"io.netty.buffer.AdvancedLeakAwareByteBuf\",\"io.netty.util.internal.StringUtil\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto\",\"io.netty.util.internal.logging.AbstractInternalLogger\",\"com.google.protobuf.UnknownFieldSet$Field$Builder\",\"com.google.protobuf.CodedOutputStream$OutputStreamEncoder\",\"com.google.gson.internal.reflect.UnsafeReflectionAccessor\",\"com.google.protobuf.GeneratedMessageV3$1\",\"com.google.gson.Gson$FutureTypeAdapter\",\"io.netty.util.internal.LongAdderCounter\",\"com.google.protobuf.UnsafeUtil\",\"io.netty.buffer.PoolArena$SizeClass\",\"com.google.protobuf.CodedOutputStream$AbstractBufferedEncoder\",\"com.google.protobuf.DescriptorProtos$MethodDescriptorProtoOrBuilder\",\"com.google.gson.internal.$Gson$Preconditions\",\"io.netty.buffer.PoolThreadCache$NormalMemoryRegionCache\",\"com.google.protobuf.ByteString$BoundedByteString\",\"com.google.protobuf.Descriptors$DescriptorPool\",\"io.netty.util.internal.UnpaddedInternalThreadLocalMap\",\"com.google.protobuf.UnknownFieldSet$Field\",\"io.netty.buffer.PooledByteBuf\",\"io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory\",\"com.google.protobuf.Internal$BooleanList\",\"com.google.protobuf.DescriptorProtos$ServiceOptionsOrBuilder\",\"io.netty.util.ResourceLeakDetector$LeakEntry\",\"com.google.gson.internal.ConstructorConstructor$3\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable$FieldAccessor\",\"com.google.gson.internal.ObjectConstructor\",\"io.netty.channel.SimpleChannelInboundHandler\",\"com.google.protobuf.DescriptorProtos$OneofOptions$1\",\"com.google.gson.JsonNull\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Label$1\",\"io.netty.util.concurrent.Future\",\"com.google.protobuf.Writer\",\"io.netty.util.HashingStrategy$1\",\"com.google.gson.JsonObject\",\"com.google.protobuf.ProtocolMessageEnum\",\"com.google.protobuf.DescriptorProtos$OneofDescriptorProtoOrBuilder\",\"io.netty.buffer.ByteBufAllocator\",\"com.google.gson.Gson$2\",\"com.google.protobuf.Internal$FloatList\",\"io.netty.buffer.PoolChunkList\",\"com.google.gson.Gson$3\",\"com.google.gson.internal.bind.ObjectTypeAdapter\",\"com.google.gson.Gson$4\",\"com.google.gson.Gson$5\",\"io.netty.buffer.PoolSubpage\",\"io.netty.buffer.SwappedByteBuf\",\"com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter\",\"io.netty.buffer.Unpooled\",\"com.google.gson.Gson$1\",\"io.netty.channel.ChannelProgressiveFuture\",\"io.netty.util.NettyRuntime$AvailableProcessorsHolder\",\"io.netty.util.Recycler$Handle\",\"com.google.protobuf.Descriptors$DescriptorValidationException\",\"com.google.protobuf.IntArrayList\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Builder\",\"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory\",\"com.google.protobuf.DescriptorProtos$MessageOptions$Builder\",\"io.netty.buffer.AbstractByteBufAllocator\",\"io.netty.buffer.WrappedUnpooledUnsafeDirectByteBuf\",\"com.google.protobuf.DescriptorProtos$UninterpretedOption$NamePart$Builder\",\"com.google.gson.internal.bind.JsonTreeWriter$1\",\"io.netty.buffer.PooledDuplicatedByteBuf\",\"com.google.protobuf.DescriptorProtos$FileDescriptorProto$1\",\"com.google.protobuf.Writer$FieldOrder\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueuePad2\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueuePad0\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueuePad1\",\"com.google.protobuf.Descriptors$OneofDescriptor\",\"com.google.gson.JsonIOException\",\"com.google.gson.internal.bind.TypeAdapters\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo$Builder\",\"com.google.protobuf.GeneratedMessageV3$ExtendableMessage\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueProducerIndexField\",\"com.google.protobuf.FieldSet$FieldDescriptorLite\",\"com.google.protobuf.DescriptorProtos$ServiceDescriptorProtoOrBuilder\",\"io.netty.util.internal.InternalThreadLocalMap\",\"com.google.protobuf.MessageOrBuilder\",\"com.google.protobuf.DescriptorProtos$UninterpretedOption$1\",\"io.netty.util.ResourceLeak\",\"io.netty.channel.ChannelHandlerContext\",\"com.google.gson.FieldNamingPolicy\",\"io.netty.util.HashingStrategy\",\"com.google.protobuf.DescriptorProtos$FieldOptions$Builder\",\"io.netty.util.internal.MathUtil\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueProducerLimitField\",\"com.google.protobuf.WireFormat$FieldType\",\"com.google.gson.JsonPrimitive\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Type\",\"com.google.protobuf.ExtensionRegistryFactory\",\"io.netty.channel.EventLoopGroup\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ReservedRange$Builder\",\"io.netty.buffer.AbstractUnpooledSlicedByteBuf\",\"com.google.protobuf.MessageLiteOrBuilder\",\"io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Supplier\",\"io.netty.channel.Channel$Unsafe\",\"com.google.protobuf.MessageLite\",\"io.netty.util.internal.shaded.org.jctools.queues.QueueProgressIndicators\",\"com.google.protobuf.UnsafeUtil$1\",\"com.google.protobuf.DescriptorProtos$EnumValueDescriptorProtoOrBuilder\",\"com.google.protobuf.CodedInputStream\",\"io.netty.buffer.EmptyByteBuf\",\"io.netty.buffer.AbstractPooledDerivedByteBuf$PooledNonRetainedSlicedByteBuf\",\"com.google.protobuf.Schema\",\"com.google.protobuf.ExtensionRegistry\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Label\",\"com.google.protobuf.CodedInputStream$ArrayDecoder\",\"io.netty.channel.ChannelOutboundBuffer$Entry$1\",\"com.google.protobuf.DescriptorProtos$MethodOptions$Builder\",\"com.google.protobuf.Descriptors$1\",\"io.netty.buffer.ReadOnlyByteBuf\",\"com.google.protobuf.TextFormat$InvalidEscapeSequenceException\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ExtensionRangeOrBuilder\",\"com.google.protobuf.Android\",\"com.google.protobuf.AbstractMessageLite$Builder$LimitedInputStream\",\"com.google.gson.internal.bind.TypeAdapters$23\",\"io.netty.util.AsciiString\",\"com.google.gson.internal.bind.TypeAdapters$24\",\"com.google.gson.internal.bind.TypeAdapters$25\",\"com.google.gson.internal.bind.TypeAdapters$26\",\"com.google.gson.internal.bind.TypeAdapters$20\",\"com.google.protobuf.GeneratedMessageV3$Builder$BuilderParentImpl\",\"com.google.gson.internal.bind.TypeAdapters$21\",\"com.google.gson.internal.bind.TypeAdapters$22\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueL2Pad\",\"io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory$1\",\"com.google.gson.internal.bind.TypeAdapters$27\",\"com.google.protobuf.Internal$IntList\",\"com.google.gson.FieldNamingStrategy\",\"com.google.gson.internal.bind.TypeAdapters$28\",\"com.google.gson.internal.bind.TypeAdapters$29\",\"com.google.protobuf.ExtensionRegistryLite\",\"com.google.protobuf.GeneratedMessageV3$ExtendableMessage$ExtensionWriter\",\"io.netty.util.CharsetUtil\",\"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper\",\"com.google.protobuf.DescriptorProtos$OneofOptions$Builder\",\"com.google.protobuf.DescriptorProtos$MessageOptions\",\"com.google.gson.ExclusionStrategy\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueue\",\"io.netty.buffer.DefaultByteBufHolder\",\"com.google.protobuf.ByteString$Output\",\"io.netty.util.internal.shaded.org.jctools.queues.SpscLinkedQueue\",\"com.google.gson.internal.bind.TypeAdapters$34\",\"com.google.gson.internal.bind.TypeAdapters$35\",\"io.netty.buffer.UnsafeDirectSwappedByteBuf\",\"io.netty.util.NettyRuntime\",\"io.netty.buffer.PooledSlicedByteBuf\",\"io.netty.channel.ChannelPipeline\",\"io.netty.channel.RecvByteBufAllocator\",\"com.google.gson.internal.bind.TypeAdapters$30\",\"com.google.gson.internal.bind.TypeAdapters$32\",\"com.google.gson.internal.bind.TypeAdapters$33\",\"com.google.protobuf.DescriptorProtos$FileOptions$OptimizeMode$1\",\"com.google.gson.JsonArray\",\"com.google.protobuf.GeneratedMessage$GeneratedExtension\",\"com.google.protobuf.MapField$MutatabilityAwareMap\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$1\",\"io.netty.util.concurrent.ProgressivePromise\",\"com.google.protobuf.ExtensionLite\",\"io.netty.util.ReferenceCountUtil\",\"com.google.protobuf.DescriptorProtos$ServiceDescriptorProto\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$Builder\",\"io.netty.util.internal.PlatformDependent0$10\",\"com.google.gson.TypeAdapterFactory\",\"io.netty.util.Constant\",\"com.google.protobuf.UnknownFieldSet$Builder\",\"io.netty.channel.ChannelOption$1\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseLinkedAtomicQueuePad0\",\"io.netty.buffer.PooledByteBufAllocator$PoolThreadLocalCache\",\"com.google.protobuf.Descriptors$GenericDescriptor\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ReservedRange$1\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseLinkedAtomicQueuePad1\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseLinkedAtomicQueue\",\"io.netty.util.Recycler$DefaultHandle\",\"org.nico.ratel.landlords.enums.ClientEventCode\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueMidPad\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseLinkedAtomicQueuePad2\",\"com.google.protobuf.DescriptorProtos$MethodOptions$IdempotencyLevel$1\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable\",\"io.netty.buffer.UnsafeHeapSwappedByteBuf\",\"io.netty.util.ByteProcessor$IndexOfProcessor\",\"com.google.gson.internal.Streams\",\"com.google.gson.internal.bind.TypeAdapters$12\",\"com.google.gson.internal.bind.TypeAdapters$13\",\"io.netty.util.ByteProcessor\",\"com.google.gson.internal.bind.TypeAdapters$14\",\"com.google.protobuf.DescriptorProtos$ExtensionRangeOptionsOrBuilder\",\"com.google.gson.internal.bind.TypeAdapters$15\",\"com.google.protobuf.DescriptorProtos$FileDescriptorProtoOrBuilder\",\"org.nico.ratel.landlords.entity.ServerTransferData$ServerTransferDataProtocOrBuilder\",\"com.google.gson.internal.bind.TypeAdapters$10\",\"io.netty.util.internal.shaded.org.jctools.queues.ConcurrentCircularArrayQueueL0Pad\",\"com.google.gson.internal.bind.TypeAdapters$11\",\"io.netty.channel.Channel\",\"com.google.protobuf.Reader\",\"com.google.protobuf.DescriptorProtos$FieldOptionsOrBuilder\",\"com.google.protobuf.NioByteString$1\",\"io.netty.channel.RecvByteBufAllocator$Handle\",\"com.google.gson.internal.bind.TypeAdapters$16\",\"com.google.protobuf.Descriptors$EnumValueDescriptor\",\"com.google.gson.internal.bind.TypeAdapters$17\",\"com.google.gson.internal.bind.TypeAdapters$18\",\"com.google.protobuf.DescriptorProtos$ExtensionRangeOptions\",\"com.google.gson.internal.bind.TypeAdapters$19\",\"com.google.protobuf.AbstractParser\",\"com.google.protobuf.CodedInputStream$IterableDirectByteBufferDecoder\",\"io.netty.util.internal.logging.InternalLoggerFactory\",\"com.google.protobuf.GeneratedMessageV3$Builder\",\"com.google.protobuf.Utf8$Processor\",\"com.google.gson.TypeAdapter$1\",\"com.google.protobuf.GeneratedMessageV3$ExtendableBuilder\",\"io.netty.buffer.PoolSubpageMetric\",\"io.netty.buffer.WrappedCompositeByteBuf\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueProducerLimitField\",\"io.netty.channel.ChannelPromise\",\"io.netty.util.Recycler$WeakOrderQueue\",\"com.google.protobuf.DescriptorProtos$FileOptions\",\"com.google.protobuf.MessageLite$Builder\",\"com.google.protobuf.AbstractMessageLite\",\"com.google.protobuf.DescriptorProtos$UninterpretedOptionOrBuilder\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo\",\"com.google.protobuf.NioByteString\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProtoOrBuilder\",\"com.google.protobuf.LazyFieldLite\",\"com.google.protobuf.Utf8\",\"com.google.protobuf.UnsafeUtil$Android32MemoryAccessor\",\"org.nico.ratel.landlords.utils.JsonUtils\",\"com.google.gson.annotations.SerializedName\",\"io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf$1\",\"com.google.protobuf.Parser\",\"io.netty.channel.ChannelOutboundBuffer\",\"io.netty.buffer.UnpooledDuplicatedByteBuf\",\"com.google.protobuf.Descriptors$FieldDescriptor\",\"com.google.protobuf.LazyStringList\",\"com.google.protobuf.Utf8$UnsafeProcessor\",\"com.google.protobuf.MutabilityOracle$1\",\"com.google.gson.internal.bind.SqlDateTypeAdapter$1\",\"io.netty.buffer.AbstractDerivedByteBuf\",\"io.netty.buffer.PoolChunkMetric\",\"com.google.protobuf.DescriptorProtos$MessageOptionsOrBuilder\",\"com.google.protobuf.Descriptors$FileDescriptor\",\"com.google.gson.internal.bind.ObjectTypeAdapter$1\",\"com.google.gson.JsonParseException\",\"io.netty.buffer.UnpooledSlicedByteBuf\",\"com.google.gson.internal.ConstructorConstructor\",\"io.netty.buffer.AbstractByteBufAllocator$1\",\"com.google.protobuf.WireFormat$FieldType$1\",\"com.google.protobuf.WireFormat$FieldType$2\",\"com.google.protobuf.WireFormat$FieldType$3\",\"com.google.protobuf.WireFormat$FieldType$4\",\"com.google.protobuf.Descriptors$FieldDescriptor$JavaType\",\"com.google.protobuf.DescriptorProtos$EnumOptions$Builder\",\"com.google.protobuf.AbstractMessageLite$Builder\",\"org.nico.ratel.landlords.entity.ServerTransferData\",\"com.google.protobuf.DescriptorProtos$ServiceOptions$1\",\"io.netty.buffer.ByteBuf\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.LinkedQueueAtomicNode\",\"com.google.gson.annotations.JsonAdapter\",\"com.google.gson.JsonSerializationContext\",\"com.google.gson.DefaultDateTypeAdapter\",\"io.netty.buffer.SimpleLeakAwareCompositeByteBuf\",\"com.google.protobuf.Descriptors$EnumDescriptor\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.SpscLinkedAtomicQueue\",\"com.google.protobuf.Utf8$SafeProcessor\",\"com.google.protobuf.WireFormat$JavaType\",\"io.netty.buffer.PoolThreadCache$1\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo$LocationOrBuilder\",\"com.google.protobuf.DescriptorProtos$UninterpretedOption\",\"com.google.protobuf.Descriptors$Descriptor\",\"io.netty.buffer.WrappedByteBuf\",\"io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf\",\"com.google.protobuf.CodedOutputStream$HeapNioEncoder\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ExtensionRange\",\"io.netty.channel.ChannelFuture\",\"com.google.gson.FieldNamingPolicy$4\",\"com.google.gson.FieldNamingPolicy$3\",\"com.google.protobuf.DescriptorProtos$ExtensionRangeOptions$Builder\",\"com.google.gson.FieldNamingPolicy$6\",\"com.google.gson.annotations.Since\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueL1Pad\",\"com.google.gson.FieldNamingPolicy$5\",\"io.netty.channel.ChannelConfig\",\"com.google.gson.internal.JsonReaderInternalAccess\",\"com.google.protobuf.GeneratedMessageV3\",\"com.google.protobuf.DescriptorProtos$EnumValueDescriptorProto$Builder\",\"com.google.gson.FieldNamingPolicy$2\",\"com.google.gson.FieldNamingPolicy$1\",\"io.netty.util.internal.SystemPropertyUtil$1\",\"com.google.protobuf.PrimitiveNonBoxingCollection\",\"com.google.protobuf.DescriptorProtos$MethodOptions\",\"io.netty.util.AttributeMap\",\"com.google.protobuf.DescriptorProtos$OneofDescriptorProto\",\"io.netty.util.internal.Cleaner\",\"io.netty.util.IllegalReferenceCountException\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueL1Pad\",\"io.netty.util.concurrent.ScheduledFuture\",\"io.netty.buffer.ByteBufUtil$1\",\"io.netty.buffer.ByteBufUtil$2\",\"io.netty.buffer.ByteBufHolder\",\"io.netty.buffer.CompositeByteBuf$Component\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Type$1\",\"io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$ExitCondition\",\"com.google.protobuf.LazyStringArrayList\",\"io.netty.buffer.AbstractPooledDerivedByteBuf$PooledNonRetainedDuplicateByteBuf\",\"io.netty.handler.timeout.IdleState\",\"io.netty.buffer.PoolThreadCache$SubPageMemoryRegionCache\",\"io.netty.util.internal.TypeParameterMatcher\",\"io.netty.util.internal.shaded.org.jctools.queues.ConcurrentCircularArrayQueue\",\"com.google.protobuf.InvalidProtocolBufferException\",\"com.google.protobuf.Descriptors$MethodDescriptor\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto$1\",\"io.netty.handler.timeout.IdleStateEvent\",\"io.netty.buffer.UnpooledByteBufAllocator$InstrumentedUnpooledUnsafeNoCleanerDirectByteBuf\",\"com.google.protobuf.GeneratedMessageLite$GeneratedExtension\",\"org.nico.ratel.landlords.entity.Msg\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo$Location$Builder\",\"com.google.gson.internal.JavaVersion\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseLinkedAtomicQueueProducerNodeRef\",\"io.netty.util.internal.CleanerJava6\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ReservedRangeOrBuilder\",\"com.google.protobuf.DescriptorProtos$MethodDescriptorProto$Builder\",\"com.google.protobuf.DescriptorProtos$FieldOptions$JSType\",\"com.google.protobuf.DescriptorProtos$UninterpretedOption$NamePartOrBuilder\",\"com.google.gson.internal.bind.TypeAdapters$35$1\",\"io.netty.util.ByteProcessor$1\",\"com.google.protobuf.DescriptorProtos$MessageOptions$1\",\"io.netty.util.internal.logging.InternalLogger\",\"io.netty.buffer.AbstractReferenceCountedByteBuf\",\"com.google.gson.annotations.Until\",\"com.google.protobuf.DescriptorProtos$ExtensionRangeOptions$1\",\"io.netty.buffer.UnpooledHeapByteBuf\",\"io.netty.util.concurrent.EventExecutor\",\"com.google.protobuf.DescriptorProtos$UninterpretedOption$Builder\",\"com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter\",\"com.google.gson.stream.JsonReader$1\",\"com.google.protobuf.SmallSortedMap$1\",\"com.google.gson.internal.$Gson$Types\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueueProducerNodeRef\",\"io.netty.channel.ChannelOption\",\"io.netty.util.internal.LongCounter\",\"org.nico.ratel.landlords.channel.ChannelUtils\",\"io.netty.util.ByteProcessor$4\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo$Location$1\",\"io.netty.util.ByteProcessor$3\",\"io.netty.util.internal.ThreadLocalRandom$1\",\"io.netty.util.ByteProcessor$2\",\"io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Consumer\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueConsumerIndexField\",\"com.google.gson.internal.bind.TreeTypeAdapter\",\"io.netty.channel.ChannelMetadata\",\"io.netty.util.Recycler$3\",\"io.netty.buffer.FixedCompositeByteBuf$Component\",\"com.google.protobuf.DescriptorProtos$MethodDescriptorProto$1\",\"io.netty.buffer.SimpleLeakAwareByteBuf\",\"com.google.gson.stream.JsonWriter\",\"io.netty.channel.ChannelOutboundBuffer$1\",\"com.google.gson.internal.bind.ArrayTypeAdapter$1\",\"io.netty.util.Recycler$1\",\"io.netty.util.Recycler$2\",\"com.google.protobuf.MapEntryLite$Metadata\",\"io.netty.util.Attribute\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueL2Pad\",\"com.google.protobuf.Descriptors$FileDescriptor$InternalDescriptorAssigner\",\"com.google.protobuf.UnsafeUtil$JvmMemoryAccessor\",\"com.google.protobuf.DescriptorProtos$FieldOptions$CType$1\",\"io.netty.buffer.PoolThreadCache$MemoryRegionCache$1\",\"io.netty.util.ReferenceCounted\",\"org.nico.ratel.landlords.client.entity.User\",\"io.netty.buffer.PooledDuplicatedByteBuf$1\",\"com.google.protobuf.DescriptorProtos$EnumOptions\",\"io.netty.buffer.AbstractPooledDerivedByteBuf\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueConsumerIndexField\",\"com.google.gson.stream.JsonToken\",\"io.netty.util.internal.shaded.org.jctools.util.UnsafeRefArrayAccess\",\"com.google.protobuf.DescriptorProtos$FieldOptions\",\"io.netty.handler.codec.http.websocketx.TextWebSocketFrame\",\"io.netty.buffer.PooledHeapByteBuf\",\"io.netty.buffer.UnpooledByteBufAllocator$InstrumentedUnpooledUnsafeHeapByteBuf\",\"io.netty.util.ResourceLeakDetectorFactory\",\"com.google.gson.LongSerializationPolicy$1\",\"com.google.gson.LongSerializationPolicy$2\",\"io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf\",\"com.google.protobuf.CodedOutputStream$UnsafeDirectNioEncoder\",\"com.google.gson.internal.bind.JsonTreeReader$1\",\"io.netty.buffer.ByteBufAllocatorMetricProvider\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfoOrBuilder\",\"io.netty.buffer.UnreleasableByteBuf\",\"io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf$1\",\"io.netty.channel.ChannelId\",\"io.netty.buffer.CompositeByteBuf$ComponentList\",\"com.google.protobuf.AbstractMessage$Builder\",\"io.netty.util.AbstractConstant\",\"com.google.protobuf.CodedOutputStream$ArrayEncoder\",\"io.netty.buffer.ReadOnlyByteBufferBuf\",\"io.netty.channel.MessageSizeEstimator\",\"com.google.protobuf.SmallSortedMap$EmptySet\",\"io.netty.util.internal.PlatformDependent\",\"com.google.protobuf.DescriptorProtos$ServiceDescriptorProto$1\",\"org.nico.ratel.landlords.client.event.ClientEventListener\",\"com.google.gson.Gson\",\"com.google.protobuf.LazyField\",\"com.google.protobuf.UnknownFieldSet$Parser\",\"com.google.protobuf.AbstractProtobufList\",\"io.netty.util.concurrent.OrderedEventExecutor\",\"com.google.protobuf.DescriptorProtos$MethodOptions$IdempotencyLevel\",\"com.google.protobuf.ByteOutput\",\"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory\",\"com.google.protobuf.Internal$EnumLiteMap\",\"io.netty.buffer.HeapByteBufUtil\",\"io.netty.channel.ChannelHandlerAdapter\",\"com.google.protobuf.DescriptorProtos$FieldOptions$JSType$1\",\"io.netty.channel.EventLoop\",\"io.netty.buffer.PoolArenaMetric\",\"io.netty.buffer.UnpooledUnsafeNoCleanerDirectByteBuf\",\"io.netty.buffer.PooledDirectByteBuf$1\",\"com.google.protobuf.ByteString\",\"com.google.gson.internal.Excluder$1\",\"com.google.gson.internal.bind.TypeAdapters$2\",\"io.netty.buffer.PoolThreadCache\",\"com.google.protobuf.Internal$EnumLite\",\"com.google.gson.internal.bind.TypeAdapters$1\",\"io.netty.buffer.PooledUnsafeHeapByteBuf\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueL3Pad\",\"com.google.protobuf.CodedOutputStream$OutOfSpaceException\",\"com.google.protobuf.SmallSortedMap\",\"com.google.gson.internal.bind.TypeAdapters$8\",\"com.google.gson.internal.bind.TypeAdapters$7\",\"com.google.gson.internal.bind.TypeAdapters$9\",\"com.google.gson.internal.bind.TypeAdapters$4\",\"com.google.gson.internal.bind.TypeAdapters$3\",\"com.google.gson.internal.bind.TypeAdapters$6\",\"com.google.gson.internal.bind.TypeAdapters$5\",\"io.netty.util.AsciiString$2\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueL3Pad\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue\",\"com.google.protobuf.ByteString$2\",\"io.netty.buffer.PooledByteBufAllocatorMetric\",\"io.netty.util.AsciiString$1\",\"com.google.protobuf.DescriptorProtos$ServiceOptions$Builder\",\"io.netty.buffer.PooledUnsafeDirectByteBuf\",\"com.google.gson.internal.bind.CollectionTypeAdapterFactory\",\"com.google.protobuf.ByteString$ByteIterator\",\"com.google.gson.internal.reflect.PreJava9ReflectionAccessor\",\"com.google.gson.internal.Streams$AppendableWriter\",\"io.netty.util.ResourceLeakTracker\",\"com.google.protobuf.ExtensionRegistry$ExtensionInfo\",\"io.netty.channel.ChannelProgressivePromise\",\"com.google.protobuf.UnknownFieldSet\",\"com.google.protobuf.ByteString$LiteralByteString\",\"com.google.protobuf.InvalidProtocolBufferException$InvalidWireTypeException\",\"com.google.protobuf.AbstractMessage\",\"com.google.gson.JsonSyntaxException\",\"com.google.protobuf.Extension$MessageType\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProto$EnumReservedRange$Builder\",\"com.google.protobuf.WireFormat$Utf8Validation\",\"io.netty.util.concurrent.GenericFutureListener\",\"com.google.protobuf.Utf8$UnpairedSurrogateException\",\"org.nico.ratel.landlords.print.SimplePrinter\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProto$1\",\"com.google.protobuf.Internal$LongList\",\"com.google.protobuf.MapField$Converter\",\"com.google.protobuf.MapField\",\"io.netty.util.ByteProcessor$IndexNotOfProcessor\",\"io.netty.util.AttributeKey\",\"com.google.protobuf.Internal\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseLinkedAtomicQueueConsumerNodeRef\",\"com.google.gson.reflect.TypeToken\",\"io.netty.buffer.PooledSlicedByteBuf$1\",\"com.google.protobuf.DescriptorProtos$DescriptorProto\",\"io.netty.util.Recycler$WeakOrderQueue$Head\",\"com.google.protobuf.DescriptorProtos$MethodOptions$1\",\"io.netty.channel.ChannelInboundHandler\",\"com.google.protobuf.Message$Builder\",\"com.google.protobuf.MapEntry$Metadata\",\"io.netty.util.ResourceLeakDetector$Record\",\"com.google.gson.TypeAdapter\",\"com.google.protobuf.DescriptorProtos$FieldOptions$1\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueProducerIndexField\",\"com.google.protobuf.DescriptorProtos$ServiceDescriptorProto$Builder\",\"io.netty.buffer.UnsafeByteBufUtil\",\"com.google.gson.internal.bind.SqlDateTypeAdapter\",\"com.google.protobuf.UnsafeUtil$Android64MemoryAccessor\",\"com.google.protobuf.DescriptorProtos$EnumValueOptions\",\"io.netty.buffer.PoolArena$HeapArena\",\"com.google.protobuf.DescriptorProtos$ServiceOptions\",\"io.netty.buffer.PooledDirectByteBuf\",\"io.netty.buffer.AbstractUnsafeSwappedByteBuf\",\"io.netty.util.internal.logging.Slf4JLoggerFactory\",\"com.google.protobuf.CodedInputStream$StreamDecoder\",\"com.google.protobuf.DescriptorProtos$MethodOptionsOrBuilder\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueMidPad\",\"io.netty.buffer.UnpooledByteBufAllocator$InstrumentedUnpooledUnsafeDirectByteBuf\",\"com.google.protobuf.ByteString$CodedBuilder\",\"io.netty.util.Recycler\",\"com.google.protobuf.Descriptors$FieldDescriptor$Type\",\"com.google.protobuf.CodedOutputStream$SafeDirectNioEncoder\",\"io.netty.util.AttributeKey$1\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ExtensionRange$1\",\"com.google.protobuf.DescriptorProtos$OneofDescriptorProto$1\",\"io.netty.util.internal.shaded.org.jctools.util.Pow2\",\"org.nico.ratel.landlords.entity.ServerTransferData$ServerTransferDataProtoc$Builder\",\"io.netty.buffer.UnpooledDirectByteBuf\",\"io.netty.buffer.UnpooledByteBufAllocator$UnpooledByteBufAllocatorMetric\",\"com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter\",\"com.google.protobuf.MutabilityOracle\",\"com.google.protobuf.CodedOutputStream$ByteOutputEncoder\",\"io.netty.buffer.UnpooledByteBufAllocator\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicReferenceArrayQueue\",\"com.google.protobuf.RepeatedFieldBuilderV3\",\"io.netty.util.ResourceLeakDetector$Level\",\"io.netty.util.concurrent.ProgressiveFuture\",\"io.netty.buffer.UnpooledByteBufAllocator$InstrumentedUnpooledHeapByteBuf\",\"org.nico.ratel.landlords.enums.ServerEventCode\",\"com.google.gson.stream.JsonReader\",\"com.google.protobuf.Extension\",\"com.google.gson.FieldAttributes\",\"io.netty.channel.MessageSizeEstimator$Handle\",\"io.netty.util.internal.shaded.org.jctools.queues.CircularArrayOffsetCalculator\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ExtensionRange$Builder\",\"com.google.gson.internal.bind.MapTypeAdapterFactory\",\"io.netty.util.internal.EmptyArrays\",\"io.netty.util.internal.TypeParameterMatcher$ReflectiveMatcher\",\"io.netty.buffer.PooledUnsafeDirectByteBuf$1\",\"com.google.protobuf.WireFormat$Utf8Validation$1\",\"com.google.protobuf.WireFormat$Utf8Validation$2\",\"com.google.protobuf.FieldSet\",\"com.google.protobuf.WireFormat$Utf8Validation$3\",\"com.google.protobuf.WireFormat\",\"com.google.protobuf.DescriptorProtos$OneofOptions\",\"io.netty.util.concurrent.Promise\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProto$EnumReservedRange\",\"com.google.gson.internal.Primitives\",\"io.netty.buffer.ByteBufAllocatorMetric\",\"com.google.gson.stream.MalformedJsonException\",\"com.google.gson.internal.bind.ArrayTypeAdapter\",\"io.netty.buffer.PooledUnsafeHeapByteBuf$1\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueueConsumerNodeRef\",\"com.google.gson.internal.bind.DateTypeAdapter$1\",\"io.netty.buffer.PoolArena$DirectArena\",\"io.netty.buffer.ReadOnlyUnsafeDirectByteBuf\",\"io.netty.util.internal.PlatformDependent$ThreadLocalRandomProvider\",\"io.netty.util.internal.shaded.org.jctools.util.UnsafeAccess\",\"com.google.protobuf.FieldSet$Builder\",\"io.netty.buffer.AdvancedLeakAwareCompositeByteBuf\",\"io.netty.util.internal.shaded.org.jctools.queues.IndexedQueueSizeUtil$IndexedQueue\",\"org.nico.ratel.landlords.entity.ServerTransferData$ServerTransferDataProtoc$1\",\"com.google.protobuf.MapEntry\",\"com.google.protobuf.DescriptorProtos$FileDescriptorProto$Builder\",\"io.netty.util.ConstantPool\",\"com.google.protobuf.ProtocolStringList\",\"com.google.protobuf.Descriptors$DescriptorPool$DescriptorIntPair\",\"com.google.gson.internal.bind.DateTypeAdapter\",\"com.google.protobuf.GeneratedMessage$ExtensionDescriptorRetriever\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProto$EnumReservedRange$1\",\"com.google.protobuf.GeneratedMessageV3$UnusedPrivateParameter\",\"com.google.gson.internal.bind.TypeAdapters$26$1\",\"io.netty.buffer.UnpooledUnsafeHeapByteBuf\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueue\",\"com.google.protobuf.DescriptorProtos$UninterpretedOption$NamePart$1\",\"com.google.protobuf.DescriptorProtos$EnumValueOptions$Builder\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProto$EnumReservedRangeOrBuilder\",\"io.netty.util.internal.ObjectUtil\",\"com.google.protobuf.DescriptorProtos$FieldOptions$CType\",\"com.google.gson.internal.reflect.ReflectionAccessor\",\"com.google.protobuf.DescriptorProtos$EnumOptions$1\",\"io.netty.buffer.AbstractByteBuf\",\"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField\",\"io.netty.buffer.UnpooledUnsafeDirectByteBuf\",\"io.netty.buffer.PoolArena\",\"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1\",\"io.netty.util.AsciiString$CharEqualityComparator\",\"io.netty.util.internal.logging.InternalLogLevel\",\"io.netty.util.ResourceLeakDetector\",\"com.google.protobuf.IterableByteBufferInputStream\",\"com.google.protobuf.DescriptorProtos$FileDescriptorProto\",\"com.google.protobuf.DescriptorProtos$EnumValueDescriptorProto\",\"io.netty.buffer.CompositeByteBuf\",\"com.google.protobuf.UninitializedMessageException\",\"com.google.gson.internal.bind.JsonTreeReader\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProtoOrBuilder\",\"io.netty.buffer.PooledHeapByteBuf$1\",\"org.nico.ratel.landlords.entity.ServerTransferData$ServerTransferDataProtoc\",\"io.netty.channel.ChannelOutboundInvoker\",\"io.netty.buffer.PoolChunk\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo$1\",\"com.google.protobuf.GeneratedMessageV3$BuilderParent\",\"com.google.protobuf.DescriptorProtos$FileOptions$Builder\",\"io.netty.channel.ChannelOutboundBuffer$Entry\",\"com.google.gson.internal.LazilyParsedNumber\",\"com.google.protobuf.DescriptorProtos$EnumValueOptionsOrBuilder\",\"com.google.protobuf.MapEntry$Builder\",\"com.google.protobuf.MessageReflection$MergeTarget$ContainerType\",\"io.netty.channel.WriteBufferWaterMark\",\"com.google.protobuf.Internal$DoubleList\",\"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable$OneofAccessor\",\"com.google.protobuf.Descriptors\",\"io.netty.util.Recycler$Stack\",\"io.netty.buffer.CompositeByteBuf$CompositeByteBufIterator\",\"org.nico.ratel.landlords.client.handler.WebsocketTransferHandler\",\"com.google.protobuf.DescriptorProtos$FileOptionsOrBuilder\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProto$Builder\",\"com.google.protobuf.DescriptorProtos$FileOptions$OptimizeMode\",\"com.google.gson.JsonElement\",\"com.google.protobuf.Descriptors$DescriptorPool$PackageDescriptor\",\"io.netty.util.internal.logging.Slf4JLogger\",\"com.google.protobuf.ByteString$ByteArrayCopier\",\"io.netty.util.concurrent.FastThreadLocal\",\"com.google.protobuf.DescriptorProtos$EnumValueDescriptorProto$1\",\"io.netty.util.internal.OutOfDirectMemoryError\",\"com.google.protobuf.CodedOutputStream\",\"io.netty.util.internal.IntegerHolder\",\"com.google.protobuf.Internal$ProtobufList\",\"io.netty.handler.codec.http.websocketx.WebSocketFrame\",\"io.netty.buffer.PoolThreadCache$MemoryRegionCache\",\"io.netty.util.concurrent.EventExecutorGroup\",\"io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$WaitStrategy\",\"io.netty.channel.ChannelInboundInvoker\",\"io.netty.util.internal.SystemPropertyUtil\",\"com.google.protobuf.DescriptorProtos$FileOptions$1\",\"com.google.protobuf.Descriptors$FileDescriptor$Syntax\",\"io.netty.buffer.ByteBufUtil\",\"io.netty.buffer.PoolChunkListMetric\",\"com.google.protobuf.ArrayDecoders$Registers\",\"com.google.protobuf.Message\",\"io.netty.channel.ChannelHandler\",\"com.google.protobuf.ByteString$ArraysByteArrayCopier\",\"com.google.protobuf.GeneratedMessageV3$ExtendableMessageOrBuilder\",\"org.nico.ratel.landlords.entity.ServerTransferData$1\");\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/handler/WebsocketTransferHandler_ESTest_scaffolding.java",
        "class": "WebsocketTransferHandler_ESTest_scaffolding",
        "name": "initMocksToAvoidTimeoutsInTheTests",
        "return_type": "void",
        "modifiers": "private static",
        "parameters": [],
        "raw": "private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException {\n  mock(Class.forName(\"io.netty.channel.ChannelHandlerContext\",false,WebsocketTransferHandler_ESTest_scaffolding.class.getClassLoader()));\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/handler/WebsocketTransferHandler_ESTest_scaffolding.java",
        "class": "WebsocketTransferHandler_ESTest_scaffolding",
        "name": "resetClasses",
        "return_type": "void",
        "modifiers": "private static",
        "parameters": [],
        "raw": "private static void resetClasses(){\n  org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(WebsocketTransferHandler_ESTest_scaffolding.class.getClassLoader());\n  org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\"io.netty.channel.ChannelHandlerAdapter\",\"io.netty.channel.ChannelInboundHandlerAdapter\",\"io.netty.channel.SimpleChannelInboundHandler\",\"org.nico.ratel.landlords.client.handler.WebsocketTransferHandler\",\"com.google.gson.reflect.TypeToken\",\"com.google.gson.internal.$Gson$Preconditions\",\"com.google.gson.internal.$Gson$Types\",\"com.google.gson.Gson\",\"com.google.gson.internal.Excluder\",\"com.google.gson.FieldNamingPolicy\",\"com.google.gson.LongSerializationPolicy\",\"com.google.gson.internal.ConstructorConstructor\",\"com.google.gson.internal.JavaVersion\",\"com.google.gson.internal.reflect.PreJava9ReflectionAccessor\",\"com.google.gson.internal.reflect.ReflectionAccessor\",\"com.google.gson.TypeAdapter\",\"com.google.gson.internal.bind.TypeAdapters$1\",\"com.google.gson.TypeAdapter$1\",\"com.google.gson.internal.bind.TypeAdapters$32\",\"com.google.gson.internal.bind.TypeAdapters$2\",\"com.google.gson.internal.bind.TypeAdapters$3\",\"com.google.gson.internal.bind.TypeAdapters$4\",\"com.google.gson.internal.bind.TypeAdapters$33\",\"com.google.gson.internal.bind.TypeAdapters$5\",\"com.google.gson.internal.bind.TypeAdapters$6\",\"com.google.gson.internal.bind.TypeAdapters$7\",\"com.google.gson.internal.bind.TypeAdapters$8\",\"com.google.gson.internal.bind.TypeAdapters$9\",\"com.google.gson.internal.bind.TypeAdapters$10\",\"com.google.gson.internal.bind.TypeAdapters$11\",\"com.google.gson.internal.bind.TypeAdapters$12\",\"com.google.gson.internal.bind.TypeAdapters$13\",\"com.google.gson.internal.bind.TypeAdapters$14\",\"com.google.gson.internal.bind.TypeAdapters$15\",\"com.google.gson.internal.bind.TypeAdapters$16\",\"com.google.gson.internal.bind.TypeAdapters$17\",\"com.google.gson.internal.bind.TypeAdapters$18\",\"com.google.gson.internal.bind.TypeAdapters$19\",\"com.google.gson.internal.bind.TypeAdapters$20\",\"com.google.gson.internal.bind.TypeAdapters$21\",\"com.google.gson.internal.bind.TypeAdapters$22\",\"com.google.gson.internal.bind.TypeAdapters$23\",\"com.google.gson.internal.bind.TypeAdapters$35\",\"com.google.gson.internal.bind.TypeAdapters$24\",\"com.google.gson.internal.bind.TypeAdapters$25\",\"com.google.gson.internal.bind.TypeAdapters$26\",\"com.google.gson.internal.bind.TypeAdapters$27\",\"com.google.gson.internal.bind.TypeAdapters$34\",\"com.google.gson.internal.bind.TypeAdapters$28\",\"com.google.gson.internal.bind.TypeAdapters$29\",\"com.google.gson.internal.bind.TypeAdapters$30\",\"com.google.gson.internal.bind.TypeAdapters\",\"com.google.gson.internal.bind.ObjectTypeAdapter$1\",\"com.google.gson.internal.bind.ObjectTypeAdapter\",\"com.google.gson.Gson$1\",\"com.google.gson.Gson$2\",\"com.google.gson.Gson$4\",\"com.google.gson.Gson$5\",\"com.google.gson.internal.bind.DateTypeAdapter$1\",\"com.google.gson.internal.bind.DateTypeAdapter\",\"com.google.gson.internal.bind.TimeTypeAdapter$1\",\"com.google.gson.internal.bind.TimeTypeAdapter\",\"com.google.gson.internal.bind.SqlDateTypeAdapter$1\",\"com.google.gson.internal.bind.SqlDateTypeAdapter\",\"com.google.gson.internal.bind.ArrayTypeAdapter$1\",\"com.google.gson.internal.bind.ArrayTypeAdapter\",\"com.google.gson.internal.bind.CollectionTypeAdapterFactory\",\"com.google.gson.internal.bind.MapTypeAdapterFactory\",\"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory\",\"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory\",\"org.nico.ratel.landlords.utils.JsonUtils\",\"org.nico.ratel.landlords.enums.ClientEventCode\",\"org.nico.ratel.landlords.client.entity.User\",\"org.nico.ratel.landlords.client.event.ClientEventListener\",\"io.netty.handler.timeout.IdleState\",\"org.nico.ratel.landlords.enums.ServerEventCode\",\"com.google.protobuf.AbstractMessageLite\",\"com.google.protobuf.AbstractMessage\",\"com.google.protobuf.GeneratedMessageV3\",\"com.google.protobuf.ExtensionRegistryLite\",\"com.google.protobuf.ExtensionRegistry\",\"com.google.protobuf.ExtensionRegistryFactory\",\"com.google.protobuf.AbstractParser\",\"com.google.protobuf.UnknownFieldSet$Parser\",\"com.google.protobuf.UnknownFieldSet\",\"org.nico.ratel.landlords.entity.ServerTransferData$ServerTransferDataProtoc$1\",\"org.nico.ratel.landlords.entity.ServerTransferData$ServerTransferDataProtoc\",\"io.netty.util.internal.TypeParameterMatcher$1\",\"io.netty.util.internal.TypeParameterMatcher\",\"io.netty.util.internal.UnpaddedInternalThreadLocalMap\",\"io.netty.util.internal.logging.InternalLoggerFactory\",\"io.netty.util.internal.logging.Slf4JLoggerFactory\",\"io.netty.util.internal.logging.AbstractInternalLogger\",\"io.netty.util.internal.logging.Slf4JLogger\",\"io.netty.util.internal.SystemPropertyUtil\",\"io.netty.util.internal.SystemPropertyUtil$1\",\"io.netty.util.internal.InternalThreadLocalMap\",\"io.netty.util.internal.TypeParameterMatcher$ReflectiveMatcher\",\"io.netty.buffer.DefaultByteBufHolder\",\"io.netty.handler.codec.http.websocketx.WebSocketFrame\",\"io.netty.handler.codec.http.websocketx.TextWebSocketFrame\",\"io.netty.util.CharsetUtil\",\"io.netty.util.ResourceLeakDetector$Level\",\"io.netty.util.internal.EmptyArrays\",\"io.netty.util.ResourceLeakDetector\",\"io.netty.buffer.AbstractByteBufAllocator\",\"io.netty.util.internal.PlatformDependent0$1\",\"io.netty.util.internal.ReflectionUtil\",\"io.netty.util.internal.PlatformDependent0$2\",\"io.netty.util.internal.PlatformDependent0$3\",\"io.netty.util.internal.PlatformDependent0$4\",\"io.netty.util.internal.PlatformDependent0$5\",\"io.netty.util.internal.PlatformDependent0$10\",\"io.netty.util.internal.PlatformDependent0\",\"io.netty.util.internal.PlatformDependent$1\",\"io.netty.util.internal.PlatformDependent$2\",\"io.netty.util.internal.CleanerJava6\",\"io.netty.util.internal.PlatformDependent\",\"io.netty.buffer.ByteBuf\",\"io.netty.buffer.EmptyByteBuf\",\"io.netty.util.internal.StringUtil\",\"io.netty.util.internal.ObjectUtil\",\"io.netty.buffer.UnpooledByteBufAllocator$UnpooledByteBufAllocatorMetric\",\"io.netty.util.internal.LongAdderCounter\",\"io.netty.buffer.UnpooledByteBufAllocator\",\"io.netty.buffer.Unpooled\",\"io.netty.util.concurrent.FastThreadLocal\",\"io.netty.buffer.ByteBufUtil$1\",\"io.netty.util.NettyRuntime$AvailableProcessorsHolder\",\"io.netty.util.NettyRuntime\",\"io.netty.buffer.PooledByteBufAllocator$PoolThreadLocalCache\",\"io.netty.buffer.PoolArena\",\"io.netty.buffer.PoolArena$DirectArena\",\"io.netty.buffer.PoolSubpage\",\"io.netty.buffer.PoolChunkList\",\"io.netty.buffer.PooledByteBufAllocatorMetric\",\"io.netty.buffer.PooledByteBufAllocator\",\"io.netty.buffer.ByteBufUtil$2\",\"io.netty.buffer.ByteBufUtil\",\"io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory\",\"io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory$1\",\"io.netty.util.ResourceLeakDetectorFactory\",\"io.netty.buffer.AbstractByteBuf\",\"io.netty.buffer.AbstractReferenceCountedByteBuf\",\"io.netty.buffer.UnpooledHeapByteBuf\",\"io.netty.buffer.UnpooledUnsafeHeapByteBuf\",\"io.netty.buffer.UnpooledByteBufAllocator$InstrumentedUnpooledUnsafeHeapByteBuf\",\"io.netty.util.internal.MathUtil\",\"io.netty.buffer.AbstractDerivedByteBuf\",\"io.netty.buffer.DuplicatedByteBuf\",\"io.netty.buffer.UnpooledDuplicatedByteBuf\",\"io.netty.util.concurrent.FastThreadLocalThread\",\"com.google.gson.internal.JsonReaderInternalAccess\",\"com.google.gson.stream.JsonReader$1\",\"com.google.gson.stream.JsonReader\",\"com.google.gson.stream.JsonToken\",\"com.google.gson.Gson$FutureTypeAdapter\",\"com.google.gson.internal.ConstructorConstructor$3\",\"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter\",\"com.google.gson.internal.Primitives\",\"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField\",\"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1\",\"org.nico.ratel.landlords.entity.Msg\",\"com.google.gson.JsonParseException\",\"com.google.gson.JsonSyntaxException\",\"io.netty.handler.timeout.IdleStateEvent\",\"io.netty.buffer.CompositeByteBuf\",\"io.netty.buffer.UnpooledDirectByteBuf\",\"io.netty.buffer.CompositeByteBuf$ComponentList\",\"io.netty.buffer.PoolThreadCache\",\"io.netty.buffer.PoolArena$SizeClass\",\"io.netty.util.Recycler$1\",\"io.netty.util.Recycler$3\",\"io.netty.util.Recycler\",\"io.netty.buffer.PoolThreadCache$MemoryRegionCache$1\",\"io.netty.util.Recycler$2\",\"io.netty.buffer.PoolThreadCache$MemoryRegionCache\",\"io.netty.buffer.PoolThreadCache$SubPageMemoryRegionCache\",\"io.netty.util.internal.shaded.org.jctools.queues.ConcurrentCircularArrayQueueL0Pad\",\"io.netty.util.internal.shaded.org.jctools.queues.ConcurrentCircularArrayQueue\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueL1Pad\",\"io.netty.util.internal.shaded.org.jctools.util.UnsafeAccess\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueProducerIndexField\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueMidPad\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueProducerLimitField\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueL2Pad\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueConsumerIndexField\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueL3Pad\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueue\",\"io.netty.util.internal.shaded.org.jctools.util.Pow2\",\"io.netty.util.internal.shaded.org.jctools.queues.CircularArrayOffsetCalculator\",\"io.netty.buffer.PoolThreadCache$NormalMemoryRegionCache\",\"io.netty.buffer.AbstractByteBufAllocator$1\",\"io.netty.buffer.HeapByteBufUtil\",\"io.netty.buffer.PooledByteBuf\",\"io.netty.buffer.PooledUnsafeDirectByteBuf$1\",\"io.netty.buffer.PooledUnsafeDirectByteBuf\",\"io.netty.util.Recycler$Stack\",\"io.netty.util.Recycler$DefaultHandle\",\"io.netty.util.internal.shaded.org.jctools.util.UnsafeRefArrayAccess\",\"io.netty.buffer.PoolChunk\",\"io.netty.buffer.CompositeByteBuf$Component\",\"io.netty.buffer.AbstractUnpooledSlicedByteBuf\",\"io.netty.buffer.UnpooledSlicedByteBuf\",\"io.netty.buffer.UnsafeByteBufUtil\",\"io.netty.buffer.PoolThreadCache$1\",\"io.netty.buffer.PoolThreadCache$MemoryRegionCache$Entry\",\"io.netty.util.ReferenceCountUtil\",\"io.netty.buffer.UnpooledUnsafeDirectByteBuf\",\"io.netty.buffer.ByteBufAllocator\",\"org.nico.ratel.landlords.print.SimplePrinter\",\"io.netty.util.IllegalReferenceCountException\",\"io.netty.buffer.UnpooledByteBufAllocator$InstrumentedUnpooledUnsafeDirectByteBuf\",\"org.nico.ratel.landlords.channel.ChannelUtils\",\"io.netty.buffer.ReadOnlyByteBuf\",\"io.netty.buffer.UnpooledUnsafeNoCleanerDirectByteBuf\",\"io.netty.buffer.UnpooledByteBufAllocator$InstrumentedUnpooledUnsafeNoCleanerDirectByteBuf\",\"com.google.protobuf.AbstractMessageLite$Builder\",\"com.google.protobuf.AbstractMessage$Builder\",\"com.google.protobuf.GeneratedMessageV3$Builder\",\"org.nico.ratel.landlords.entity.ServerTransferData$ServerTransferDataProtoc$Builder\",\"com.google.gson.internal.Streams\",\"com.google.gson.stream.JsonWriter\",\"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper\",\"io.netty.buffer.AbstractPooledDerivedByteBuf\",\"io.netty.buffer.PooledDuplicatedByteBuf$1\",\"io.netty.buffer.PooledDuplicatedByteBuf\",\"io.netty.buffer.PoolArena$HeapArena\",\"io.netty.util.ByteProcessor$IndexOfProcessor\",\"io.netty.util.ByteProcessor$IndexNotOfProcessor\",\"io.netty.util.ByteProcessor$1\",\"io.netty.util.ByteProcessor$2\",\"io.netty.util.ByteProcessor$3\",\"io.netty.util.ByteProcessor$4\",\"io.netty.util.ByteProcessor\");\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/handler/ProtobufTransferHandler_ESTest_scaffolding.java",
        "class": "ProtobufTransferHandler_ESTest_scaffolding",
        "name": "initEvoSuiteFramework",
        "return_type": "void",
        "modifiers": "@BeforeClass public static",
        "parameters": [],
        "raw": "@BeforeClass public static void initEvoSuiteFramework(){\n  org.evosuite.runtime.RuntimeSettings.className\u003d\"org.nico.ratel.landlords.client.handler.ProtobufTransferHandler\";\n  org.evosuite.runtime.GuiSupport.initialize();\n  org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads\u003d100;\n  org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop\u003d10000;\n  org.evosuite.runtime.RuntimeSettings.mockSystemIn\u003dtrue;\n  org.evosuite.runtime.RuntimeSettings.sandboxMode\u003dorg.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED;\n  org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT();\n  org.evosuite.runtime.classhandling.JDKClassResetter.init();\n  setSystemProperties();\n  initializeClasses();\n  org.evosuite.runtime.Runtime.getInstance().resetRuntime();\n  try {\n    initMocksToAvoidTimeoutsInTheTests();\n  }\n catch (  ClassNotFoundException e) {\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/handler/ProtobufTransferHandler_ESTest_scaffolding.java",
        "class": "ProtobufTransferHandler_ESTest_scaffolding",
        "name": "clearEvoSuiteFramework",
        "return_type": "void",
        "modifiers": "@AfterClass public static",
        "parameters": [],
        "raw": "@AfterClass public static void clearEvoSuiteFramework(){\n  Sandbox.resetDefaultSecurityManager();\n  java.lang.System.setProperties((java.util.Properties)defaultProperties.clone());\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/handler/ProtobufTransferHandler_ESTest_scaffolding.java",
        "class": "ProtobufTransferHandler_ESTest_scaffolding",
        "name": "initTestCase",
        "return_type": "void",
        "modifiers": "@Before public",
        "parameters": [],
        "raw": "@Before public void initTestCase(){\n  threadStopper.storeCurrentThreads();\n  threadStopper.startRecordingTime();\n  org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler();\n  org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode();\n  setSystemProperties();\n  org.evosuite.runtime.GuiSupport.setHeadless();\n  org.evosuite.runtime.Runtime.getInstance().resetRuntime();\n  org.evosuite.runtime.agent.InstrumentingAgent.activate();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/handler/ProtobufTransferHandler_ESTest_scaffolding.java",
        "class": "ProtobufTransferHandler_ESTest_scaffolding",
        "name": "doneWithTestCase",
        "return_type": "void",
        "modifiers": "@After public",
        "parameters": [],
        "raw": "@After public void doneWithTestCase(){\n  threadStopper.killAndJoinClientThreads();\n  org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks();\n  org.evosuite.runtime.classhandling.JDKClassResetter.reset();\n  resetClasses();\n  org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode();\n  org.evosuite.runtime.agent.InstrumentingAgent.deactivate();\n  org.evosuite.runtime.GuiSupport.restoreHeadlessMode();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/handler/ProtobufTransferHandler_ESTest_scaffolding.java",
        "class": "ProtobufTransferHandler_ESTest_scaffolding",
        "name": "setSystemProperties",
        "return_type": "void",
        "modifiers": "public static",
        "parameters": [],
        "raw": "public static void setSystemProperties(){\n  java.lang.System.setProperties((java.util.Properties)defaultProperties.clone());\n  java.lang.System.setProperty(\"file.encoding\",\"UTF-8\");\n  java.lang.System.setProperty(\"java.awt.headless\",\"true\");\n  java.lang.System.setProperty(\"java.io.tmpdir\",\"/tmp\");\n  java.lang.System.setProperty(\"user.country\",\"US\");\n  java.lang.System.setProperty(\"user.dir\",\"/home/lvdthieu/code-gen/ratel/landlords-client\");\n  java.lang.System.setProperty(\"user.home\",\"/home/lvdthieu\");\n  java.lang.System.setProperty(\"user.language\",\"en\");\n  java.lang.System.setProperty(\"user.name\",\"lvdthieu\");\n  java.lang.System.setProperty(\"user.timezone\",\"Asia/Ho_Chi_Minh\");\n  java.lang.System.setProperty(\"sun.arch.data.model\",\"64\");\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/handler/ProtobufTransferHandler_ESTest_scaffolding.java",
        "class": "ProtobufTransferHandler_ESTest_scaffolding",
        "name": "initializeClasses",
        "return_type": "void",
        "modifiers": "private static",
        "parameters": [],
        "raw": "private static void initializeClasses(){\n  org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ProtobufTransferHandler_ESTest_scaffolding.class.getClassLoader(),\"com.google.gson.internal.bind.TimeTypeAdapter$1\",\"org.nico.noson.handler.reversal.ReversalHandlerQueue\",\"io.netty.channel.ChannelInboundHandlerAdapter\",\"io.netty.util.internal.PlatformDependent0\",\"com.google.protobuf.CodedInputStream$UnsafeDirectNioDecoder\",\"com.google.gson.JsonDeserializationContext\",\"com.google.protobuf.Api\",\"io.netty.util.internal.ThreadLocalRandom\",\"com.google.protobuf.DescriptorProtos$EnumOptionsOrBuilder\",\"com.google.protobuf.ByteString$LeafByteString\",\"io.netty.channel.ChannelOutboundBuffer$MessageProcessor\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable$SingularStringFieldAccessor\",\"com.google.protobuf.GeneratedMessageV3$ExtensionDescriptorRetriever\",\"com.google.gson.internal.Excluder\",\"com.google.protobuf.SourceContext$1\",\"com.google.protobuf.Any\",\"io.netty.buffer.PoolThreadCache$MemoryRegionCache$Entry\",\"com.google.protobuf.Descriptors$DescriptorPool$SearchFilter\",\"io.netty.util.internal.PlatformDependent$1\",\"io.netty.util.internal.PlatformDependent$2\",\"com.google.protobuf.DescriptorProtos$EnumValueOptions$1\",\"io.netty.util.internal.shaded.org.jctools.queues.LinkedQueueNode\",\"io.netty.buffer.FixedCompositeByteBuf\",\"io.netty.util.internal.logging.AbstractInternalLogger\",\"com.google.protobuf.TextFormat$ParseException\",\"com.google.protobuf.GeneratedMessageV3$1\",\"io.netty.util.internal.LongAdderCounter\",\"io.netty.buffer.PoolArena$SizeClass\",\"com.google.protobuf.ValueOrBuilder\",\"com.google.protobuf.MapEntryLite\",\"com.google.protobuf.TypeRegistry$Builder\",\"com.google.protobuf.Descriptors$DescriptorPool\",\"io.netty.util.internal.UnpaddedInternalThreadLocalMap\",\"com.google.protobuf.Internal$BooleanList\",\"io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory\",\"io.netty.util.ResourceLeakDetector$LeakEntry\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable$FieldAccessor\",\"com.google.protobuf.Field$Builder\",\"com.google.gson.internal.ObjectConstructor\",\"com.google.protobuf.Writer\",\"io.netty.util.HashingStrategy$1\",\"com.google.protobuf.TextFormat$TextGenerator\",\"com.google.protobuf.DescriptorProtos$OneofDescriptorProtoOrBuilder\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable$MapFieldAccessor\",\"io.netty.buffer.ByteBufAllocator\",\"com.google.gson.internal.bind.ObjectTypeAdapter\",\"io.netty.buffer.SwappedByteBuf\",\"com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter\",\"io.netty.util.Recycler$Handle\",\"com.google.protobuf.IntArrayList\",\"com.google.protobuf.DescriptorProtos$GeneratedCodeInfo\",\"io.netty.buffer.AbstractByteBufAllocator\",\"io.netty.buffer.WrappedUnpooledUnsafeDirectByteBuf\",\"com.google.protobuf.DescriptorProtos$FileDescriptorProto$1\",\"com.google.gson.internal.bind.JsonTreeWriter$1\",\"com.google.protobuf.Writer$FieldOrder\",\"com.google.gson.internal.bind.TypeAdapters\",\"com.google.protobuf.Struct$Builder\",\"com.google.protobuf.BytesValueOrBuilder\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo$Builder\",\"com.google.protobuf.DescriptorProtos$ServiceDescriptorProtoOrBuilder\",\"io.netty.util.internal.InternalThreadLocalMap\",\"com.google.protobuf.DescriptorProtos$UninterpretedOption$1\",\"io.netty.channel.ChannelHandlerContext\",\"com.google.gson.FieldNamingPolicy\",\"io.netty.util.HashingStrategy\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueProducerLimitField\",\"com.google.protobuf.Option$Builder\",\"com.google.protobuf.ExtensionRegistryFactory\",\"com.google.protobuf.MessageLiteOrBuilder\",\"io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Supplier\",\"io.netty.channel.Channel$Unsafe\",\"com.google.protobuf.MessageLite\",\"com.google.protobuf.UnsafeUtil$1\",\"com.google.protobuf.DescriptorProtos$EnumValueDescriptorProtoOrBuilder\",\"com.google.protobuf.CodedInputStream\",\"com.google.protobuf.Schema\",\"org.nico.noson.entity.NoType\",\"io.netty.channel.ChannelOutboundBuffer$Entry$1\",\"com.google.protobuf.TextFormat$InvalidEscapeSequenceException\",\"org.nico.noson.Noson\",\"org.nico.ratel.landlords.entity.ClientTransferData\",\"io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory$1\",\"com.google.protobuf.GeneratedMessageV3$ExtendableMessage$ExtensionWriter\",\"io.netty.util.CharsetUtil\",\"com.google.protobuf.Field$Kind\",\"io.netty.buffer.DefaultByteBufHolder\",\"io.netty.buffer.UnsafeDirectSwappedByteBuf\",\"io.netty.util.NettyRuntime\",\"org.nico.noson.handler.reversal.impl.ReversalVerityHandler\",\"io.netty.buffer.PooledSlicedByteBuf\",\"io.netty.channel.ChannelPipeline\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$1\",\"com.google.protobuf.ListValue\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$Builder\",\"io.netty.util.internal.PlatformDependent0$10\",\"com.google.protobuf.GeneratedMessage$Builder\",\"com.google.gson.TypeAdapterFactory\",\"io.netty.channel.ChannelOption$1\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseLinkedAtomicQueuePad0\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseLinkedAtomicQueuePad1\",\"com.google.protobuf.GeneratedMessage$FieldAccessorTable\",\"io.netty.util.Recycler$DefaultHandle\",\"com.google.protobuf.SourceContext$Builder\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueMidPad\",\"com.google.protobuf.Value$1\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseLinkedAtomicQueuePad2\",\"com.google.protobuf.DescriptorProtos$MethodOptions$IdempotencyLevel$1\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable\",\"com.google.protobuf.TextFormat$UnknownFieldParseException\",\"com.google.protobuf.MessageReflection\",\"com.google.gson.internal.Streams\",\"io.netty.util.ByteProcessor$IndexOfProcessor\",\"io.netty.util.ByteProcessor\",\"com.google.protobuf.DescriptorProtos$ExtensionRangeOptionsOrBuilder\",\"com.google.protobuf.DescriptorProtos$FileDescriptorProtoOrBuilder\",\"io.netty.util.internal.shaded.org.jctools.queues.ConcurrentCircularArrayQueueL0Pad\",\"com.google.protobuf.DescriptorProtos$FieldOptionsOrBuilder\",\"io.netty.channel.RecvByteBufAllocator$Handle\",\"com.google.protobuf.Descriptors$EnumValueDescriptor\",\"com.google.protobuf.DescriptorProtos$ExtensionRangeOptions\",\"com.google.protobuf.AbstractParser\",\"com.google.protobuf.DescriptorProtos$GeneratedCodeInfo$Annotation$Builder\",\"com.google.protobuf.CodedInputStream$IterableDirectByteBufferDecoder\",\"com.google.protobuf.GeneratedMessageV3$Builder\",\"com.google.protobuf.GeneratedMessageV3$ExtendableBuilder\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable$SingularFieldAccessor\",\"io.netty.buffer.PoolSubpageMetric\",\"com.google.protobuf.DescriptorProtos$FileOptions\",\"com.google.protobuf.AbstractMessageLite\",\"com.google.protobuf.DescriptorProtos$UninterpretedOptionOrBuilder\",\"org.nico.noson.handler.reversal.impl.ReversalNosonHandler\",\"com.google.protobuf.DescriptorProtos$GeneratedCodeInfoOrBuilder\",\"com.google.protobuf.TextFormat\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProtoOrBuilder\",\"com.google.protobuf.Method$Builder\",\"com.google.protobuf.Option\",\"com.google.protobuf.LazyFieldLite\",\"com.google.protobuf.Utf8\",\"com.google.protobuf.DynamicMessage$Builder\",\"com.google.protobuf.UnsafeUtil$Android32MemoryAccessor\",\"com.google.protobuf.Value$Builder\",\"io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf$1\",\"io.netty.buffer.UnpooledDuplicatedByteBuf\",\"com.google.protobuf.LazyStringList\",\"com.google.protobuf.Utf8$UnsafeProcessor\",\"com.google.gson.internal.bind.SqlDateTypeAdapter$1\",\"io.netty.buffer.AbstractDerivedByteBuf\",\"com.google.protobuf.DescriptorProtos$GeneratedCodeInfo$Builder\",\"com.google.protobuf.Option$1\",\"io.netty.buffer.UnpooledSlicedByteBuf\",\"com.google.gson.internal.ConstructorConstructor\",\"com.google.protobuf.Descriptors$FieldDescriptor$JavaType\",\"com.google.protobuf.DescriptorProtos$ServiceOptions$1\",\"io.netty.buffer.ByteBuf\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.LinkedQueueAtomicNode\",\"com.google.gson.annotations.JsonAdapter\",\"com.google.protobuf.Descriptors$EnumDescriptor\",\"com.google.protobuf.WireFormat$JavaType\",\"com.google.protobuf.Descriptors$Descriptor\",\"io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf\",\"io.netty.buffer.WrappedByteBuf\",\"com.google.gson.FieldNamingPolicy$4\",\"com.google.protobuf.Field\",\"com.google.gson.FieldNamingPolicy$3\",\"com.google.protobuf.DescriptorProtos$ExtensionRangeOptions$Builder\",\"com.google.gson.annotations.Since\",\"com.google.gson.FieldNamingPolicy$6\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueL1Pad\",\"com.google.gson.FieldNamingPolicy$5\",\"com.google.protobuf.Mixin\",\"com.google.gson.internal.JsonReaderInternalAccess\",\"com.google.protobuf.DescriptorProtos$EnumValueDescriptorProto$Builder\",\"com.google.gson.FieldNamingPolicy$2\",\"com.google.gson.FieldNamingPolicy$1\",\"com.google.protobuf.TextFormat$Printer\",\"io.netty.util.AttributeMap\",\"com.google.protobuf.DescriptorProtos$OneofDescriptorProto\",\"io.netty.util.internal.Cleaner\",\"io.netty.util.concurrent.ScheduledFuture\",\"com.google.protobuf.Struct\",\"io.netty.buffer.CompositeByteBuf$Component\",\"com.google.protobuf.TimestampOrBuilder\",\"com.google.protobuf.InvalidProtocolBufferException\",\"com.google.protobuf.Descriptors$MethodDescriptor\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto$1\",\"io.netty.handler.timeout.IdleStateEvent\",\"com.google.protobuf.GeneratedMessageLite$GeneratedExtension\",\"org.nico.ratel.landlords.entity.Msg\",\"com.google.gson.internal.JavaVersion\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ReservedRangeOrBuilder\",\"com.google.protobuf.DescriptorProtos$MethodDescriptorProto$Builder\",\"com.google.protobuf.DescriptorProtos$MessageOptions$1\",\"io.netty.util.internal.logging.InternalLogger\",\"org.nico.noson.handler.reversal.impl.ReversalObjectHandler\",\"io.netty.buffer.AbstractReferenceCountedByteBuf\",\"com.google.protobuf.DescriptorProtos$ExtensionRangeOptions$1\",\"io.netty.buffer.UnpooledHeapByteBuf\",\"io.netty.util.concurrent.EventExecutor\",\"com.google.protobuf.DescriptorProtos$UninterpretedOption$Builder\",\"com.google.gson.stream.JsonReader$1\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueueProducerNodeRef\",\"io.netty.channel.ChannelOption\",\"io.netty.util.internal.ThreadLocalRandom$1\",\"com.google.protobuf.GeneratedMessage$BuilderParent\",\"io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Consumer\",\"com.google.gson.internal.bind.TreeTypeAdapter\",\"com.google.protobuf.Value\",\"com.google.protobuf.TextFormatParseLocation\",\"com.google.protobuf.DescriptorProtos$MethodDescriptorProto$1\",\"com.google.gson.stream.JsonWriter\",\"com.google.protobuf.TextFormatParseInfoTree\",\"com.google.gson.internal.bind.ArrayTypeAdapter$1\",\"com.google.protobuf.MapEntryLite$Metadata\",\"com.google.protobuf.ListValue$1\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueL2Pad\",\"com.google.protobuf.Descriptors$FileDescriptor$InternalDescriptorAssigner\",\"com.google.protobuf.UnsafeUtil$JvmMemoryAccessor\",\"com.google.protobuf.Method$1\",\"io.netty.util.ReferenceCounted\",\"com.google.protobuf.UnmodifiableLazyStringList\",\"io.netty.buffer.PooledDuplicatedByteBuf$1\",\"com.google.protobuf.DescriptorProtos$EnumOptions\",\"io.netty.util.ResourceLeakDetectorFactory\",\"org.nico.ratel.landlords.entity.ClientTransferData$1\",\"com.google.protobuf.Syntax\",\"com.google.protobuf.CodedOutputStream$UnsafeDirectNioEncoder\",\"org.nico.ratel.landlords.client.handler.ProtobufTransferHandler\",\"com.google.gson.internal.bind.JsonTreeReader$1\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfoOrBuilder\",\"io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf$1\",\"io.netty.channel.ChannelId\",\"io.netty.buffer.CompositeByteBuf$ComponentList\",\"com.google.protobuf.SourceContext\",\"com.google.protobuf.CodedOutputStream$ArrayEncoder\",\"io.netty.channel.MessageSizeEstimator\",\"com.google.protobuf.UnknownFieldSet$Parser\",\"com.google.protobuf.AbstractProtobufList\",\"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory\",\"com.google.protobuf.DescriptorProtos$FieldOptions$JSType$1\",\"com.google.protobuf.StructProto\",\"io.netty.buffer.UnpooledUnsafeNoCleanerDirectByteBuf\",\"com.google.gson.internal.bind.TypeAdapters$2\",\"io.netty.buffer.PoolThreadCache\",\"com.google.gson.internal.bind.TypeAdapters$1\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueL3Pad\",\"com.google.gson.internal.bind.TypeAdapters$8\",\"com.google.gson.internal.bind.TypeAdapters$7\",\"com.google.gson.internal.bind.TypeAdapters$9\",\"com.google.gson.internal.bind.TypeAdapters$4\",\"com.google.gson.internal.bind.TypeAdapters$3\",\"com.google.gson.internal.bind.TypeAdapters$6\",\"com.google.protobuf.TypeProto\",\"com.google.gson.internal.bind.TypeAdapters$5\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable$RepeatedEnumFieldAccessor\",\"io.netty.util.AsciiString$2\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue\",\"com.google.protobuf.DescriptorProtos$ServiceOptions$Builder\",\"io.netty.util.AsciiString$1\",\"com.google.protobuf.ByteString$ByteIterator\",\"com.google.gson.internal.Streams$AppendableWriter\",\"io.netty.channel.ChannelProgressivePromise\",\"com.google.protobuf.ByteString$LiteralByteString\",\"com.google.protobuf.InvalidProtocolBufferException$InvalidWireTypeException\",\"com.google.gson.JsonSyntaxException\",\"io.netty.util.concurrent.GenericFutureListener\",\"com.google.protobuf.Field$Kind$1\",\"com.google.protobuf.Utf8$UnpairedSurrogateException\",\"org.nico.ratel.landlords.print.SimplePrinter\",\"com.google.protobuf.FieldOrBuilder\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProto$1\",\"com.google.protobuf.Internal$LongList\",\"com.google.protobuf.MapField$Converter\",\"com.google.protobuf.MapField\",\"io.netty.util.AttributeKey\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseLinkedAtomicQueueConsumerNodeRef\",\"io.netty.util.Recycler$WeakOrderQueue$Head\",\"com.google.protobuf.DescriptorProtos$MethodOptions$1\",\"com.google.protobuf.Message$Builder\",\"com.google.gson.TypeAdapter\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueProducerIndexField\",\"com.google.protobuf.DescriptorProtos$ServiceDescriptorProto$Builder\",\"com.google.protobuf.TypeRegistry\",\"com.google.gson.internal.bind.SqlDateTypeAdapter\",\"com.google.protobuf.UnsafeUtil$Android64MemoryAccessor\",\"com.google.protobuf.DescriptorProtos$EnumValueOptions\",\"com.google.protobuf.DescriptorProtos$ServiceOptions\",\"io.netty.util.internal.logging.Slf4JLoggerFactory\",\"com.google.protobuf.Any$Builder\",\"com.google.protobuf.ListValueOrBuilder\",\"com.google.protobuf.ByteString$CodedBuilder\",\"com.google.protobuf.Descriptors$FieldDescriptor$Type\",\"io.netty.util.AttributeKey$1\",\"com.google.protobuf.DescriptorProtos$OneofDescriptorProto$1\",\"org.nico.ratel.landlords.entity.ServerTransferData$ServerTransferDataProtoc$Builder\",\"io.netty.buffer.UnpooledDirectByteBuf\",\"com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter\",\"com.google.protobuf.CodedOutputStream$ByteOutputEncoder\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicReferenceArrayQueue\",\"com.google.protobuf.RepeatedFieldBuilderV3\",\"io.netty.util.ResourceLeakDetector$Level\",\"io.netty.buffer.UnpooledByteBufAllocator$InstrumentedUnpooledHeapByteBuf\",\"org.nico.ratel.landlords.enums.ServerEventCode\",\"com.google.protobuf.TextFormat$Tokenizer\",\"io.netty.channel.MessageSizeEstimator$Handle\",\"com.google.protobuf.AnyProto\",\"com.google.protobuf.WireFormat\",\"com.google.protobuf.BytesValue$Builder\",\"io.netty.util.concurrent.Promise\",\"com.google.gson.internal.Primitives\",\"io.netty.buffer.ByteBufAllocatorMetric\",\"com.google.gson.stream.MalformedJsonException\",\"com.google.protobuf.TextFormatParseInfoTree$Builder\",\"com.google.gson.internal.bind.DateTypeAdapter$1\",\"io.netty.buffer.ReadOnlyUnsafeDirectByteBuf\",\"io.netty.util.internal.shaded.org.jctools.util.UnsafeAccess\",\"org.nico.noson.handler.reversal.impl.ReversalArrayHandler\",\"io.netty.buffer.AdvancedLeakAwareCompositeByteBuf\",\"org.nico.ratel.landlords.entity.ServerTransferData$ServerTransferDataProtoc$1\",\"org.nico.noson.cache.Cache\",\"com.google.protobuf.MapEntry\",\"com.google.protobuf.DescriptorProtos$FileDescriptorProto$Builder\",\"io.netty.util.ConstantPool\",\"com.google.protobuf.Descriptors$DescriptorPool$DescriptorIntPair\",\"com.google.protobuf.GeneratedMessage$ExtensionDescriptorRetriever\",\"com.google.gson.internal.bind.DateTypeAdapter\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProto$EnumReservedRange$1\",\"com.google.protobuf.GeneratedMessageV3$UnusedPrivateParameter\",\"org.nico.ratel.landlords.entity.ClientTransferData$ClientTransferDataProtocOrBuilder\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueue\",\"com.google.protobuf.DescriptorProtos$EnumValueOptions$Builder\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProto$EnumReservedRangeOrBuilder\",\"com.google.gson.internal.reflect.ReflectionAccessor\",\"com.google.protobuf.TextFormat$Parser$SingularOverwritePolicy\",\"com.google.protobuf.TypeRegistry$EmptyTypeRegistryHolder\",\"com.google.protobuf.DescriptorProtos$EnumOptions$1\",\"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField\",\"io.netty.buffer.PoolArena\",\"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1\",\"io.netty.util.AsciiString$CharEqualityComparator\",\"io.netty.util.internal.logging.InternalLogLevel\",\"com.google.protobuf.DescriptorProtos$FileDescriptorProto\",\"com.google.protobuf.DescriptorProtos$EnumValueDescriptorProto\",\"io.netty.buffer.CompositeByteBuf\",\"com.google.protobuf.Any$1\",\"org.nico.ratel.landlords.entity.ServerTransferData$ServerTransferDataProtoc\",\"io.netty.channel.ChannelOutboundInvoker\",\"io.netty.buffer.PoolChunk\",\"com.google.protobuf.GeneratedMessageV3$BuilderParent\",\"com.google.protobuf.DescriptorProtos$FileOptions$Builder\",\"io.netty.channel.ChannelOutboundBuffer$Entry\",\"com.google.gson.internal.LazilyParsedNumber\",\"com.google.protobuf.DescriptorProtos$EnumValueOptionsOrBuilder\",\"com.google.protobuf.MapEntry$Builder\",\"com.google.protobuf.MessageReflection$MergeTarget$ContainerType\",\"io.netty.channel.WriteBufferWaterMark\",\"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter\",\"io.netty.util.Recycler$Stack\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProto$Builder\",\"com.google.protobuf.Timestamp\",\"com.google.protobuf.DescriptorProtos$FileOptions$OptimizeMode\",\"com.google.gson.JsonElement\",\"com.google.protobuf.Descriptors$DescriptorPool$PackageDescriptor\",\"io.netty.util.internal.logging.Slf4JLogger\",\"com.google.protobuf.ByteString$ByteArrayCopier\",\"com.google.protobuf.Internal$ProtobufList\",\"io.netty.handler.codec.http.websocketx.WebSocketFrame\",\"io.netty.buffer.PoolThreadCache$MemoryRegionCache\",\"io.netty.util.concurrent.EventExecutorGroup\",\"io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$WaitStrategy\",\"com.google.protobuf.Descriptors$FileDescriptor$Syntax\",\"io.netty.buffer.ByteBufUtil\",\"com.google.protobuf.Message\",\"com.google.protobuf.ByteString$ArraysByteArrayCopier\",\"org.nico.ratel.landlords.entity.ServerTransferData$1\",\"com.google.protobuf.DescriptorProtos$OneofOptionsOrBuilder\",\"com.google.protobuf.ExtensionRegistryLite$ObjectIntPair\",\"io.netty.buffer.UnpooledByteBufAllocator$InstrumentedUnpooledDirectByteBuf\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo$Location\",\"com.google.gson.internal.bind.JsonTreeWriter\",\"com.google.gson.GsonBuilder\",\"com.google.protobuf.Extension$ExtensionType\",\"io.netty.util.internal.ReflectionUtil\",\"io.netty.buffer.DuplicatedByteBuf\",\"io.netty.util.concurrent.FastThreadLocalThread\",\"com.google.protobuf.Descriptors$ServiceDescriptor\",\"com.google.gson.internal.bind.TimeTypeAdapter\",\"com.google.protobuf.MessageReflection$MergeTarget\",\"com.google.protobuf.Mixin$Builder\",\"io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue\",\"com.google.protobuf.DescriptorProtos$MethodDescriptorProto\",\"io.netty.util.internal.PlatformDependent0$3\",\"io.netty.util.internal.PlatformDependent0$4\",\"io.netty.util.internal.PlatformDependent0$5\",\"com.google.protobuf.DescriptorProtos$DescriptorProtoOrBuilder\",\"io.netty.buffer.PooledByteBufAllocator\",\"io.netty.util.internal.PlatformDependent0$1\",\"io.netty.util.internal.PlatformDependent0$2\",\"com.google.protobuf.Timestamp$Builder\",\"com.google.gson.LongSerializationPolicy\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ReservedRange\",\"com.google.protobuf.SmallSortedMap$EmptySet$1\",\"com.google.protobuf.DescriptorProtos$UninterpretedOption$NamePart\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProto\",\"com.google.protobuf.SmallSortedMap$EmptySet$2\",\"io.netty.util.ResourceLeakDetector$DefaultResourceLeak\",\"com.google.protobuf.AbstractMessage$BuilderParent\",\"com.google.protobuf.DescriptorProtos$OneofDescriptorProto$Builder\",\"com.google.protobuf.UnsafeUtil$MemoryAccessor\",\"com.google.protobuf.SingleFieldBuilderV3\",\"io.netty.buffer.AdvancedLeakAwareByteBuf\",\"io.netty.util.internal.StringUtil\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto\",\"com.google.protobuf.CodedOutputStream$OutputStreamEncoder\",\"com.google.protobuf.UnknownFieldSet$Field$Builder\",\"com.google.gson.internal.reflect.UnsafeReflectionAccessor\",\"com.google.gson.Gson$FutureTypeAdapter\",\"com.google.protobuf.UnsafeUtil\",\"com.google.protobuf.CodedOutputStream$AbstractBufferedEncoder\",\"com.google.protobuf.DescriptorProtos$MethodDescriptorProtoOrBuilder\",\"com.google.gson.internal.$Gson$Preconditions\",\"com.google.protobuf.ByteString$BoundedByteString\",\"com.google.protobuf.UnknownFieldSet$Field\",\"io.netty.buffer.PooledByteBuf\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable$RepeatedFieldAccessor$ReflectionInvoker\",\"com.google.protobuf.DescriptorProtos$ServiceOptionsOrBuilder\",\"com.google.gson.internal.ConstructorConstructor$3\",\"com.google.protobuf.DescriptorProtos$OneofOptions$1\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Label$1\",\"com.google.gson.JsonNull\",\"com.google.protobuf.MessageReflection$ExtensionAdapter\",\"io.netty.util.concurrent.Future\",\"com.google.protobuf.DescriptorProtos\",\"com.google.protobuf.SourceContextOrBuilder\",\"com.google.gson.JsonObject\",\"com.google.protobuf.ProtocolMessageEnum\",\"com.google.protobuf.TextFormat$Parser$UnknownField\",\"com.google.protobuf.Internal$FloatList\",\"com.google.gson.Gson$2\",\"io.netty.buffer.PoolChunkList\",\"com.google.gson.Gson$3\",\"com.google.gson.Gson$4\",\"com.google.gson.Gson$5\",\"io.netty.buffer.PoolSubpage\",\"com.google.gson.Gson$1\",\"io.netty.buffer.Unpooled\",\"io.netty.channel.ChannelProgressiveFuture\",\"io.netty.util.NettyRuntime$AvailableProcessorsHolder\",\"com.google.protobuf.Descriptors$DescriptorValidationException\",\"com.google.protobuf.MapFieldLite\",\"com.google.protobuf.MapEntry$Metadata$1\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Builder\",\"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory\",\"com.google.protobuf.DescriptorProtos$MessageOptions$Builder\",\"org.nico.noson.exception.NosonException\",\"com.google.protobuf.DescriptorProtos$UninterpretedOption$NamePart$Builder\",\"io.netty.buffer.PooledDuplicatedByteBuf\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueuePad2\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueuePad0\",\"com.google.protobuf.Descriptors$OneofDescriptor\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueuePad1\",\"com.google.gson.JsonIOException\",\"com.google.protobuf.Field$1\",\"com.google.protobuf.GeneratedMessageV3$ExtendableMessage\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable$RepeatedMessageFieldAccessor\",\"com.google.protobuf.AbstractMessageLite$InternalOneOfEnum\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueProducerIndexField\",\"com.google.protobuf.FieldSet$FieldDescriptorLite\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable$SingularMessageFieldAccessor\",\"com.google.protobuf.MessageOrBuilder\",\"io.netty.util.ResourceLeak\",\"com.google.protobuf.DescriptorProtos$FieldOptions$Builder\",\"io.netty.util.internal.MathUtil\",\"com.google.protobuf.GeneratedMessage\",\"com.google.protobuf.WireFormat$FieldType\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Type\",\"com.google.gson.JsonPrimitive\",\"io.netty.channel.EventLoopGroup\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ReservedRange$Builder\",\"io.netty.buffer.AbstractUnpooledSlicedByteBuf\",\"io.netty.util.internal.shaded.org.jctools.queues.QueueProgressIndicators\",\"io.netty.buffer.EmptyByteBuf\",\"io.netty.buffer.AbstractPooledDerivedByteBuf$PooledNonRetainedSlicedByteBuf\",\"com.google.protobuf.ExtensionRegistry\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Label\",\"com.google.protobuf.CodedInputStream$ArrayDecoder\",\"org.nico.ratel.landlords.entity.ClientTransferData$ClientTransferDataProtoc$1\",\"com.google.protobuf.DescriptorProtos$MethodOptions$Builder\",\"com.google.protobuf.Descriptors$1\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ExtensionRangeOrBuilder\",\"io.netty.buffer.ReadOnlyByteBuf\",\"com.google.protobuf.Android\",\"com.google.protobuf.AbstractMessageLite$Builder$LimitedInputStream\",\"com.google.gson.internal.bind.TypeAdapters$23\",\"io.netty.util.AsciiString\",\"com.google.gson.internal.bind.TypeAdapters$24\",\"com.google.gson.internal.bind.TypeAdapters$25\",\"com.google.gson.internal.bind.TypeAdapters$26\",\"com.google.protobuf.GeneratedMessageV3$Builder$BuilderParentImpl\",\"com.google.gson.internal.bind.TypeAdapters$20\",\"com.google.protobuf.Api$Builder\",\"com.google.gson.internal.bind.TypeAdapters$21\",\"com.google.gson.internal.bind.TypeAdapters$22\",\"com.google.protobuf.NullValue$1\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueL2Pad\",\"com.google.protobuf.Internal$IntList\",\"com.google.gson.internal.bind.TypeAdapters$27\",\"com.google.gson.FieldNamingStrategy\",\"com.google.gson.internal.bind.TypeAdapters$28\",\"com.google.gson.internal.bind.TypeAdapters$29\",\"com.google.protobuf.ExtensionRegistryLite\",\"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper\",\"com.google.protobuf.DescriptorProtos$OneofOptions$Builder\",\"com.google.protobuf.DescriptorProtos$MessageOptions\",\"com.google.gson.ExclusionStrategy\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueue\",\"com.google.protobuf.ByteString$Output\",\"io.netty.util.internal.shaded.org.jctools.queues.SpscLinkedQueue\",\"com.google.gson.internal.bind.TypeAdapters$34\",\"com.google.gson.internal.bind.TypeAdapters$35\",\"com.google.protobuf.MixinOrBuilder\",\"io.netty.channel.RecvByteBufAllocator\",\"com.google.gson.internal.bind.TypeAdapters$30\",\"com.google.gson.internal.bind.TypeAdapters$32\",\"com.google.gson.internal.bind.TypeAdapters$33\",\"com.google.protobuf.MethodOrBuilder\",\"com.google.protobuf.DescriptorProtos$FileOptions$OptimizeMode$1\",\"com.google.protobuf.GeneratedMessage$GeneratedExtension\",\"com.google.gson.JsonArray\",\"com.google.protobuf.MapField$MutatabilityAwareMap\",\"com.google.protobuf.ExtensionLite\",\"io.netty.util.concurrent.ProgressivePromise\",\"com.google.protobuf.DescriptorProtos$ServiceDescriptorProto\",\"com.google.protobuf.UnknownFieldSet$Builder\",\"io.netty.util.Constant\",\"com.google.protobuf.Descriptors$GenericDescriptor\",\"io.netty.buffer.PooledByteBufAllocator$PoolThreadLocalCache\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ReservedRange$1\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseLinkedAtomicQueue\",\"com.google.protobuf.StructOrBuilder\",\"com.google.protobuf.Value$KindCase\",\"org.nico.ratel.landlords.enums.ClientEventCode\",\"io.netty.buffer.UnsafeHeapSwappedByteBuf\",\"com.google.protobuf.ByteString$AbstractByteIterator\",\"com.google.gson.internal.bind.TypeAdapters$12\",\"com.google.gson.internal.bind.TypeAdapters$13\",\"com.google.gson.internal.bind.TypeAdapters$14\",\"com.google.gson.internal.bind.TypeAdapters$15\",\"org.nico.ratel.landlords.entity.ClientTransferData$ClientTransferDataProtoc\",\"org.nico.ratel.landlords.entity.ServerTransferData$ServerTransferDataProtocOrBuilder\",\"com.google.gson.internal.bind.TypeAdapters$10\",\"com.google.gson.internal.bind.TypeAdapters$11\",\"com.google.protobuf.Reader\",\"io.netty.channel.Channel\",\"com.google.protobuf.NioByteString$1\",\"com.google.gson.internal.bind.TypeAdapters$16\",\"com.google.gson.internal.bind.TypeAdapters$17\",\"com.google.gson.internal.bind.TypeAdapters$18\",\"com.google.gson.internal.bind.TypeAdapters$19\",\"io.netty.util.internal.logging.InternalLoggerFactory\",\"com.google.protobuf.Utf8$Processor\",\"com.google.gson.TypeAdapter$1\",\"com.google.protobuf.Field$Cardinality$1\",\"com.google.protobuf.DescriptorProtos$GeneratedCodeInfo$Annotation\",\"org.nico.noson.scanner.buddy.JsonWrapper\",\"io.netty.buffer.WrappedCompositeByteBuf\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueProducerLimitField\",\"io.netty.channel.ChannelPromise\",\"io.netty.util.Recycler$WeakOrderQueue\",\"com.google.protobuf.MessageLite$Builder\",\"com.google.protobuf.NullValue\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo\",\"com.google.protobuf.NioByteString\",\"org.nico.ratel.landlords.utils.JsonUtils\",\"com.google.protobuf.Parser\",\"io.netty.channel.ChannelOutboundBuffer\",\"com.google.protobuf.Descriptors$FieldDescriptor\",\"com.google.protobuf.MutabilityOracle$1\",\"io.netty.buffer.PoolChunkMetric\",\"com.google.protobuf.DescriptorProtos$MessageOptionsOrBuilder\",\"com.google.protobuf.Descriptors$FileDescriptor\",\"com.google.gson.internal.bind.ObjectTypeAdapter$1\",\"com.google.gson.JsonParseException\",\"com.google.protobuf.WireFormat$FieldType$1\",\"com.google.protobuf.WireFormat$FieldType$2\",\"com.google.protobuf.WireFormat$FieldType$3\",\"com.google.protobuf.WireFormat$FieldType$4\",\"com.google.protobuf.DescriptorProtos$EnumOptions$Builder\",\"com.google.protobuf.AbstractMessageLite$Builder\",\"org.nico.ratel.landlords.entity.ServerTransferData\",\"com.google.gson.DefaultDateTypeAdapter\",\"com.google.gson.JsonSerializationContext\",\"io.netty.buffer.SimpleLeakAwareCompositeByteBuf\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.SpscLinkedAtomicQueue\",\"com.google.protobuf.Utf8$SafeProcessor\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo$LocationOrBuilder\",\"com.google.protobuf.DescriptorProtos$UninterpretedOption\",\"com.google.protobuf.CodedOutputStream$HeapNioEncoder\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ExtensionRange\",\"io.netty.channel.ChannelFuture\",\"io.netty.channel.ChannelConfig\",\"com.google.protobuf.GeneratedMessageV3\",\"io.netty.util.internal.SystemPropertyUtil$1\",\"com.google.protobuf.PrimitiveNonBoxingCollection\",\"com.google.protobuf.DescriptorProtos$MethodOptions\",\"com.google.protobuf.DescriptorProtos$GeneratedCodeInfo$AnnotationOrBuilder\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueL1Pad\",\"io.netty.util.IllegalReferenceCountException\",\"io.netty.buffer.ByteBufUtil$1\",\"io.netty.buffer.ByteBufUtil$2\",\"com.google.protobuf.Utf8$DecodeUtil\",\"org.nico.ratel.landlords.entity.ClientTransferData$ClientTransferDataProtoc$Builder\",\"io.netty.buffer.ByteBufHolder\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Type$1\",\"com.google.protobuf.LazyStringArrayList\",\"io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$ExitCondition\",\"com.google.protobuf.Method\",\"io.netty.buffer.AbstractPooledDerivedByteBuf$PooledNonRetainedDuplicateByteBuf\",\"io.netty.handler.timeout.IdleState\",\"com.google.protobuf.Mixin$1\",\"io.netty.util.internal.shaded.org.jctools.queues.ConcurrentCircularArrayQueue\",\"io.netty.buffer.UnpooledByteBufAllocator$InstrumentedUnpooledUnsafeNoCleanerDirectByteBuf\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo$Location$Builder\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseLinkedAtomicQueueProducerNodeRef\",\"io.netty.util.internal.CleanerJava6\",\"com.google.protobuf.DescriptorProtos$FieldOptions$JSType\",\"com.google.protobuf.DescriptorProtos$UninterpretedOption$NamePartOrBuilder\",\"com.google.gson.internal.bind.TypeAdapters$35$1\",\"io.netty.util.ByteProcessor$1\",\"com.google.gson.annotations.Until\",\"com.google.protobuf.SmallSortedMap$1\",\"com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter\",\"com.google.gson.internal.$Gson$Types\",\"com.google.protobuf.Struct$1\",\"com.google.protobuf.Field$Cardinality\",\"org.nico.ratel.landlords.channel.ChannelUtils\",\"io.netty.util.internal.LongCounter\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo$Location$1\",\"io.netty.util.ByteProcessor$4\",\"io.netty.util.ByteProcessor$3\",\"io.netty.util.ByteProcessor$2\",\"com.google.protobuf.GeneratedMessage$FieldAccessorTable$OneofAccessor\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueConsumerIndexField\",\"io.netty.channel.ChannelMetadata\",\"io.netty.util.Recycler$3\",\"io.netty.buffer.FixedCompositeByteBuf$Component\",\"io.netty.buffer.SimpleLeakAwareByteBuf\",\"io.netty.channel.ChannelOutboundBuffer$1\",\"io.netty.util.Recycler$1\",\"io.netty.util.Recycler$2\",\"io.netty.util.Attribute\",\"com.google.protobuf.AnyOrBuilder\",\"com.google.protobuf.DescriptorProtos$FieldOptions$CType$1\",\"io.netty.buffer.PoolThreadCache$MemoryRegionCache$1\",\"org.nico.ratel.landlords.client.entity.User\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable$RepeatedFieldAccessor\",\"com.google.protobuf.MessageReflection$BuilderAdapter\",\"io.netty.buffer.AbstractPooledDerivedByteBuf\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueConsumerIndexField\",\"com.google.gson.stream.JsonToken\",\"com.google.protobuf.DescriptorProtos$FieldOptions\",\"com.google.protobuf.Timestamp$1\",\"io.netty.handler.codec.http.websocketx.TextWebSocketFrame\",\"io.netty.buffer.UnpooledByteBufAllocator$InstrumentedUnpooledUnsafeHeapByteBuf\",\"com.google.gson.LongSerializationPolicy$1\",\"com.google.gson.LongSerializationPolicy$2\",\"io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf\",\"io.netty.buffer.ByteBufAllocatorMetricProvider\",\"org.nico.noson.cache.CacheManager\",\"io.netty.buffer.UnreleasableByteBuf\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable$SingularFieldAccessor$ReflectionInvoker\",\"com.google.protobuf.AbstractMessage$Builder\",\"com.google.protobuf.GeneratedMessage$FieldAccessorTable$FieldAccessor\",\"org.nico.noson.entity.ReversalRecorder\",\"io.netty.util.AbstractConstant\",\"io.netty.buffer.ReadOnlyByteBufferBuf\",\"com.google.protobuf.SmallSortedMap$EmptySet\",\"io.netty.util.internal.PlatformDependent\",\"com.google.protobuf.DescriptorProtos$ServiceDescriptorProto$1\",\"org.nico.ratel.landlords.client.event.ClientEventListener\",\"com.google.gson.Gson\",\"com.google.protobuf.LazyField\",\"io.netty.util.concurrent.OrderedEventExecutor\",\"com.google.protobuf.DescriptorProtos$MethodOptions$IdempotencyLevel\",\"com.google.protobuf.ByteOutput\",\"com.google.protobuf.Internal$EnumLiteMap\",\"com.google.protobuf.MessageReflection$ExtensionBuilderAdapter\",\"io.netty.channel.ChannelHandlerAdapter\",\"io.netty.channel.EventLoop\",\"io.netty.buffer.PoolArenaMetric\",\"com.google.protobuf.TextFormat$Parser$Builder\",\"com.google.protobuf.ByteString\",\"io.netty.buffer.PooledDirectByteBuf$1\",\"com.google.protobuf.BytesValue\",\"com.google.protobuf.Internal$EnumLite\",\"com.google.gson.internal.Excluder$1\",\"com.google.protobuf.CodedOutputStream$OutOfSpaceException\",\"org.nico.noson.handler.reversal.impl.ReversalMapHandler\",\"com.google.protobuf.SmallSortedMap\",\"com.google.protobuf.TextFormat$Parser\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueL3Pad\",\"com.google.protobuf.ByteString$2\",\"io.netty.buffer.PooledByteBufAllocatorMetric\",\"com.google.protobuf.ByteString$1\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable$SingularEnumFieldAccessor\",\"io.netty.buffer.PooledUnsafeDirectByteBuf\",\"com.google.gson.internal.bind.CollectionTypeAdapterFactory\",\"com.google.gson.internal.reflect.PreJava9ReflectionAccessor\",\"io.netty.util.ResourceLeakTracker\",\"com.google.protobuf.ExtensionRegistry$ExtensionInfo\",\"com.google.protobuf.UnknownFieldSet\",\"com.google.protobuf.Api$1\",\"com.google.protobuf.AbstractMessage\",\"com.google.protobuf.Extension$MessageType\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProto$EnumReservedRange$Builder\",\"com.google.protobuf.WireFormat$Utf8Validation\",\"com.google.protobuf.ListValue$Builder\",\"com.google.protobuf.DescriptorProtos$GeneratedCodeInfo$Annotation$1\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable$RepeatedFieldAccessor$MethodInvoker\",\"io.netty.util.ByteProcessor$IndexNotOfProcessor\",\"com.google.protobuf.Internal\",\"com.google.protobuf.DescriptorProtos$DescriptorProto\",\"com.google.gson.reflect.TypeToken\",\"io.netty.buffer.PooledSlicedByteBuf$1\",\"io.netty.channel.ChannelInboundHandler\",\"com.google.protobuf.MapEntry$Metadata\",\"io.netty.util.ResourceLeakDetector$Record\",\"com.google.protobuf.DescriptorProtos$FieldOptions$1\",\"io.netty.buffer.PooledDirectByteBuf\",\"io.netty.buffer.AbstractUnsafeSwappedByteBuf\",\"com.google.protobuf.CodedInputStream$StreamDecoder\",\"com.google.protobuf.DescriptorProtos$MethodOptionsOrBuilder\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueMidPad\",\"io.netty.buffer.UnpooledByteBufAllocator$InstrumentedUnpooledUnsafeDirectByteBuf\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable$SingularFieldAccessor$MethodInvoker\",\"io.netty.util.Recycler\",\"com.google.protobuf.CodedOutputStream$SafeDirectNioEncoder\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ExtensionRange$1\",\"io.netty.buffer.UnpooledByteBufAllocator$UnpooledByteBufAllocatorMetric\",\"com.google.protobuf.MutabilityOracle\",\"io.netty.buffer.UnpooledByteBufAllocator\",\"io.netty.util.concurrent.ProgressiveFuture\",\"com.google.protobuf.Extension\",\"com.google.gson.stream.JsonReader\",\"com.google.gson.FieldAttributes\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ExtensionRange$Builder\",\"com.google.gson.internal.bind.MapTypeAdapterFactory\",\"io.netty.util.internal.EmptyArrays\",\"io.netty.buffer.PooledUnsafeDirectByteBuf$1\",\"com.google.protobuf.WireFormat$Utf8Validation$1\",\"com.google.protobuf.WireFormat$Utf8Validation$2\",\"com.google.protobuf.FieldSet\",\"com.google.protobuf.WireFormat$Utf8Validation$3\",\"com.google.protobuf.Syntax$1\",\"com.google.protobuf.DescriptorProtos$OneofOptions\",\"com.google.protobuf.ApiProto\",\"com.google.protobuf.BytesValue$1\",\"org.nico.noson.handler.reversal.impl.ReversalListHandler\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProto$EnumReservedRange\",\"com.google.gson.internal.bind.ArrayTypeAdapter\",\"com.google.protobuf.OptionOrBuilder\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueueConsumerNodeRef\",\"com.google.protobuf.DescriptorProtos$GeneratedCodeInfo$1\",\"io.netty.buffer.PoolArena$DirectArena\",\"io.netty.util.internal.PlatformDependent$ThreadLocalRandomProvider\",\"org.nico.noson.handler.reversal.ReversalHandler\",\"com.google.protobuf.FieldSet$Builder\",\"io.netty.util.internal.shaded.org.jctools.queues.IndexedQueueSizeUtil$IndexedQueue\",\"com.google.protobuf.ProtocolStringList\",\"com.google.gson.internal.bind.TypeAdapters$26$1\",\"io.netty.buffer.UnpooledUnsafeHeapByteBuf\",\"com.google.protobuf.DescriptorProtos$UninterpretedOption$NamePart$1\",\"io.netty.util.internal.ObjectUtil\",\"com.google.protobuf.DescriptorProtos$FieldOptions$CType\",\"io.netty.buffer.AbstractByteBuf\",\"io.netty.buffer.UnpooledUnsafeDirectByteBuf\",\"io.netty.util.ResourceLeakDetector\",\"com.google.protobuf.IterableByteBufferInputStream\",\"com.google.protobuf.UninitializedMessageException\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProtoOrBuilder\",\"com.google.gson.internal.bind.JsonTreeReader\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo$1\",\"com.google.protobuf.SourceContextProto\",\"com.google.protobuf.Internal$DoubleList\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable$OneofAccessor\",\"com.google.protobuf.DynamicMessage\",\"com.google.protobuf.Descriptors\",\"com.google.protobuf.ApiOrBuilder\",\"com.google.protobuf.DescriptorProtos$FileOptionsOrBuilder\",\"io.netty.util.concurrent.FastThreadLocal\",\"com.google.protobuf.DescriptorProtos$EnumValueDescriptorProto$1\",\"io.netty.util.internal.OutOfDirectMemoryError\",\"com.google.protobuf.CodedOutputStream\",\"io.netty.util.internal.IntegerHolder\",\"io.netty.channel.ChannelInboundInvoker\",\"io.netty.util.internal.SystemPropertyUtil\",\"com.google.protobuf.DescriptorProtos$FileOptions$1\",\"io.netty.buffer.PoolChunkListMetric\",\"com.google.protobuf.ArrayDecoders$Registers\",\"io.netty.channel.ChannelHandler\",\"com.google.protobuf.GeneratedMessageV3$ExtendableMessageOrBuilder\");\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/handler/ProtobufTransferHandler_ESTest_scaffolding.java",
        "class": "ProtobufTransferHandler_ESTest_scaffolding",
        "name": "initMocksToAvoidTimeoutsInTheTests",
        "return_type": "void",
        "modifiers": "private static",
        "parameters": [],
        "raw": "private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException {\n  mock(Class.forName(\"io.netty.channel.ChannelHandlerContext\",false,ProtobufTransferHandler_ESTest_scaffolding.class.getClassLoader()));\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/handler/ProtobufTransferHandler_ESTest_scaffolding.java",
        "class": "ProtobufTransferHandler_ESTest_scaffolding",
        "name": "resetClasses",
        "return_type": "void",
        "modifiers": "private static",
        "parameters": [],
        "raw": "private static void resetClasses(){\n  org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ProtobufTransferHandler_ESTest_scaffolding.class.getClassLoader());\n  org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\"io.netty.channel.ChannelHandlerAdapter\",\"io.netty.channel.ChannelInboundHandlerAdapter\",\"org.nico.ratel.landlords.client.handler.ProtobufTransferHandler\",\"org.nico.ratel.landlords.enums.ClientEventCode\",\"org.nico.ratel.landlords.client.entity.User\",\"org.nico.ratel.landlords.client.event.ClientEventListener\",\"org.nico.noson.handler.reversal.ReversalHandlerQueue\",\"org.nico.noson.handler.reversal.ReversalHandler\",\"org.nico.noson.handler.reversal.impl.ReversalVerityHandler\",\"org.nico.noson.handler.reversal.impl.ReversalNosonHandler\",\"org.nico.noson.handler.reversal.impl.ReversalListHandler\",\"org.nico.noson.handler.reversal.impl.ReversalArrayHandler\",\"org.nico.noson.handler.reversal.impl.ReversalMapHandler\",\"org.nico.noson.handler.reversal.impl.ReversalObjectHandler\",\"org.nico.noson.scanner.buddy.JsonWrapper\",\"org.nico.noson.cache.CacheManager\",\"io.netty.handler.timeout.IdleState\",\"org.nico.ratel.landlords.enums.ServerEventCode\",\"com.google.gson.reflect.TypeToken\",\"com.google.gson.internal.$Gson$Preconditions\",\"com.google.gson.internal.$Gson$Types\",\"com.google.gson.Gson\",\"com.google.gson.internal.Excluder\",\"com.google.gson.FieldNamingPolicy\",\"com.google.gson.LongSerializationPolicy\",\"com.google.gson.internal.ConstructorConstructor\",\"com.google.gson.internal.JavaVersion\",\"com.google.gson.internal.reflect.PreJava9ReflectionAccessor\",\"com.google.gson.internal.reflect.ReflectionAccessor\",\"com.google.gson.TypeAdapter\",\"com.google.gson.internal.bind.TypeAdapters$1\",\"com.google.gson.TypeAdapter$1\",\"com.google.gson.internal.bind.TypeAdapters$32\",\"com.google.gson.internal.bind.TypeAdapters$2\",\"com.google.gson.internal.bind.TypeAdapters$3\",\"com.google.gson.internal.bind.TypeAdapters$4\",\"com.google.gson.internal.bind.TypeAdapters$33\",\"com.google.gson.internal.bind.TypeAdapters$5\",\"com.google.gson.internal.bind.TypeAdapters$6\",\"com.google.gson.internal.bind.TypeAdapters$7\",\"com.google.gson.internal.bind.TypeAdapters$8\",\"com.google.gson.internal.bind.TypeAdapters$9\",\"com.google.gson.internal.bind.TypeAdapters$10\",\"com.google.gson.internal.bind.TypeAdapters$11\",\"com.google.gson.internal.bind.TypeAdapters$12\",\"com.google.gson.internal.bind.TypeAdapters$13\",\"com.google.gson.internal.bind.TypeAdapters$14\",\"com.google.gson.internal.bind.TypeAdapters$15\",\"com.google.gson.internal.bind.TypeAdapters$16\",\"com.google.gson.internal.bind.TypeAdapters$17\",\"com.google.gson.internal.bind.TypeAdapters$18\",\"com.google.gson.internal.bind.TypeAdapters$19\",\"com.google.gson.internal.bind.TypeAdapters$20\",\"com.google.gson.internal.bind.TypeAdapters$21\",\"com.google.gson.internal.bind.TypeAdapters$22\",\"com.google.gson.internal.bind.TypeAdapters$23\",\"com.google.gson.internal.bind.TypeAdapters$35\",\"com.google.gson.internal.bind.TypeAdapters$24\",\"com.google.gson.internal.bind.TypeAdapters$25\",\"com.google.gson.internal.bind.TypeAdapters$26\",\"com.google.gson.internal.bind.TypeAdapters$27\",\"com.google.gson.internal.bind.TypeAdapters$34\",\"com.google.gson.internal.bind.TypeAdapters$28\",\"com.google.gson.internal.bind.TypeAdapters$29\",\"com.google.gson.internal.bind.TypeAdapters$30\",\"com.google.gson.internal.bind.TypeAdapters\",\"com.google.gson.internal.bind.ObjectTypeAdapter$1\",\"com.google.gson.internal.bind.ObjectTypeAdapter\",\"com.google.gson.Gson$1\",\"com.google.gson.Gson$2\",\"com.google.gson.Gson$4\",\"com.google.gson.Gson$5\",\"com.google.gson.internal.bind.DateTypeAdapter$1\",\"com.google.gson.internal.bind.DateTypeAdapter\",\"com.google.gson.internal.bind.TimeTypeAdapter$1\",\"com.google.gson.internal.bind.TimeTypeAdapter\",\"com.google.gson.internal.bind.SqlDateTypeAdapter$1\",\"com.google.gson.internal.bind.SqlDateTypeAdapter\",\"com.google.gson.internal.bind.ArrayTypeAdapter$1\",\"com.google.gson.internal.bind.ArrayTypeAdapter\",\"com.google.gson.internal.bind.CollectionTypeAdapterFactory\",\"com.google.gson.internal.bind.MapTypeAdapterFactory\",\"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory\",\"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory\",\"org.nico.ratel.landlords.utils.JsonUtils\",\"com.google.protobuf.AbstractMessageLite\",\"com.google.protobuf.AbstractMessage\",\"com.google.protobuf.GeneratedMessageV3\",\"com.google.protobuf.ExtensionRegistryLite\",\"com.google.protobuf.ExtensionRegistry\",\"com.google.protobuf.ExtensionRegistryFactory\",\"com.google.protobuf.AbstractParser\",\"com.google.protobuf.UnknownFieldSet$Parser\",\"com.google.protobuf.UnknownFieldSet\",\"org.nico.ratel.landlords.entity.ServerTransferData$ServerTransferDataProtoc$1\",\"org.nico.ratel.landlords.entity.ServerTransferData$ServerTransferDataProtoc\",\"io.netty.util.internal.UnpaddedInternalThreadLocalMap\",\"io.netty.util.internal.logging.InternalLoggerFactory\",\"io.netty.util.internal.logging.Slf4JLoggerFactory\",\"io.netty.util.internal.logging.AbstractInternalLogger\",\"io.netty.util.internal.logging.Slf4JLogger\",\"io.netty.util.internal.SystemPropertyUtil\",\"io.netty.util.internal.SystemPropertyUtil$1\",\"io.netty.util.internal.InternalThreadLocalMap\",\"org.nico.ratel.landlords.entity.ClientTransferData$ClientTransferDataProtoc$1\",\"org.nico.ratel.landlords.entity.ClientTransferData$ClientTransferDataProtoc\",\"io.netty.util.internal.ObjectUtil\",\"io.netty.handler.timeout.IdleStateEvent\",\"com.google.protobuf.CodedInputStream\",\"com.google.protobuf.CodedInputStream$ArrayDecoder\",\"com.google.protobuf.UnknownFieldSet$Builder\",\"org.nico.ratel.landlords.print.SimplePrinter\",\"com.google.protobuf.Field$1\",\"com.google.protobuf.Field\",\"com.google.protobuf.Descriptors$GenericDescriptor\",\"com.google.protobuf.Descriptors$FileDescriptor\",\"com.google.protobuf.Internal\",\"com.google.protobuf.AbstractProtobufList\",\"com.google.protobuf.LazyStringArrayList\",\"com.google.protobuf.IntArrayList\",\"com.google.protobuf.DescriptorProtos$FileDescriptorProto$1\",\"com.google.protobuf.DescriptorProtos$FileDescriptorProto\",\"com.google.protobuf.AbstractMessageLite$Builder\",\"com.google.protobuf.AbstractMessage$Builder\",\"com.google.protobuf.GeneratedMessageV3$Builder\",\"com.google.protobuf.DescriptorProtos$FileDescriptorProto$Builder\",\"com.google.protobuf.WireFormat\",\"com.google.protobuf.ByteString$LeafByteString\",\"com.google.protobuf.ByteString$LiteralByteString\",\"com.google.protobuf.Android\",\"com.google.protobuf.ByteString$ArraysByteArrayCopier\",\"com.google.protobuf.ByteString$2\",\"com.google.protobuf.ByteString\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$1\",\"com.google.protobuf.DescriptorProtos$DescriptorProto\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$Builder\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto$1\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Builder\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Label$1\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Label\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Type$1\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Type\",\"com.google.protobuf.SingleFieldBuilderV3\",\"com.google.protobuf.GeneratedMessageV3$ExtendableMessage\",\"com.google.protobuf.SmallSortedMap\",\"com.google.protobuf.SmallSortedMap$1\",\"com.google.protobuf.SmallSortedMap$EmptySet$1\",\"com.google.protobuf.SmallSortedMap$EmptySet$2\",\"com.google.protobuf.SmallSortedMap$EmptySet\",\"com.google.protobuf.FieldSet\",\"com.google.protobuf.DescriptorProtos$FileOptions$1\",\"com.google.protobuf.DescriptorProtos$FileOptions\",\"com.google.protobuf.GeneratedMessageV3$Builder$BuilderParentImpl\",\"com.google.protobuf.GeneratedMessageV3$1\",\"com.google.protobuf.GeneratedMessageV3$ExtendableBuilder\",\"com.google.protobuf.DescriptorProtos$FileOptions$Builder\",\"com.google.protobuf.Descriptors$DescriptorPool\",\"com.google.protobuf.Utf8$Processor\",\"com.google.protobuf.Utf8$UnsafeProcessor\",\"com.google.protobuf.UnsafeUtil$1\",\"com.google.protobuf.UnsafeUtil$MemoryAccessor\",\"com.google.protobuf.UnsafeUtil$JvmMemoryAccessor\",\"com.google.protobuf.UnsafeUtil\",\"com.google.protobuf.Utf8\",\"com.google.protobuf.Descriptors$DescriptorPool$PackageDescriptor\",\"com.google.protobuf.Descriptors$Descriptor\",\"com.google.protobuf.Descriptors\",\"com.google.protobuf.WireFormat$JavaType\",\"com.google.protobuf.WireFormat$FieldType\",\"com.google.protobuf.Descriptors$FieldDescriptor$JavaType\",\"com.google.protobuf.Descriptors$FieldDescriptor$Type\",\"com.google.protobuf.Descriptors$FieldDescriptor\",\"com.google.protobuf.DescriptorProtos$FieldOptions$1\",\"com.google.protobuf.DescriptorProtos$FieldOptions\",\"com.google.protobuf.Descriptors$1\",\"com.google.protobuf.Descriptors$DescriptorPool$DescriptorIntPair\",\"com.google.protobuf.DescriptorProtos$MessageOptions$1\",\"com.google.protobuf.DescriptorProtos$MessageOptions\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable\",\"com.google.protobuf.AnyProto\",\"com.google.protobuf.SourceContextProto\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProto$1\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProto\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProto$Builder\",\"com.google.protobuf.DescriptorProtos$EnumValueDescriptorProto$1\",\"com.google.protobuf.DescriptorProtos$EnumValueDescriptorProto\",\"com.google.protobuf.DescriptorProtos$EnumValueDescriptorProto$Builder\",\"com.google.protobuf.UnmodifiableLazyStringList\",\"com.google.protobuf.Descriptors$EnumDescriptor\",\"com.google.protobuf.Descriptors$EnumValueDescriptor\",\"com.google.protobuf.Descriptors$DescriptorPool$SearchFilter\",\"com.google.protobuf.TypeProto\",\"com.google.protobuf.UnknownFieldSet$Field$Builder\",\"com.google.protobuf.UnknownFieldSet$Field\",\"org.nico.ratel.landlords.channel.ChannelUtils\",\"com.google.protobuf.InvalidProtocolBufferException\",\"com.google.protobuf.DescriptorProtos$GeneratedCodeInfo$Annotation$1\",\"com.google.protobuf.DescriptorProtos$GeneratedCodeInfo$Annotation\",\"com.google.protobuf.Api$1\",\"com.google.protobuf.Api\",\"com.google.protobuf.Api$Builder\",\"com.google.protobuf.ExtensionRegistryLite$ObjectIntPair\",\"com.google.protobuf.CodedInputStream$StreamDecoder\",\"com.google.protobuf.ByteString$Output\",\"com.google.protobuf.ByteString$CodedBuilder\",\"com.google.protobuf.ByteOutput\",\"com.google.protobuf.CodedOutputStream\",\"com.google.protobuf.CodedOutputStream$ArrayEncoder\",\"com.google.protobuf.DescriptorProtos$UninterpretedOption$1\",\"com.google.protobuf.DescriptorProtos$UninterpretedOption\",\"com.google.protobuf.DescriptorProtos$UninterpretedOption$Builder\",\"com.google.protobuf.InvalidProtocolBufferException$InvalidWireTypeException\",\"com.google.protobuf.CodedInputStream$UnsafeDirectNioDecoder\",\"com.google.protobuf.IterableByteBufferInputStream\",\"com.google.protobuf.DescriptorProtos$UninterpretedOption$NamePart$1\",\"com.google.protobuf.DescriptorProtos$UninterpretedOption$NamePart\",\"com.google.protobuf.DescriptorProtos$UninterpretedOption$NamePart$Builder\",\"org.nico.ratel.landlords.entity.ServerTransferData$ServerTransferDataProtoc$Builder\",\"com.google.protobuf.Any$1\",\"com.google.protobuf.Any\",\"com.google.protobuf.Any$Builder\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo$Location$1\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo$Location\",\"org.nico.ratel.landlords.entity.Msg\",\"io.netty.buffer.DefaultByteBufHolder\",\"io.netty.handler.codec.http.websocketx.WebSocketFrame\",\"io.netty.handler.codec.http.websocketx.TextWebSocketFrame\",\"com.google.gson.internal.Streams\",\"com.google.gson.stream.JsonWriter\",\"com.google.gson.Gson$FutureTypeAdapter\",\"com.google.gson.internal.ConstructorConstructor$3\",\"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter\",\"com.google.gson.internal.Primitives\",\"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField\",\"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1\",\"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper\",\"io.netty.util.CharsetUtil\",\"io.netty.util.ResourceLeakDetector$Level\",\"io.netty.util.internal.EmptyArrays\",\"io.netty.util.ResourceLeakDetector\",\"io.netty.buffer.AbstractByteBufAllocator\",\"io.netty.util.internal.PlatformDependent0$1\",\"io.netty.util.internal.ReflectionUtil\",\"io.netty.util.internal.PlatformDependent0$2\",\"io.netty.util.internal.PlatformDependent0$3\",\"io.netty.util.internal.PlatformDependent0$4\",\"io.netty.util.internal.PlatformDependent0$5\",\"io.netty.util.internal.PlatformDependent0$10\",\"io.netty.util.internal.PlatformDependent0\",\"io.netty.util.internal.PlatformDependent$1\",\"io.netty.util.internal.PlatformDependent$2\",\"io.netty.util.internal.CleanerJava6\",\"io.netty.util.internal.PlatformDependent\",\"io.netty.buffer.ByteBuf\",\"io.netty.buffer.EmptyByteBuf\",\"io.netty.util.internal.StringUtil\",\"io.netty.buffer.UnpooledByteBufAllocator$UnpooledByteBufAllocatorMetric\",\"io.netty.util.internal.LongAdderCounter\",\"io.netty.buffer.UnpooledByteBufAllocator\",\"io.netty.buffer.Unpooled\",\"io.netty.util.concurrent.FastThreadLocal\",\"io.netty.buffer.ByteBufUtil$1\",\"io.netty.util.NettyRuntime$AvailableProcessorsHolder\",\"io.netty.util.NettyRuntime\",\"io.netty.buffer.PooledByteBufAllocator$PoolThreadLocalCache\",\"io.netty.buffer.PoolArena\",\"io.netty.buffer.PoolArena$DirectArena\",\"io.netty.buffer.PoolSubpage\",\"io.netty.buffer.PoolChunkList\",\"io.netty.buffer.PooledByteBufAllocatorMetric\",\"io.netty.buffer.PooledByteBufAllocator\",\"io.netty.buffer.ByteBufUtil$2\",\"io.netty.buffer.ByteBufUtil\",\"io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory\",\"io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory$1\",\"io.netty.util.ResourceLeakDetectorFactory\",\"io.netty.buffer.AbstractByteBuf\",\"io.netty.buffer.AbstractReferenceCountedByteBuf\",\"io.netty.buffer.UnpooledHeapByteBuf\",\"io.netty.buffer.UnpooledUnsafeHeapByteBuf\",\"io.netty.buffer.UnpooledByteBufAllocator$InstrumentedUnpooledUnsafeHeapByteBuf\",\"io.netty.util.internal.MathUtil\",\"com.google.protobuf.ListValue$Builder\",\"com.google.protobuf.DescriptorProtos$MessageOptions$Builder\",\"com.google.protobuf.DescriptorProtos$OneofDescriptorProto$1\",\"com.google.protobuf.DescriptorProtos$OneofDescriptorProto\",\"com.google.protobuf.DescriptorProtos$OneofDescriptorProto$Builder\",\"com.google.protobuf.Descriptors$OneofDescriptor\",\"com.google.protobuf.StructProto\",\"com.google.protobuf.DynamicMessage\",\"com.google.protobuf.DynamicMessage$Builder\",\"com.google.protobuf.MessageReflection\",\"com.google.protobuf.MessageReflection$BuilderAdapter\",\"com.google.protobuf.AbstractMessageLite$Builder$LimitedInputStream\",\"com.google.protobuf.Field$Builder\",\"com.google.protobuf.ByteString$AbstractByteIterator\",\"com.google.protobuf.ByteString$1\",\"org.nico.ratel.landlords.entity.ClientTransferData$1\",\"org.nico.ratel.landlords.entity.ClientTransferData\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable$SingularFieldAccessor\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable$SingularStringFieldAccessor\",\"com.google.protobuf.Descriptors$FileDescriptor$Syntax\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable$SingularFieldAccessor$ReflectionInvoker\",\"org.nico.ratel.landlords.entity.ClientTransferData$ClientTransferDataProtoc$Builder\",\"com.google.protobuf.DescriptorProtos$ExtensionRangeOptions$Builder\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ExtensionRange$1\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ExtensionRange\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ExtensionRange$Builder\",\"com.google.protobuf.DescriptorProtos$FieldOptions$Builder\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ReservedRange$1\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ReservedRange\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ReservedRange$Builder\",\"com.google.protobuf.DescriptorProtos$FileOptions$OptimizeMode$1\",\"com.google.protobuf.DescriptorProtos$FileOptions$OptimizeMode\",\"com.google.protobuf.DescriptorProtos\",\"com.google.protobuf.MapEntry\",\"com.google.protobuf.MapEntryLite$Metadata\",\"com.google.protobuf.MapEntry$Metadata\",\"com.google.protobuf.MapEntry$Metadata$1\",\"com.google.protobuf.ExtensionLite\",\"com.google.protobuf.Extension\",\"com.google.protobuf.GeneratedMessage$GeneratedExtension\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo$Location$Builder\",\"com.google.protobuf.Method$1\",\"com.google.protobuf.Method\",\"com.google.protobuf.CodedOutputStream$AbstractBufferedEncoder\",\"com.google.protobuf.CodedOutputStream$OutputStreamEncoder\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo$1\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo\",\"com.google.protobuf.BytesValue$1\",\"com.google.protobuf.BytesValue\",\"com.google.protobuf.Timestamp$1\",\"com.google.protobuf.Timestamp\",\"com.google.protobuf.Timestamp$Builder\",\"com.google.protobuf.DescriptorProtos$ServiceDescriptorProto$1\",\"com.google.protobuf.DescriptorProtos$ServiceDescriptorProto\",\"com.google.protobuf.DescriptorProtos$ServiceDescriptorProto$Builder\",\"com.google.protobuf.TextFormat$Parser\",\"com.google.protobuf.TextFormat$Parser$Builder\",\"com.google.protobuf.TextFormat$Parser$SingularOverwritePolicy\",\"com.google.protobuf.TypeRegistry\",\"com.google.protobuf.TypeRegistry$EmptyTypeRegistryHolder\",\"com.google.protobuf.TextFormat\",\"com.google.protobuf.TextFormat$Printer\",\"com.google.protobuf.TextFormat$TextGenerator\",\"com.google.protobuf.DescriptorProtos$GeneratedCodeInfo$Annotation$Builder\",\"com.google.protobuf.Mixin$Builder\",\"com.google.protobuf.ApiProto\",\"com.google.protobuf.DescriptorProtos$MethodDescriptorProto$1\",\"com.google.protobuf.DescriptorProtos$MethodDescriptorProto\");\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/handler/SecondProtobufCodec_ESTest.java",
        "class": "SecondProtobufCodec_ESTest",
        "name": "test0",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test0() throws Throwable {\n  SecondProtobufCodec secondProtobufCodec0\u003dnew SecondProtobufCodec();\n  ChannelHandlerContext channelHandlerContext0\u003dmock(ChannelHandlerContext.class,new ViolatedAssumptionAnswer());\n  try {\n    secondProtobufCodec0.encode(channelHandlerContext0,(MessageLite)null,(List\u003cObject\u003e)null);\n    fail(\"Expecting exception: NullPointerException\");\n  }\n catch (  NullPointerException e) {\n    verifyException(\"org.nico.ratel.landlords.client.handler.SecondProtobufCodec\",e);\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/handler/SecondProtobufCodec_ESTest.java",
        "class": "SecondProtobufCodec_ESTest",
        "name": "test1",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test1() throws Throwable {\n  SecondProtobufCodec secondProtobufCodec0\u003dnew SecondProtobufCodec();\n  ChannelHandlerContext channelHandlerContext0\u003dmock(ChannelHandlerContext.class,new ViolatedAssumptionAnswer());\n  byte[] byteArray0\u003dnew byte[6];\n  ByteArrayInputStream byteArrayInputStream0\u003dnew ByteArrayInputStream(byteArray0,(byte)(-108),(byte)(-108));\n  ExtensionRegistryLite extensionRegistryLite0\u003dExtensionRegistryLite.newInstance();\n  Method method0\u003dMethod.parseFrom((InputStream)byteArrayInputStream0,extensionRegistryLite0);\n  ByteString byteString0\u003dmethod0.getNameBytes();\n  ClientTransferData.ClientTransferDataProtoc clientTransferData_ClientTransferDataProtoc0\u003dClientTransferData.ClientTransferDataProtoc.parseFrom(byteString0,extensionRegistryLite0);\n  try {\n    secondProtobufCodec0.decode(channelHandlerContext0,clientTransferData_ClientTransferDataProtoc0,(List\u003cObject\u003e)null);\n    fail(\"Expecting exception: NullPointerException\");\n  }\n catch (  NullPointerException e) {\n    verifyException(\"org.nico.ratel.landlords.client.handler.SecondProtobufCodec\",e);\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/handler/SecondProtobufCodec_ESTest.java",
        "class": "SecondProtobufCodec_ESTest",
        "name": "test2",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test2() throws Throwable {\n  SecondProtobufCodec secondProtobufCodec0\u003dnew SecondProtobufCodec();\n  ChannelHandlerContext channelHandlerContext0\u003dmock(ChannelHandlerContext.class,new ViolatedAssumptionAnswer());\n  LinkedBlockingDeque\u003cDescriptorProtos.ExtensionRangeOptions\u003e linkedBlockingDeque0\u003dnew LinkedBlockingDeque\u003cDescriptorProtos.ExtensionRangeOptions\u003e();\n  Vector\u003cObject\u003e vector0\u003dnew Vector\u003cObject\u003e(linkedBlockingDeque0);\n  secondProtobufCodec0.decode(channelHandlerContext0,(ClientTransferData.ClientTransferDataProtoc)null,vector0);\n  assertEquals(1,vector0.capacity());\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/handler/SecondProtobufCodec_ESTest.java",
        "class": "SecondProtobufCodec_ESTest",
        "name": "test3",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test3() throws Throwable {\n  SecondProtobufCodec secondProtobufCodec0\u003dnew SecondProtobufCodec();\n  LinkedBlockingDeque\u003cDescriptorProtos.ExtensionRangeOptions\u003e linkedBlockingDeque0\u003dnew LinkedBlockingDeque\u003cDescriptorProtos.ExtensionRangeOptions\u003e();\n  Vector\u003cObject\u003e vector0\u003dnew Vector\u003cObject\u003e(linkedBlockingDeque0);\n  ChannelHandlerContext channelHandlerContext0\u003dmock(ChannelHandlerContext.class,new ViolatedAssumptionAnswer());\n  secondProtobufCodec0.encode(channelHandlerContext0,(MessageLite)null,vector0);\n  assertEquals(1,vector0.size());\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/handler/SecondProtobufCodec_ESTest_scaffolding.java",
        "class": "SecondProtobufCodec_ESTest_scaffolding",
        "name": "initEvoSuiteFramework",
        "return_type": "void",
        "modifiers": "@BeforeClass public static",
        "parameters": [],
        "raw": "@BeforeClass public static void initEvoSuiteFramework(){\n  org.evosuite.runtime.RuntimeSettings.className\u003d\"org.nico.ratel.landlords.client.handler.SecondProtobufCodec\";\n  org.evosuite.runtime.GuiSupport.initialize();\n  org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads\u003d100;\n  org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop\u003d10000;\n  org.evosuite.runtime.RuntimeSettings.mockSystemIn\u003dtrue;\n  org.evosuite.runtime.RuntimeSettings.sandboxMode\u003dorg.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED;\n  org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT();\n  org.evosuite.runtime.classhandling.JDKClassResetter.init();\n  setSystemProperties();\n  initializeClasses();\n  org.evosuite.runtime.Runtime.getInstance().resetRuntime();\n  try {\n    initMocksToAvoidTimeoutsInTheTests();\n  }\n catch (  ClassNotFoundException e) {\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/handler/SecondProtobufCodec_ESTest_scaffolding.java",
        "class": "SecondProtobufCodec_ESTest_scaffolding",
        "name": "clearEvoSuiteFramework",
        "return_type": "void",
        "modifiers": "@AfterClass public static",
        "parameters": [],
        "raw": "@AfterClass public static void clearEvoSuiteFramework(){\n  Sandbox.resetDefaultSecurityManager();\n  java.lang.System.setProperties((java.util.Properties)defaultProperties.clone());\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/handler/SecondProtobufCodec_ESTest_scaffolding.java",
        "class": "SecondProtobufCodec_ESTest_scaffolding",
        "name": "initTestCase",
        "return_type": "void",
        "modifiers": "@Before public",
        "parameters": [],
        "raw": "@Before public void initTestCase(){\n  threadStopper.storeCurrentThreads();\n  threadStopper.startRecordingTime();\n  org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler();\n  org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode();\n  setSystemProperties();\n  org.evosuite.runtime.GuiSupport.setHeadless();\n  org.evosuite.runtime.Runtime.getInstance().resetRuntime();\n  org.evosuite.runtime.agent.InstrumentingAgent.activate();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/handler/SecondProtobufCodec_ESTest_scaffolding.java",
        "class": "SecondProtobufCodec_ESTest_scaffolding",
        "name": "doneWithTestCase",
        "return_type": "void",
        "modifiers": "@After public",
        "parameters": [],
        "raw": "@After public void doneWithTestCase(){\n  threadStopper.killAndJoinClientThreads();\n  org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks();\n  org.evosuite.runtime.classhandling.JDKClassResetter.reset();\n  resetClasses();\n  org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode();\n  org.evosuite.runtime.agent.InstrumentingAgent.deactivate();\n  org.evosuite.runtime.GuiSupport.restoreHeadlessMode();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/handler/SecondProtobufCodec_ESTest_scaffolding.java",
        "class": "SecondProtobufCodec_ESTest_scaffolding",
        "name": "setSystemProperties",
        "return_type": "void",
        "modifiers": "public static",
        "parameters": [],
        "raw": "public static void setSystemProperties(){\n  java.lang.System.setProperties((java.util.Properties)defaultProperties.clone());\n  java.lang.System.setProperty(\"file.encoding\",\"UTF-8\");\n  java.lang.System.setProperty(\"java.awt.headless\",\"true\");\n  java.lang.System.setProperty(\"java.io.tmpdir\",\"/tmp\");\n  java.lang.System.setProperty(\"user.country\",\"US\");\n  java.lang.System.setProperty(\"user.dir\",\"/home/lvdthieu/code-gen/ratel/landlords-client\");\n  java.lang.System.setProperty(\"user.home\",\"/home/lvdthieu\");\n  java.lang.System.setProperty(\"user.language\",\"en\");\n  java.lang.System.setProperty(\"user.name\",\"lvdthieu\");\n  java.lang.System.setProperty(\"user.timezone\",\"Asia/Ho_Chi_Minh\");\n  java.lang.System.setProperty(\"sun.arch.data.model\",\"64\");\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/handler/SecondProtobufCodec_ESTest_scaffolding.java",
        "class": "SecondProtobufCodec_ESTest_scaffolding",
        "name": "initializeClasses",
        "return_type": "void",
        "modifiers": "private static",
        "parameters": [],
        "raw": "private static void initializeClasses(){\n  org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(SecondProtobufCodec_ESTest_scaffolding.class.getClassLoader(),\"io.netty.channel.unix.DomainSocketChannelConfig\",\"io.netty.channel.ChannelInboundHandlerAdapter\",\"io.netty.util.internal.PlatformDependent0\",\"com.google.protobuf.CodedInputStream$UnsafeDirectNioDecoder\",\"com.google.protobuf.DescriptorProtos$FileDescriptorSet$1\",\"com.google.protobuf.Api\",\"io.netty.channel.unix.Errors$NativeConnectException\",\"com.google.protobuf.EnumValue$Builder\",\"io.netty.util.internal.ThreadLocalRandom\",\"io.netty.channel.MaxMessagesRecvByteBufAllocator\",\"com.google.protobuf.DescriptorProtos$EnumOptionsOrBuilder\",\"com.google.protobuf.ByteString$LeafByteString\",\"io.netty.channel.ChannelOutboundBuffer$MessageProcessor\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable$SingularStringFieldAccessor\",\"io.netty.channel.socket.ServerSocketChannelConfig\",\"io.netty.util.internal.TypeParameterMatcher$1\",\"io.netty.channel.epoll.EpollRecvByteAllocatorStreamingHandle\",\"com.google.protobuf.GeneratedMessageV3$ExtensionDescriptorRetriever\",\"io.netty.util.concurrent.AbstractScheduledEventExecutor\",\"com.google.protobuf.SourceContext$1\",\"com.google.protobuf.Any\",\"io.netty.buffer.PoolThreadCache$MemoryRegionCache$Entry\",\"com.google.protobuf.DoubleValue$1\",\"com.google.protobuf.Descriptors$DescriptorPool$SearchFilter\",\"io.netty.channel.DefaultMaxMessagesRecvByteBufAllocator\",\"io.netty.util.internal.PlatformDependent$1\",\"io.netty.util.internal.PlatformDependent$2\",\"com.google.protobuf.DescriptorProtos$EnumValueOptions$1\",\"io.netty.util.internal.shaded.org.jctools.queues.LinkedQueueNode\",\"io.netty.buffer.FixedCompositeByteBuf\",\"io.netty.channel.kqueue.KQueueDomainSocketChannelConfig\",\"io.netty.util.internal.logging.AbstractInternalLogger\",\"com.google.protobuf.GeneratedMessageV3$1\",\"com.google.protobuf.FieldMaskOrBuilder\",\"io.netty.util.internal.LongAdderCounter\",\"io.netty.channel.AbstractChannelHandlerContext\",\"io.netty.buffer.PoolArena$SizeClass\",\"com.google.protobuf.ValueOrBuilder\",\"io.netty.channel.ChannelOutboundHandler\",\"com.google.protobuf.Descriptors$DescriptorPool\",\"io.netty.util.internal.UnpaddedInternalThreadLocalMap\",\"com.google.protobuf.Internal$BooleanList\",\"io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory\",\"com.google.protobuf.Enum$1\",\"io.netty.util.ResourceLeakDetector$LeakEntry\",\"io.netty.util.concurrent.DefaultEventExecutor\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable$FieldAccessor\",\"com.google.protobuf.Field$Builder\",\"com.google.protobuf.Writer\",\"io.netty.util.HashingStrategy$1\",\"io.netty.util.concurrent.DefaultThreadFactory\",\"com.google.protobuf.DescriptorProtos$OneofDescriptorProtoOrBuilder\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable$MapFieldAccessor\",\"io.netty.buffer.ByteBufAllocator\",\"io.netty.channel.embedded.EmbeddedChannel$State\",\"io.netty.channel.epoll.AbstractEpollStreamChannel\",\"io.netty.channel.kqueue.AbstractKQueueChannel\",\"com.google.protobuf.DurationOrBuilder\",\"io.netty.channel.embedded.EmbeddedChannel$EmbeddedChannelPipeline\",\"io.netty.buffer.SwappedByteBuf\",\"io.netty.channel.socket.DatagramPacket\",\"io.netty.util.Recycler$Handle\",\"com.google.protobuf.IntArrayList\",\"com.google.protobuf.DescriptorProtos$GeneratedCodeInfo\",\"io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceInTask\",\"io.netty.buffer.AbstractByteBufAllocator\",\"com.google.protobuf.Int32Value$Builder\",\"io.netty.buffer.WrappedUnpooledUnsafeDirectByteBuf\",\"io.netty.util.internal.PriorityQueueNode\",\"com.google.protobuf.DescriptorProtos$FileDescriptorProto$1\",\"com.google.protobuf.Writer$FieldOrder\",\"io.netty.channel.DefaultFileRegion\",\"io.netty.channel.kqueue.KQueueRecvByteAllocatorHandle\",\"com.google.protobuf.Struct$Builder\",\"com.google.protobuf.BytesValueOrBuilder\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo$Builder\",\"com.google.protobuf.Duration$1\",\"com.google.protobuf.DescriptorProtos$ServiceDescriptorProtoOrBuilder\",\"io.netty.util.internal.InternalThreadLocalMap\",\"com.google.protobuf.DescriptorProtos$UninterpretedOption$1\",\"io.netty.channel.ChannelHandlerContext\",\"io.netty.util.HashingStrategy\",\"io.netty.channel.FixedRecvByteBufAllocator\",\"io.netty.channel.epoll.EpollRecvByteAllocatorHandle\",\"io.netty.util.concurrent.BlockingOperationException\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueProducerLimitField\",\"com.google.protobuf.Option$Builder\",\"io.netty.channel.FileRegion\",\"io.netty.handler.codec.CodecOutputList\",\"com.google.protobuf.ExtensionRegistryFactory\",\"com.google.protobuf.ExtensionRegistry$DescriptorIntPair\",\"io.netty.channel.embedded.EmbeddedChannelId\",\"com.google.protobuf.MessageLiteOrBuilder\",\"io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Supplier\",\"io.netty.channel.Channel$Unsafe\",\"com.google.protobuf.MessageLite\",\"com.google.protobuf.DescriptorProtos$EnumValueDescriptorProtoOrBuilder\",\"com.google.protobuf.UnsafeUtil$1\",\"com.google.protobuf.CodedInputStream\",\"com.google.protobuf.Schema\",\"io.netty.channel.ChannelOutboundBuffer$Entry$1\",\"io.netty.channel.unix.Errors$NativeIoException\",\"com.google.protobuf.TextFormat$InvalidEscapeSequenceException\",\"com.google.protobuf.EnumValue\",\"io.netty.channel.epoll.EpollDomainSocketChannel$EpollDomainUnsafe\",\"org.nico.ratel.landlords.entity.ClientTransferData\",\"io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory$1\",\"com.google.protobuf.GeneratedMessageV3$ExtendableMessage$ExtensionWriter\",\"io.netty.channel.unix.DomainSocketReadMode\",\"io.netty.util.CharsetUtil\",\"io.netty.util.concurrent.GenericProgressiveFutureListener\",\"com.google.protobuf.Field$Kind\",\"io.netty.channel.AbstractChannel$AnnotatedSocketException\",\"io.netty.buffer.UnsafeDirectSwappedByteBuf\",\"io.netty.util.NettyRuntime\",\"io.netty.buffer.PooledSlicedByteBuf\",\"io.netty.channel.ChannelPipeline\",\"io.netty.channel.ChannelException\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$1\",\"com.google.protobuf.ListValue\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$Builder\",\"io.netty.util.internal.PlatformDependent0$10\",\"io.netty.channel.ChannelOption$1\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseLinkedAtomicQueuePad0\",\"io.netty.util.concurrent.RejectedExecutionHandlers$1\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseLinkedAtomicQueuePad1\",\"com.google.protobuf.BoolValue\",\"io.netty.util.concurrent.CompleteFuture\",\"io.netty.util.Recycler$DefaultHandle\",\"io.netty.channel.epoll.EpollDatagramChannel\",\"io.netty.channel.epoll.EpollSocketChannel\",\"com.google.protobuf.SourceContext$Builder\",\"io.netty.channel.unix.DomainSocketChannel\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueMidPad\",\"com.google.protobuf.Value$1\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseLinkedAtomicQueuePad2\",\"com.google.protobuf.DescriptorProtos$MethodOptions$IdempotencyLevel$1\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable\",\"com.google.protobuf.MessageReflection\",\"io.netty.util.ByteProcessor$IndexOfProcessor\",\"io.netty.util.concurrent.SingleThreadEventExecutor\",\"com.google.protobuf.DescriptorProtos$ExtensionRangeOptionsOrBuilder\",\"io.netty.util.ByteProcessor\",\"com.google.protobuf.DescriptorProtos$FileDescriptorProtoOrBuilder\",\"io.netty.util.internal.shaded.org.jctools.queues.ConcurrentCircularArrayQueueL0Pad\",\"com.google.protobuf.DescriptorProtos$FieldOptionsOrBuilder\",\"com.google.protobuf.FloatValue$Builder\",\"io.netty.channel.RecvByteBufAllocator$Handle\",\"com.google.protobuf.Descriptors$EnumValueDescriptor\",\"com.google.protobuf.DescriptorProtos$ExtensionRangeOptions\",\"com.google.protobuf.AbstractParser\",\"com.google.protobuf.DescriptorProtos$GeneratedCodeInfo$Annotation$Builder\",\"com.google.protobuf.CodedInputStream$IterableDirectByteBufferDecoder\",\"com.google.protobuf.GeneratedMessageV3$Builder\",\"com.google.protobuf.GeneratedMessageV3$ExtendableBuilder\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable$SingularFieldAccessor\",\"io.netty.channel.DefaultChannelPipeline$TailContext\",\"io.netty.buffer.PoolSubpageMetric\",\"io.netty.channel.AbstractServerChannel\",\"io.netty.channel.kqueue.AbstractKQueueStreamChannel\",\"com.google.protobuf.DescriptorProtos$FileOptions\",\"com.google.protobuf.AbstractMessageLite\",\"com.google.protobuf.DescriptorProtos$GeneratedCodeInfoOrBuilder\",\"com.google.protobuf.DescriptorProtos$UninterpretedOptionOrBuilder\",\"io.netty.channel.socket.ChannelOutputShutdownException\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProtoOrBuilder\",\"com.google.protobuf.Method$Builder\",\"io.netty.channel.ChannelDuplexHandler\",\"com.google.protobuf.Int32ValueOrBuilder\",\"com.google.protobuf.Option\",\"com.google.protobuf.LazyFieldLite\",\"com.google.protobuf.Utf8\",\"com.google.protobuf.UnsafeUtil$Android32MemoryAccessor\",\"com.google.protobuf.Value$Builder\",\"io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf$1\",\"com.google.protobuf.DescriptorProtos$FileDescriptorSetOrBuilder\",\"io.netty.buffer.UnpooledDuplicatedByteBuf\",\"com.google.protobuf.LazyStringList\",\"com.google.protobuf.Utf8$UnsafeProcessor\",\"io.netty.buffer.AbstractDerivedByteBuf\",\"com.google.protobuf.DescriptorProtos$GeneratedCodeInfo$Builder\",\"com.google.protobuf.Option$1\",\"io.netty.buffer.UnpooledSlicedByteBuf\",\"com.google.protobuf.Descriptors$FieldDescriptor$JavaType\",\"com.google.protobuf.DescriptorProtos$ServiceOptions$1\",\"io.netty.buffer.ByteBuf\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.LinkedQueueAtomicNode\",\"com.google.protobuf.Descriptors$EnumDescriptor\",\"com.google.protobuf.WireFormat$JavaType\",\"com.google.protobuf.Descriptors$Descriptor\",\"io.netty.util.NetUtil\",\"io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf\",\"io.netty.buffer.WrappedByteBuf\",\"io.netty.channel.SingleThreadEventLoop$NonWakeupRunnable\",\"com.google.protobuf.Field\",\"com.google.protobuf.DescriptorProtos$ExtensionRangeOptions$Builder\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueL1Pad\",\"com.google.protobuf.Mixin\",\"com.google.protobuf.DescriptorProtos$EnumValueDescriptorProto$Builder\",\"io.netty.channel.kqueue.KQueueDomainSocketChannel$KQueueDomainUnsafe\",\"com.google.protobuf.Type\",\"com.google.protobuf.DescriptorProtos$OneofDescriptorProto\",\"io.netty.util.AttributeMap\",\"io.netty.util.internal.Cleaner\",\"io.netty.util.concurrent.ScheduledFuture\",\"com.google.protobuf.StringValue\",\"com.google.protobuf.Struct\",\"io.netty.buffer.CompositeByteBuf$Component\",\"io.netty.channel.socket.DatagramChannel\",\"io.netty.channel.unix.DatagramSocketAddress\",\"io.netty.channel.unix.DomainSocketAddress\",\"com.google.protobuf.TimestampOrBuilder\",\"com.google.protobuf.Enum$Builder\",\"io.netty.util.internal.TypeParameterMatcher\",\"com.google.protobuf.InvalidProtocolBufferException\",\"com.google.protobuf.Descriptors$MethodDescriptor\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto$1\",\"com.google.protobuf.GeneratedMessageLite$GeneratedExtension\",\"io.netty.channel.AbstractChannelHandlerContext$WriteTask\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ReservedRangeOrBuilder\",\"com.google.protobuf.DescriptorProtos$MethodDescriptorProto$Builder\",\"com.google.protobuf.DescriptorProtos$MessageOptions$1\",\"com.google.protobuf.BoolValue$1\",\"io.netty.util.internal.logging.InternalLogger\",\"io.netty.channel.embedded.EmbeddedChannel$EmbeddedUnsafe\",\"com.google.protobuf.DescriptorProtos$ExtensionRangeOptions$1\",\"io.netty.buffer.AbstractReferenceCountedByteBuf\",\"io.netty.buffer.UnpooledHeapByteBuf\",\"com.google.protobuf.Enum\",\"io.netty.util.concurrent.EventExecutor\",\"com.google.protobuf.DescriptorProtos$UninterpretedOption$Builder\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueueProducerNodeRef\",\"io.netty.channel.SucceededChannelFuture\",\"io.netty.channel.ChannelOption\",\"io.netty.util.internal.ThreadLocalRandom$1\",\"io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Consumer\",\"io.netty.channel.DefaultChannelPipeline$PendingHandlerAddedTask\",\"io.netty.channel.kqueue.KQueueSocketChannel\",\"io.netty.channel.unix.LimitsStaticallyReferencedJniMethods\",\"com.google.protobuf.Value\",\"com.google.protobuf.DescriptorProtos$MethodDescriptorProto$1\",\"com.google.protobuf.MapEntryLite$Metadata\",\"io.netty.util.concurrent.AbstractFuture\",\"com.google.protobuf.ListValue$1\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueL2Pad\",\"com.google.protobuf.Descriptors$FileDescriptor$InternalDescriptorAssigner\",\"com.google.protobuf.Method$1\",\"com.google.protobuf.UnsafeUtil$JvmMemoryAccessor\",\"com.google.protobuf.UInt64Value$1\",\"io.netty.util.ReferenceCounted\",\"com.google.protobuf.UnmodifiableLazyStringList\",\"io.netty.buffer.PooledDuplicatedByteBuf$1\",\"com.google.protobuf.DescriptorProtos$EnumOptions\",\"io.netty.util.ResourceLeakDetectorFactory\",\"com.google.protobuf.Syntax\",\"org.nico.ratel.landlords.entity.ClientTransferData$1\",\"com.google.protobuf.CodedOutputStream$UnsafeDirectNioEncoder\",\"io.netty.channel.kqueue.KQueueChannelConfig\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfoOrBuilder\",\"io.netty.channel.RecvByteBufAllocator$ExtendedHandle\",\"io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf$1\",\"io.netty.channel.ChannelId\",\"io.netty.buffer.CompositeByteBuf$ComponentList\",\"com.google.protobuf.SourceContext\",\"com.google.protobuf.CodedOutputStream$ArrayEncoder\",\"io.netty.channel.MessageSizeEstimator\",\"com.google.protobuf.UnknownFieldSet$Parser\",\"com.google.protobuf.AbstractProtobufList\",\"io.netty.channel.epoll.EpollDomainSocketChannel\",\"com.google.protobuf.DescriptorProtos$FieldOptions$JSType$1\",\"io.netty.channel.AbstractChannel$AbstractUnsafe\",\"io.netty.channel.epoll.EpollChannelConfig\",\"io.netty.buffer.UnpooledUnsafeNoCleanerDirectByteBuf\",\"io.netty.buffer.PoolThreadCache\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueL3Pad\",\"com.google.protobuf.TypeProto\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable$RepeatedEnumFieldAccessor\",\"io.netty.util.AsciiString$2\",\"io.netty.handler.codec.EncoderException\",\"io.netty.util.internal.PriorityQueue\",\"io.netty.handler.codec.MessageToMessageEncoder\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue\",\"io.netty.channel.ChannelFutureListener$3\",\"io.netty.channel.ChannelFutureListener$2\",\"io.netty.channel.ChannelFutureListener$1\",\"com.google.protobuf.DescriptorProtos$ServiceOptions$Builder\",\"io.netty.util.AsciiString$1\",\"io.netty.util.concurrent.AbstractEventExecutor\",\"com.google.protobuf.ByteString$ByteIterator\",\"io.netty.channel.ChannelProgressivePromise\",\"com.google.protobuf.ByteString$LiteralByteString\",\"com.google.protobuf.InvalidProtocolBufferException$InvalidWireTypeException\",\"io.netty.channel.AbstractServerChannel$DefaultServerUnsafe\",\"io.netty.util.concurrent.GenericFutureListener\",\"com.google.protobuf.Field$Kind$1\",\"com.google.protobuf.Utf8$UnpairedSurrogateException\",\"com.google.protobuf.UInt64Value$Builder\",\"com.google.protobuf.FieldOrBuilder\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProto$1\",\"com.google.protobuf.Internal$LongList\",\"com.google.protobuf.MapField$Converter\",\"com.google.protobuf.MapField\",\"io.netty.util.concurrent.GlobalEventExecutor$2\",\"io.netty.util.concurrent.GlobalEventExecutor$1\",\"io.netty.util.AttributeKey\",\"com.google.protobuf.BoolValueOrBuilder\",\"io.netty.util.concurrent.RejectedExecutionHandlers\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseLinkedAtomicQueueConsumerNodeRef\",\"io.netty.util.Recycler$WeakOrderQueue$Head\",\"io.netty.channel.local.LocalServerChannel\",\"com.google.protobuf.DescriptorProtos$MethodOptions$1\",\"io.netty.util.concurrent.PromiseNotifier\",\"com.google.protobuf.Message$Builder\",\"io.netty.util.UncheckedBooleanSupplier$2\",\"io.netty.util.UncheckedBooleanSupplier$1\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueProducerIndexField\",\"com.google.protobuf.DescriptorProtos$ServiceDescriptorProto$Builder\",\"io.netty.handler.codec.CodecException\",\"com.google.protobuf.UnsafeUtil$Android64MemoryAccessor\",\"com.google.protobuf.DescriptorProtos$EnumValueOptions\",\"com.google.protobuf.DescriptorProtos$ServiceOptions\",\"io.netty.util.internal.logging.Slf4JLoggerFactory\",\"io.netty.channel.ChannelHandler$Sharable\",\"com.google.protobuf.Any$Builder\",\"com.google.protobuf.ListValueOrBuilder\",\"io.netty.util.concurrent.DefaultPromise$CauseHolder\",\"com.google.protobuf.ByteString$CodedBuilder\",\"io.netty.channel.ServerChannel\",\"io.netty.handler.codec.MessageToMessageCodec\",\"com.google.protobuf.Descriptors$FieldDescriptor$Type\",\"io.netty.util.AttributeKey$1\",\"com.google.protobuf.DescriptorProtos$OneofDescriptorProto$1\",\"io.netty.buffer.UnpooledDirectByteBuf\",\"io.netty.util.concurrent.ThreadProperties\",\"com.google.protobuf.CodedOutputStream$ByteOutputEncoder\",\"com.google.protobuf.Duration$Builder\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicReferenceArrayQueue\",\"org.nico.ratel.landlords.client.handler.SecondProtobufCodec\",\"com.google.protobuf.RepeatedFieldBuilderV3\",\"io.netty.util.ResourceLeakDetector$Level\",\"com.google.protobuf.UInt64Value\",\"io.netty.buffer.UnpooledByteBufAllocator$InstrumentedUnpooledHeapByteBuf\",\"io.netty.util.concurrent.FastThreadLocalRunnable\",\"io.netty.util.concurrent.PromiseTask\",\"io.netty.channel.MessageSizeEstimator$Handle\",\"io.netty.channel.epoll.AbstractEpollChannel\",\"io.netty.util.internal.TypeParameterMatcher$ReflectiveMatcher\",\"com.google.protobuf.AnyProto\",\"com.google.protobuf.WireFormat\",\"com.google.protobuf.BytesValue$Builder\",\"com.google.protobuf.Int32Value\",\"io.netty.util.concurrent.Promise\",\"com.google.protobuf.ExtensionRegistryLite$ExtensionClassHolder\",\"io.netty.channel.unix.FileDescriptor\",\"io.netty.buffer.ByteBufAllocatorMetric\",\"io.netty.channel.AbstractChannel$AnnotatedConnectException\",\"io.netty.buffer.ReadOnlyUnsafeDirectByteBuf\",\"io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask\",\"io.netty.util.internal.shaded.org.jctools.util.UnsafeAccess\",\"io.netty.channel.epoll.EpollSocketChannel$EpollSocketChannelUnsafe\",\"io.netty.buffer.AdvancedLeakAwareCompositeByteBuf\",\"io.netty.channel.DefaultAddressedEnvelope\",\"com.google.protobuf.MapEntry\",\"com.google.protobuf.DescriptorProtos$FileDescriptorProto$Builder\",\"io.netty.util.ConstantPool\",\"com.google.protobuf.Descriptors$DescriptorPool$DescriptorIntPair\",\"com.google.protobuf.GeneratedMessage$ExtensionDescriptorRetriever\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProto$EnumReservedRange$1\",\"io.netty.util.BooleanSupplier\",\"com.google.protobuf.GeneratedMessageV3$UnusedPrivateParameter\",\"org.nico.ratel.landlords.entity.ClientTransferData$ClientTransferDataProtocOrBuilder\",\"io.netty.channel.DefaultMessageSizeEstimator$HandleImpl\",\"io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueue\",\"com.google.protobuf.DescriptorProtos$EnumValueOptions$Builder\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProto$EnumReservedRangeOrBuilder\",\"io.netty.channel.DefaultChannelPromise\",\"com.google.protobuf.DescriptorProtos$EnumOptions$1\",\"io.netty.buffer.PoolArena\",\"io.netty.handler.codec.CodecOutputList$1\",\"io.netty.util.AsciiString$CharEqualityComparator\",\"io.netty.util.internal.logging.InternalLogLevel\",\"io.netty.handler.codec.CodecOutputList$2\",\"com.google.protobuf.DescriptorProtos$EnumValueDescriptorProto\",\"com.google.protobuf.DescriptorProtos$FileDescriptorProto\",\"io.netty.buffer.CompositeByteBuf\",\"com.google.protobuf.Any$1\",\"io.netty.channel.epoll.EpollDomainSocketChannelConfig\",\"io.netty.channel.ChannelOutboundInvoker\",\"io.netty.buffer.PoolChunk\",\"com.google.protobuf.GeneratedMessageV3$BuilderParent\",\"com.google.protobuf.DescriptorProtos$FileOptions$Builder\",\"io.netty.channel.ChannelOutboundBuffer$Entry\",\"com.google.protobuf.DescriptorProtos$EnumValueOptionsOrBuilder\",\"com.google.protobuf.MapEntry$Builder\",\"com.google.protobuf.MessageReflection$MergeTarget$ContainerType\",\"io.netty.channel.WriteBufferWaterMark\",\"io.netty.channel.socket.SocketChannelConfig\",\"io.netty.util.Recycler$Stack\",\"com.google.protobuf.Empty$Builder\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProto$Builder\",\"com.google.protobuf.Timestamp\",\"com.google.protobuf.DescriptorProtos$FileOptions$OptimizeMode\",\"com.google.protobuf.Descriptors$DescriptorPool$PackageDescriptor\",\"io.netty.util.internal.logging.Slf4JLogger\",\"com.google.protobuf.ByteString$ByteArrayCopier\",\"io.netty.util.DefaultAttributeMap\",\"com.google.protobuf.TypeOrBuilder\",\"io.netty.channel.kqueue.AbstractKQueueChannel$AbstractKQueueUnsafe\",\"io.netty.util.concurrent.AbstractScheduledEventExecutor$1\",\"com.google.protobuf.Internal$ProtobufList\",\"io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceFdTask\",\"io.netty.buffer.PoolThreadCache$MemoryRegionCache\",\"io.netty.util.concurrent.EventExecutorGroup\",\"io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$WaitStrategy\",\"io.netty.util.concurrent.ThreadPerTaskExecutor\",\"com.google.protobuf.Descriptors$FileDescriptor$Syntax\",\"io.netty.buffer.ByteBufUtil\",\"com.google.protobuf.Message\",\"com.google.protobuf.ByteString$ArraysByteArrayCopier\",\"com.google.protobuf.DescriptorProtos$OneofOptionsOrBuilder\",\"com.google.protobuf.ExtensionRegistryLite$ObjectIntPair\",\"io.netty.buffer.UnpooledByteBufAllocator$InstrumentedUnpooledDirectByteBuf\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo$Location\",\"com.google.protobuf.Extension$ExtensionType\",\"io.netty.util.internal.ReflectionUtil\",\"io.netty.channel.DefaultChannelPipeline$PendingHandlerRemovedTask\",\"io.netty.buffer.DuplicatedByteBuf\",\"io.netty.util.concurrent.FastThreadLocalThread\",\"com.google.protobuf.Descriptors$ServiceDescriptor\",\"com.google.protobuf.MessageReflection$MergeTarget\",\"com.google.protobuf.Mixin$Builder\",\"com.google.protobuf.StringValue$1\",\"io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe\",\"io.netty.channel.ChannelOutboundHandlerAdapter\",\"io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue\",\"com.google.protobuf.DescriptorProtos$MethodDescriptorProto\",\"io.netty.util.internal.PlatformDependent0$3\",\"io.netty.util.internal.PlatformDependent0$4\",\"com.google.protobuf.StringValue$Builder\",\"io.netty.util.internal.PlatformDependent0$5\",\"com.google.protobuf.DescriptorProtos$DescriptorProtoOrBuilder\",\"io.netty.buffer.PooledByteBufAllocator\",\"io.netty.util.internal.PlatformDependent0$1\",\"io.netty.util.concurrent.DefaultProgressivePromise\",\"io.netty.util.internal.PlatformDependent0$2\",\"com.google.protobuf.Timestamp$Builder\",\"com.google.protobuf.EnumValue$1\",\"com.google.protobuf.UInt32ValueOrBuilder\",\"io.netty.util.internal.PlatformDependent0$8\",\"com.google.protobuf.SmallSortedMap$EmptySet$1\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ReservedRange\",\"com.google.protobuf.DescriptorProtos$UninterpretedOption$NamePart\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProto\",\"com.google.protobuf.SmallSortedMap$EmptySet$2\",\"io.netty.util.ResourceLeakDetector$DefaultResourceLeak\",\"com.google.protobuf.AbstractMessage$BuilderParent\",\"com.google.protobuf.DescriptorProtos$OneofDescriptorProto$Builder\",\"com.google.protobuf.UnsafeUtil$MemoryAccessor\",\"com.google.protobuf.SingleFieldBuilderV3\",\"io.netty.buffer.AdvancedLeakAwareByteBuf\",\"io.netty.channel.embedded.EmbeddedChannel$1\",\"io.netty.channel.embedded.EmbeddedChannel$2\",\"io.netty.util.internal.StringUtil\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto\",\"com.google.protobuf.CodedOutputStream$OutputStreamEncoder\",\"com.google.protobuf.UnknownFieldSet$Field$Builder\",\"com.google.protobuf.UnsafeUtil\",\"io.netty.util.internal.ThrowableUtil\",\"com.google.protobuf.CodedOutputStream$AbstractBufferedEncoder\",\"io.netty.channel.ChannelFlushPromiseNotifier$FlushCheckpoint\",\"com.google.protobuf.DescriptorProtos$MethodDescriptorProtoOrBuilder\",\"com.google.protobuf.ByteString$BoundedByteString\",\"com.google.protobuf.UInt32Value\",\"com.google.protobuf.UnknownFieldSet$Field\",\"io.netty.buffer.PooledByteBuf\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable$RepeatedFieldAccessor$ReflectionInvoker\",\"com.google.protobuf.DescriptorProtos$ServiceOptionsOrBuilder\",\"io.netty.util.concurrent.SingleThreadEventExecutor$1\",\"com.google.protobuf.DescriptorProtos$OneofOptions$1\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Label$1\",\"io.netty.util.concurrent.SingleThreadEventExecutor$2\",\"io.netty.util.concurrent.Future\",\"com.google.protobuf.DescriptorProtos\",\"io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe\",\"com.google.protobuf.SourceContextOrBuilder\",\"com.google.protobuf.ProtocolMessageEnum\",\"com.google.protobuf.Internal$FloatList\",\"io.netty.buffer.PoolChunkList\",\"io.netty.channel.embedded.EmbeddedEventLoop\",\"io.netty.buffer.PoolSubpage\",\"io.netty.buffer.Unpooled\",\"io.netty.channel.ChannelProgressiveFuture\",\"io.netty.util.NettyRuntime$AvailableProcessorsHolder\",\"io.netty.util.internal.DefaultPriorityQueue\",\"io.netty.channel.kqueue.AbstractKQueueStreamChannel$KQueueStreamUnsafe\",\"com.google.protobuf.Descriptors$DescriptorValidationException\",\"com.google.protobuf.Empty$1\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Builder\",\"com.google.protobuf.DescriptorProtos$MessageOptions$Builder\",\"com.google.protobuf.DescriptorProtos$UninterpretedOption$NamePart$Builder\",\"io.netty.util.internal.MacAddressUtil\",\"com.google.protobuf.DoubleValue$Builder\",\"io.netty.channel.embedded.EmbeddedSocketAddress\",\"io.netty.buffer.PooledDuplicatedByteBuf\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueuePad2\",\"io.netty.handler.codec.CodecOutputList$CodecOutputListRecycler\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueuePad0\",\"com.google.protobuf.Descriptors$OneofDescriptor\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueuePad1\",\"io.netty.util.UncheckedBooleanSupplier\",\"com.google.protobuf.Field$1\",\"com.google.protobuf.GeneratedMessageV3$ExtendableMessage\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable$RepeatedMessageFieldAccessor\",\"com.google.protobuf.AbstractMessageLite$InternalOneOfEnum\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueProducerIndexField\",\"com.google.protobuf.FieldSet$FieldDescriptorLite\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable$SingularMessageFieldAccessor\",\"com.google.protobuf.MessageOrBuilder\",\"io.netty.handler.codec.MessageToMessageCodec$2\",\"io.netty.handler.codec.MessageToMessageCodec$1\",\"io.netty.util.ResourceLeak\",\"io.netty.channel.unix.UnixChannel\",\"com.google.protobuf.DescriptorProtos$FieldOptions$Builder\",\"io.netty.util.internal.MathUtil\",\"io.netty.channel.ChannelFutureListener\",\"com.google.protobuf.WireFormat$FieldType\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Type\",\"com.google.protobuf.DoubleValue\",\"io.netty.channel.EventLoopGroup\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ReservedRange$Builder\",\"io.netty.buffer.AbstractUnpooledSlicedByteBuf\",\"io.netty.util.BooleanSupplier$1\",\"io.netty.util.BooleanSupplier$2\",\"io.netty.channel.VoidChannelPromise\",\"io.netty.util.internal.shaded.org.jctools.queues.QueueProgressIndicators\",\"io.netty.buffer.EmptyByteBuf\",\"io.netty.buffer.AbstractPooledDerivedByteBuf$PooledNonRetainedSlicedByteBuf\",\"com.google.protobuf.ExtensionRegistry\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Label\",\"com.google.protobuf.CodedInputStream$ArrayDecoder\",\"org.nico.ratel.landlords.entity.ClientTransferData$ClientTransferDataProtoc$1\",\"com.google.protobuf.DescriptorProtos$MethodOptions$Builder\",\"io.netty.util.concurrent.DefaultPromise$1\",\"com.google.protobuf.Descriptors$1\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ExtensionRangeOrBuilder\",\"io.netty.buffer.ReadOnlyByteBuf\",\"com.google.protobuf.Android\",\"com.google.protobuf.AbstractMessageLite$Builder$LimitedInputStream\",\"io.netty.util.AsciiString\",\"com.google.protobuf.GeneratedMessageV3$Builder$BuilderParentImpl\",\"com.google.protobuf.Api$Builder\",\"io.netty.channel.DefaultMessageSizeEstimator\",\"com.google.protobuf.NullValue$1\",\"com.google.protobuf.Empty\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueL2Pad\",\"com.google.protobuf.Internal$IntList\",\"com.google.protobuf.ExtensionRegistryLite\",\"com.google.protobuf.DescriptorProtos$OneofOptions$Builder\",\"com.google.protobuf.DescriptorProtos$MessageOptions\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueue\",\"com.google.protobuf.DoubleValueOrBuilder\",\"io.netty.channel.DefaultChannelPipeline$PendingHandlerCallback\",\"com.google.protobuf.ByteString$Output\",\"io.netty.util.internal.shaded.org.jctools.queues.SpscLinkedQueue\",\"com.google.protobuf.MixinOrBuilder\",\"io.netty.channel.RecvByteBufAllocator\",\"com.google.protobuf.MethodOrBuilder\",\"com.google.protobuf.DescriptorProtos$FileOptions$OptimizeMode$1\",\"com.google.protobuf.GeneratedMessage$GeneratedExtension\",\"com.google.protobuf.MapField$MutatabilityAwareMap\",\"io.netty.channel.kqueue.BsdSocket\",\"com.google.protobuf.ExtensionLite\",\"io.netty.util.concurrent.ProgressivePromise\",\"com.google.protobuf.DescriptorProtos$ServiceDescriptorProto\",\"io.netty.channel.VoidChannelPromise$1\",\"com.google.protobuf.UInt32Value$Builder\",\"io.netty.channel.CompleteChannelFuture\",\"com.google.protobuf.UnknownFieldSet$Builder\",\"io.netty.util.Constant\",\"com.google.protobuf.Descriptors$GenericDescriptor\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ReservedRange$1\",\"io.netty.buffer.PooledByteBufAllocator$PoolThreadLocalCache\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseLinkedAtomicQueue\",\"com.google.protobuf.StructOrBuilder\",\"com.google.protobuf.Value$KindCase\",\"io.netty.channel.AddressedEnvelope\",\"com.google.protobuf.EnumOrBuilder\",\"io.netty.buffer.UnsafeHeapSwappedByteBuf\",\"com.google.protobuf.ByteString$AbstractByteIterator\",\"com.google.protobuf.FloatValueOrBuilder\",\"org.nico.ratel.landlords.entity.ClientTransferData$ClientTransferDataProtoc\",\"com.google.protobuf.Reader\",\"io.netty.channel.Channel\",\"com.google.protobuf.NioByteString$1\",\"com.google.protobuf.Duration\",\"io.netty.util.internal.logging.InternalLoggerFactory\",\"io.netty.channel.kqueue.KQueueDomainSocketChannel\",\"com.google.protobuf.Utf8$Processor\",\"com.google.protobuf.Field$Cardinality$1\",\"com.google.protobuf.DescriptorProtos$GeneratedCodeInfo$Annotation\",\"io.netty.channel.DefaultChannelConfig\",\"io.netty.channel.AbstractChannel$AbstractUnsafe$8\",\"io.netty.buffer.WrappedCompositeByteBuf\",\"com.google.protobuf.FloatValue$1\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueProducerLimitField\",\"io.netty.channel.ChannelPromise\",\"io.netty.channel.local.LocalChannel\",\"io.netty.util.Recycler$WeakOrderQueue\",\"com.google.protobuf.MessageLite$Builder\",\"com.google.protobuf.UInt32Value$1\",\"com.google.protobuf.NullValue\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo\",\"com.google.protobuf.NioByteString\",\"io.netty.channel.DefaultChannelId\",\"com.google.protobuf.FloatValue\",\"io.netty.channel.ChannelInitializer\",\"com.google.protobuf.Parser\",\"io.netty.channel.ChannelOutboundBuffer\",\"com.google.protobuf.Descriptors$FieldDescriptor\",\"com.google.protobuf.MutabilityOracle$1\",\"io.netty.buffer.PoolChunkMetric\",\"com.google.protobuf.FieldMask\",\"com.google.protobuf.DescriptorProtos$MessageOptionsOrBuilder\",\"com.google.protobuf.Descriptors$FileDescriptor\",\"io.netty.channel.DefaultChannelPipeline\",\"io.netty.channel.DelegatingChannelPromiseNotifier\",\"com.google.protobuf.EmptyOrBuilder\",\"com.google.protobuf.WireFormat$FieldType$1\",\"com.google.protobuf.WireFormat$FieldType$2\",\"com.google.protobuf.WireFormat$FieldType$3\",\"com.google.protobuf.WireFormat$FieldType$4\",\"com.google.protobuf.DescriptorProtos$EnumOptions$Builder\",\"com.google.protobuf.AbstractMessageLite$Builder\",\"io.netty.channel.kqueue.KQueueSocketChannelConfig\",\"io.netty.channel.socket.DatagramChannelConfig\",\"io.netty.channel.socket.DuplexChannel\",\"io.netty.buffer.SimpleLeakAwareCompositeByteBuf\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.SpscLinkedAtomicQueue\",\"com.google.protobuf.Utf8$SafeProcessor\",\"io.netty.handler.codec.MessageToMessageDecoder\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo$LocationOrBuilder\",\"com.google.protobuf.DescriptorProtos$UninterpretedOption\",\"io.netty.channel.embedded.EmbeddedChannel\",\"com.google.protobuf.CodedOutputStream$HeapNioEncoder\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ExtensionRange\",\"io.netty.channel.ChannelFuture\",\"com.google.protobuf.DescriptorProtos$FileDescriptorSet\",\"io.netty.channel.ChannelConfig\",\"com.google.protobuf.GeneratedMessageV3\",\"com.google.protobuf.DescriptorProtos$FileDescriptorSet$Builder\",\"io.netty.util.concurrent.FailedFuture\",\"com.google.protobuf.DescriptorProtos$MethodOptions\",\"io.netty.util.internal.SystemPropertyUtil$1\",\"com.google.protobuf.PrimitiveNonBoxingCollection\",\"io.netty.channel.AbstractChannel$AnnotatedNoRouteToHostException\",\"com.google.protobuf.DescriptorProtos$GeneratedCodeInfo$AnnotationOrBuilder\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueL1Pad\",\"io.netty.util.IllegalReferenceCountException\",\"io.netty.buffer.ByteBufUtil$1\",\"io.netty.buffer.ByteBufUtil$2\",\"com.google.protobuf.Utf8$DecodeUtil\",\"org.nico.ratel.landlords.entity.ClientTransferData$ClientTransferDataProtoc$Builder\",\"io.netty.buffer.ByteBufHolder\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Type$1\",\"com.google.protobuf.LazyStringArrayList\",\"io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$ExitCondition\",\"com.google.protobuf.Method\",\"io.netty.buffer.AbstractPooledDerivedByteBuf$PooledNonRetainedDuplicateByteBuf\",\"com.google.protobuf.Mixin$1\",\"io.netty.util.internal.shaded.org.jctools.queues.ConcurrentCircularArrayQueue\",\"io.netty.buffer.UnpooledByteBufAllocator$InstrumentedUnpooledUnsafeNoCleanerDirectByteBuf\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo$Location$Builder\",\"com.google.protobuf.BoolValue$Builder\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseLinkedAtomicQueueProducerNodeRef\",\"io.netty.util.internal.CleanerJava6\",\"com.google.protobuf.UInt64ValueOrBuilder\",\"io.netty.channel.ChannelPipelineException\",\"com.google.protobuf.DescriptorProtos$FieldOptions$JSType\",\"com.google.protobuf.DescriptorProtos$UninterpretedOption$NamePartOrBuilder\",\"io.netty.util.ByteProcessor$1\",\"com.google.protobuf.SmallSortedMap$1\",\"com.google.protobuf.Struct$1\",\"com.google.protobuf.Field$Cardinality\",\"io.netty.util.internal.LongCounter\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo$Location$1\",\"io.netty.util.ByteProcessor$4\",\"io.netty.util.ByteProcessor$3\",\"io.netty.util.ByteProcessor$2\",\"io.netty.util.ResourceLeakHint\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueConsumerIndexField\",\"io.netty.channel.ChannelMetadata\",\"io.netty.util.Recycler$3\",\"io.netty.buffer.FixedCompositeByteBuf$Component\",\"io.netty.buffer.SimpleLeakAwareByteBuf\",\"io.netty.channel.ChannelOutboundBuffer$1\",\"io.netty.util.Recycler$1\",\"io.netty.util.Recycler$2\",\"io.netty.util.Attribute\",\"io.netty.util.concurrent.GlobalEventExecutor$TaskRunner\",\"com.google.protobuf.WrappersProto\",\"com.google.protobuf.AnyOrBuilder\",\"io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask\",\"com.google.protobuf.DescriptorProtos$FieldOptions$CType$1\",\"io.netty.buffer.PoolThreadCache$MemoryRegionCache$1\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable$RepeatedFieldAccessor\",\"io.netty.util.concurrent.DefaultFutureListeners\",\"io.netty.buffer.AbstractPooledDerivedByteBuf\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueConsumerIndexField\",\"com.google.protobuf.DescriptorProtos$FieldOptions\",\"com.google.protobuf.Timestamp$1\",\"com.google.protobuf.Type$Builder\",\"io.netty.buffer.UnpooledByteBufAllocator$InstrumentedUnpooledUnsafeHeapByteBuf\",\"io.netty.channel.epoll.EpollTcpInfo\",\"io.netty.channel.epoll.EpollDatagramChannelConfig\",\"io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf\",\"io.netty.buffer.ByteBufAllocatorMetricProvider\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable$SingularFieldAccessor$ReflectionInvoker\",\"io.netty.buffer.UnreleasableByteBuf\",\"com.google.protobuf.AbstractMessage$Builder\",\"io.netty.util.AbstractConstant\",\"io.netty.util.concurrent.GlobalEventExecutor\",\"io.netty.channel.unix.Socket\",\"io.netty.buffer.ReadOnlyByteBufferBuf\",\"com.google.protobuf.SmallSortedMap$EmptySet\",\"io.netty.channel.unix.ErrorsStaticallyReferencedJniMethods\",\"io.netty.util.internal.PlatformDependent\",\"com.google.protobuf.DescriptorProtos$ServiceDescriptorProto$1\",\"com.google.protobuf.LazyField\",\"com.google.protobuf.DescriptorProtos$MethodOptions$IdempotencyLevel\",\"io.netty.util.concurrent.OrderedEventExecutor\",\"io.netty.util.concurrent.UnorderedThreadPoolEventExecutor\",\"com.google.protobuf.ByteOutput\",\"com.google.protobuf.Internal$EnumLiteMap\",\"io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceInChannelTask\",\"com.google.protobuf.MessageReflection$ExtensionBuilderAdapter\",\"io.netty.channel.ChannelHandlerAdapter\",\"io.netty.channel.EventLoop\",\"io.netty.buffer.PoolArenaMetric\",\"com.google.protobuf.ByteString\",\"io.netty.buffer.PooledDirectByteBuf$1\",\"com.google.protobuf.BytesValue\",\"com.google.protobuf.Internal$EnumLite\",\"io.netty.channel.unix.PeerCredentials\",\"com.google.protobuf.FieldMask$Builder\",\"com.google.protobuf.CodedOutputStream$OutOfSpaceException\",\"com.google.protobuf.SmallSortedMap\",\"com.google.protobuf.EnumValueOrBuilder\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueL3Pad\",\"io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask$1\",\"com.google.protobuf.ByteString$2\",\"io.netty.channel.epoll.LinuxSocket\",\"io.netty.buffer.PooledByteBufAllocatorMetric\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable$SingularEnumFieldAccessor\",\"io.netty.buffer.PooledUnsafeDirectByteBuf\",\"io.netty.channel.embedded.EmbeddedChannel$EmbeddedUnsafe$1\",\"io.netty.channel.AdaptiveRecvByteBufAllocator\",\"io.netty.channel.AbstractChannelHandlerContext$WriteTask$1\",\"io.netty.util.ResourceLeakTracker\",\"io.netty.channel.unix.IovArray\",\"com.google.protobuf.ExtensionRegistry$ExtensionInfo\",\"com.google.protobuf.UnknownFieldSet\",\"com.google.protobuf.Api$1\",\"com.google.protobuf.AbstractMessage\",\"com.google.protobuf.Extension$MessageType\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProto$EnumReservedRange$Builder\",\"com.google.protobuf.WireFormat$Utf8Validation\",\"io.netty.channel.kqueue.KQueueSocketChannel$KQueueSocketChannelUnsafe\",\"com.google.protobuf.ListValue$Builder\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable$RepeatedFieldAccessor$MethodInvoker\",\"com.google.protobuf.DescriptorProtos$GeneratedCodeInfo$Annotation$1\",\"io.netty.util.ByteProcessor$IndexNotOfProcessor\",\"com.google.protobuf.Internal\",\"io.netty.util.concurrent.ScheduledFutureTask\",\"com.google.protobuf.DescriptorProtos$DescriptorProto\",\"io.netty.buffer.PooledSlicedByteBuf$1\",\"io.netty.channel.ChannelInboundHandler\",\"com.google.protobuf.MapEntry$Metadata\",\"io.netty.channel.epoll.EpollMode\",\"io.netty.util.ResourceLeakDetector$Record\",\"com.google.protobuf.DescriptorProtos$FieldOptions$1\",\"io.netty.channel.local.LocalAddress\",\"io.netty.channel.DefaultChannelHandlerContext\",\"io.netty.channel.socket.SocketChannel\",\"io.netty.util.concurrent.RejectedExecutionHandler\",\"io.netty.buffer.PooledDirectByteBuf\",\"io.netty.buffer.AbstractUnsafeSwappedByteBuf\",\"io.netty.channel.local.LocalChannel$State\",\"io.netty.handler.codec.CodecOutputList$CodecOutputLists\",\"com.google.protobuf.CodedInputStream$StreamDecoder\",\"com.google.protobuf.DescriptorProtos$MethodOptionsOrBuilder\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueMidPad\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable$SingularFieldAccessor$MethodInvoker\",\"io.netty.buffer.UnpooledByteBufAllocator$InstrumentedUnpooledUnsafeDirectByteBuf\",\"io.netty.util.Recycler\",\"com.google.protobuf.CodedOutputStream$SafeDirectNioEncoder\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ExtensionRange$1\",\"io.netty.buffer.UnpooledByteBufAllocator$UnpooledByteBufAllocatorMetric\",\"com.google.protobuf.MutabilityOracle\",\"io.netty.buffer.UnpooledByteBufAllocator\",\"io.netty.util.concurrent.ProgressiveFuture\",\"io.netty.channel.unix.Errors\",\"io.netty.channel.AbstractChannel\",\"com.google.protobuf.Extension\",\"io.netty.channel.socket.ServerSocketChannel\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ExtensionRange$Builder\",\"io.netty.util.internal.EmptyArrays\",\"io.netty.buffer.PooledUnsafeDirectByteBuf$1\",\"com.google.protobuf.WireFormat$Utf8Validation$1\",\"com.google.protobuf.StringValueOrBuilder\",\"com.google.protobuf.WireFormat$Utf8Validation$2\",\"com.google.protobuf.FieldSet\",\"com.google.protobuf.WireFormat$Utf8Validation$3\",\"com.google.protobuf.Syntax$1\",\"com.google.protobuf.DescriptorProtos$OneofOptions\",\"com.google.protobuf.ApiProto\",\"com.google.protobuf.BytesValue$1\",\"com.google.protobuf.Int32Value$1\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProto$EnumReservedRange\",\"com.google.protobuf.OptionOrBuilder\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueueConsumerNodeRef\",\"com.google.protobuf.DescriptorProtos$GeneratedCodeInfo$1\",\"io.netty.buffer.PoolArena$DirectArena\",\"io.netty.util.internal.PlatformDependent$ThreadLocalRandomProvider\",\"io.netty.channel.local.LocalChannel$LocalUnsafe\",\"com.google.protobuf.FieldSet$Builder\",\"io.netty.util.internal.shaded.org.jctools.queues.IndexedQueueSizeUtil$IndexedQueue\",\"com.google.protobuf.ProtocolStringList\",\"com.google.protobuf.FieldMask$1\",\"io.netty.buffer.UnpooledUnsafeHeapByteBuf\",\"com.google.protobuf.DescriptorProtos$UninterpretedOption$NamePart$1\",\"io.netty.util.internal.ObjectUtil\",\"com.google.protobuf.DescriptorProtos$FieldOptions$CType\",\"com.google.protobuf.Type$1\",\"io.netty.handler.codec.DecoderException\",\"io.netty.buffer.AbstractByteBuf\",\"io.netty.buffer.UnpooledUnsafeDirectByteBuf\",\"io.netty.util.ResourceLeakDetector\",\"com.google.protobuf.IterableByteBufferInputStream\",\"io.netty.util.concurrent.DefaultPromise\",\"com.google.protobuf.UninitializedMessageException\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProtoOrBuilder\",\"io.netty.channel.unix.Limits\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo$1\",\"com.google.protobuf.SourceContextProto\",\"com.google.protobuf.Internal$DoubleList\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable$OneofAccessor\",\"com.google.protobuf.Descriptors\",\"io.netty.util.AbstractReferenceCounted\",\"com.google.protobuf.ApiOrBuilder\",\"io.netty.channel.epoll.EpollSocketChannelConfig\",\"com.google.protobuf.DescriptorProtos$FileOptionsOrBuilder\",\"io.netty.channel.DefaultChannelPipeline$HeadContext\",\"io.netty.util.concurrent.FastThreadLocal\",\"com.google.protobuf.DescriptorProtos$EnumValueDescriptorProto$1\",\"io.netty.util.internal.OutOfDirectMemoryError\",\"com.google.protobuf.CodedOutputStream\",\"io.netty.util.internal.IntegerHolder\",\"io.netty.channel.ChannelInboundInvoker\",\"io.netty.util.internal.SystemPropertyUtil\",\"com.google.protobuf.DescriptorProtos$FileOptions$1\",\"io.netty.channel.AbstractChannel$CloseFuture\",\"io.netty.buffer.PoolChunkListMetric\",\"com.google.protobuf.ArrayDecoders$Registers\",\"io.netty.channel.ChannelHandler\",\"com.google.protobuf.GeneratedMessageV3$ExtendableMessageOrBuilder\",\"io.netty.channel.DefaultChannelPipeline$1\");\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/handler/SecondProtobufCodec_ESTest_scaffolding.java",
        "class": "SecondProtobufCodec_ESTest_scaffolding",
        "name": "initMocksToAvoidTimeoutsInTheTests",
        "return_type": "void",
        "modifiers": "private static",
        "parameters": [],
        "raw": "private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException {\n  mock(Class.forName(\"io.netty.channel.ChannelHandlerContext\",false,SecondProtobufCodec_ESTest_scaffolding.class.getClassLoader()));\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/handler/SecondProtobufCodec_ESTest_scaffolding.java",
        "class": "SecondProtobufCodec_ESTest_scaffolding",
        "name": "resetClasses",
        "return_type": "void",
        "modifiers": "private static",
        "parameters": [],
        "raw": "private static void resetClasses(){\n  org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(SecondProtobufCodec_ESTest_scaffolding.class.getClassLoader());\n  org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\"io.netty.channel.ChannelHandlerAdapter\",\"io.netty.channel.ChannelInboundHandlerAdapter\",\"io.netty.channel.ChannelDuplexHandler\",\"io.netty.handler.codec.MessageToMessageCodec\",\"org.nico.ratel.landlords.client.handler.SecondProtobufCodec\",\"io.netty.channel.ChannelOutboundHandlerAdapter\",\"io.netty.handler.codec.MessageToMessageEncoder\",\"io.netty.handler.codec.MessageToMessageCodec$1\",\"io.netty.util.internal.TypeParameterMatcher$1\",\"io.netty.util.internal.TypeParameterMatcher\",\"io.netty.util.internal.UnpaddedInternalThreadLocalMap\",\"io.netty.util.internal.logging.InternalLoggerFactory\",\"io.netty.util.internal.logging.Slf4JLoggerFactory\",\"io.netty.util.internal.logging.AbstractInternalLogger\",\"io.netty.util.internal.logging.Slf4JLogger\",\"io.netty.util.internal.SystemPropertyUtil\",\"io.netty.util.internal.SystemPropertyUtil$1\",\"io.netty.util.internal.InternalThreadLocalMap\",\"io.netty.handler.codec.MessageToMessageDecoder\",\"io.netty.handler.codec.MessageToMessageCodec$2\",\"io.netty.util.internal.TypeParameterMatcher$ReflectiveMatcher\",\"com.google.protobuf.ExtensionRegistryLite\",\"com.google.protobuf.ExtensionRegistry\",\"com.google.protobuf.AbstractMessageLite\",\"com.google.protobuf.AbstractMessage\",\"com.google.protobuf.GeneratedMessageV3\",\"com.google.protobuf.GeneratedMessageV3$ExtendableMessage\",\"com.google.protobuf.ExtensionRegistryFactory\",\"com.google.protobuf.AbstractParser\",\"com.google.protobuf.UnknownFieldSet$Parser\",\"com.google.protobuf.UnknownFieldSet\",\"com.google.protobuf.SmallSortedMap\",\"com.google.protobuf.SmallSortedMap$1\",\"com.google.protobuf.SmallSortedMap$EmptySet$1\",\"com.google.protobuf.SmallSortedMap$EmptySet$2\",\"com.google.protobuf.SmallSortedMap$EmptySet\",\"com.google.protobuf.FieldSet\",\"com.google.protobuf.DescriptorProtos$MethodOptions$1\",\"com.google.protobuf.DescriptorProtos$MethodOptions\",\"com.google.protobuf.AbstractMessageLite$Builder\",\"com.google.protobuf.AbstractMessage$Builder\",\"com.google.protobuf.GeneratedMessageV3$Builder\",\"com.google.protobuf.GeneratedMessageV3$ExtendableBuilder\",\"com.google.protobuf.DescriptorProtos$MethodOptions$Builder\",\"org.nico.ratel.landlords.entity.ClientTransferData$ClientTransferDataProtoc$1\",\"org.nico.ratel.landlords.entity.ClientTransferData$ClientTransferDataProtoc\",\"com.google.protobuf.InvalidProtocolBufferException\",\"io.netty.util.DefaultAttributeMap\",\"io.netty.util.internal.ThrowableUtil\",\"io.netty.channel.AbstractChannel\",\"io.netty.channel.ChannelMetadata\",\"io.netty.channel.epoll.AbstractEpollChannel\",\"io.netty.util.internal.StringUtil\",\"io.netty.util.internal.ObjectUtil\",\"io.netty.channel.epoll.EpollDatagramChannel\",\"io.netty.channel.unix.ErrorsStaticallyReferencedJniMethods\",\"io.netty.channel.unix.Errors\",\"io.netty.channel.unix.FileDescriptor\",\"com.google.protobuf.Option$1\",\"com.google.protobuf.Option\",\"com.google.protobuf.Option$Builder\",\"com.google.protobuf.WireFormat\",\"com.google.protobuf.UnknownFieldSet$Builder\",\"com.google.protobuf.InvalidProtocolBufferException$InvalidWireTypeException\",\"com.google.protobuf.FloatValue$1\",\"com.google.protobuf.FloatValue\",\"com.google.protobuf.CodedInputStream$UnsafeDirectNioDecoder\",\"com.google.protobuf.UnsafeUtil$1\",\"com.google.protobuf.UnsafeUtil$MemoryAccessor\",\"com.google.protobuf.UnsafeUtil$JvmMemoryAccessor\",\"com.google.protobuf.UnsafeUtil\",\"com.google.protobuf.IterableByteBufferInputStream\",\"com.google.protobuf.CodedInputStream$StreamDecoder\",\"com.google.protobuf.AbstractProtobufList\",\"com.google.protobuf.IntArrayList\",\"com.google.protobuf.LazyStringArrayList\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo$Location$1\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo$Location\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo$Location$Builder\",\"com.google.protobuf.DescriptorProtos$FileDescriptorSet$1\",\"com.google.protobuf.DescriptorProtos$FileDescriptorSet\",\"com.google.protobuf.DescriptorProtos$FileDescriptorSet$Builder\",\"com.google.protobuf.DescriptorProtos$ExtensionRangeOptions$1\",\"com.google.protobuf.DescriptorProtos$ExtensionRangeOptions\",\"com.google.protobuf.DescriptorProtos$ExtensionRangeOptions$Builder\",\"com.google.protobuf.FieldSet$Builder\",\"com.google.protobuf.Descriptors$GenericDescriptor\",\"com.google.protobuf.Descriptors$FileDescriptor\",\"com.google.protobuf.DescriptorProtos$FileDescriptorProto$1\",\"com.google.protobuf.DescriptorProtos$FileDescriptorProto\",\"com.google.protobuf.DescriptorProtos$FileDescriptorProto$Builder\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$1\",\"com.google.protobuf.DescriptorProtos$DescriptorProto\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$Builder\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto$1\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Builder\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Label$1\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Label\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Type$1\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Type\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ExtensionRange$1\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ExtensionRange\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ExtensionRange$Builder\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProto$1\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProto\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProto$Builder\",\"com.google.protobuf.DescriptorProtos$EnumValueDescriptorProto$1\",\"com.google.protobuf.DescriptorProtos$EnumValueDescriptorProto\",\"com.google.protobuf.DescriptorProtos$EnumValueDescriptorProto$Builder\",\"com.google.protobuf.SingleFieldBuilderV3\",\"com.google.protobuf.DescriptorProtos$FieldOptions$1\",\"com.google.protobuf.DescriptorProtos$FieldOptions\",\"com.google.protobuf.GeneratedMessageV3$Builder$BuilderParentImpl\",\"com.google.protobuf.GeneratedMessageV3$1\",\"com.google.protobuf.DescriptorProtos$FieldOptions$Builder\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ReservedRange$1\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ReservedRange\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ReservedRange$Builder\",\"com.google.protobuf.DescriptorProtos$FileOptions$1\",\"com.google.protobuf.DescriptorProtos$FileOptions\",\"com.google.protobuf.DescriptorProtos$FileOptions$Builder\",\"com.google.protobuf.Descriptors$DescriptorPool\",\"com.google.protobuf.Utf8$Processor\",\"com.google.protobuf.Utf8$UnsafeProcessor\",\"com.google.protobuf.Utf8\",\"com.google.protobuf.Descriptors$DescriptorPool$PackageDescriptor\",\"com.google.protobuf.Descriptors$Descriptor\",\"com.google.protobuf.Descriptors\",\"com.google.protobuf.Descriptors$FieldDescriptor$JavaType\",\"com.google.protobuf.Descriptors$FieldDescriptor$Type\",\"com.google.protobuf.Descriptors$FieldDescriptor\",\"com.google.protobuf.Descriptors$EnumDescriptor\",\"com.google.protobuf.Descriptors$EnumValueDescriptor\",\"com.google.protobuf.Descriptors$DescriptorPool$DescriptorIntPair\",\"com.google.protobuf.Descriptors$DescriptorPool$SearchFilter\",\"com.google.protobuf.DescriptorProtos$MessageOptions$1\",\"com.google.protobuf.DescriptorProtos$MessageOptions\",\"com.google.protobuf.Descriptors$1\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable\",\"com.google.protobuf.DescriptorProtos\",\"com.google.protobuf.MessageReflection$ExtensionBuilderAdapter\",\"com.google.protobuf.MessageReflection\",\"com.google.protobuf.ExtensionRegistry$DescriptorIntPair\",\"com.google.protobuf.UnknownFieldSet$Field$Builder\",\"com.google.protobuf.UnknownFieldSet$Field\",\"com.google.protobuf.MessageReflection$MergeTarget$ContainerType\",\"com.google.protobuf.StringValue$1\",\"com.google.protobuf.StringValue\",\"com.google.protobuf.StringValue$Builder\",\"io.netty.channel.epoll.AbstractEpollStreamChannel\",\"io.netty.channel.epoll.EpollSocketChannel\",\"com.google.protobuf.DoubleValue$1\",\"com.google.protobuf.DoubleValue\",\"com.google.protobuf.Enum$1\",\"com.google.protobuf.Enum\",\"com.google.protobuf.AnyProto\",\"com.google.protobuf.SourceContextProto\",\"com.google.protobuf.UnmodifiableLazyStringList\",\"com.google.protobuf.TypeProto\",\"com.google.protobuf.DescriptorProtos$ServiceOptions$1\",\"com.google.protobuf.DescriptorProtos$ServiceOptions\",\"com.google.protobuf.DescriptorProtos$ServiceOptions$Builder\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo$1\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo$Builder\",\"com.google.protobuf.ExtensionLite\",\"com.google.protobuf.Extension\",\"com.google.protobuf.ExtensionRegistryLite$ExtensionClassHolder\",\"com.google.protobuf.Timestamp$1\",\"com.google.protobuf.Timestamp\",\"com.google.protobuf.Method$1\",\"com.google.protobuf.Method\",\"com.google.protobuf.Method$Builder\",\"io.netty.channel.epoll.EpollDomainSocketChannel\",\"com.google.protobuf.Api$1\",\"com.google.protobuf.Api\",\"com.google.protobuf.Api$Builder\",\"com.google.protobuf.DescriptorProtos$MethodDescriptorProto$1\",\"com.google.protobuf.DescriptorProtos$MethodDescriptorProto\",\"com.google.protobuf.DescriptorProtos$MethodDescriptorProto$Builder\",\"com.google.protobuf.BytesValue$1\",\"com.google.protobuf.BytesValue\",\"com.google.protobuf.BytesValue$Builder\",\"com.google.protobuf.WrappersProto\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable$SingularFieldAccessor\",\"com.google.protobuf.Descriptors$FileDescriptor$Syntax\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable$SingularFieldAccessor$ReflectionInvoker\",\"com.google.protobuf.DescriptorProtos$OneofOptions$1\",\"com.google.protobuf.DescriptorProtos$OneofOptions\",\"com.google.protobuf.DescriptorProtos$OneofOptions$Builder\",\"com.google.protobuf.BoolValue$1\",\"com.google.protobuf.BoolValue\",\"com.google.protobuf.BoolValue$Builder\",\"io.netty.channel.kqueue.AbstractKQueueChannel\",\"io.netty.channel.kqueue.AbstractKQueueStreamChannel\",\"io.netty.channel.kqueue.KQueueSocketChannel\",\"io.netty.channel.kqueue.KQueueDomainSocketChannel\",\"io.netty.channel.embedded.EmbeddedSocketAddress\",\"io.netty.channel.embedded.EmbeddedChannel\",\"io.netty.channel.embedded.EmbeddedChannelId\",\"io.netty.util.concurrent.AbstractFuture\",\"io.netty.channel.VoidChannelPromise\",\"io.netty.util.concurrent.DefaultPromise$CauseHolder\",\"io.netty.util.concurrent.DefaultPromise\",\"io.netty.channel.DefaultChannelPromise\",\"io.netty.channel.AbstractChannel$CloseFuture\",\"io.netty.channel.AbstractChannel$AbstractUnsafe\",\"io.netty.channel.embedded.EmbeddedChannel$EmbeddedUnsafe\",\"io.netty.util.concurrent.FastThreadLocal\",\"io.netty.channel.ChannelOutboundBuffer$1\",\"io.netty.channel.ChannelOutboundBuffer\",\"io.netty.channel.embedded.EmbeddedChannel$EmbeddedUnsafe$1\",\"io.netty.channel.DefaultChannelPipeline$1\",\"io.netty.channel.DefaultChannelPipeline\",\"io.netty.channel.embedded.EmbeddedChannel$EmbeddedChannelPipeline\",\"io.netty.util.ResourceLeakDetector$Level\",\"io.netty.util.internal.EmptyArrays\",\"io.netty.util.ResourceLeakDetector\",\"io.netty.util.concurrent.CompleteFuture\",\"io.netty.channel.CompleteChannelFuture\",\"io.netty.channel.SucceededChannelFuture\",\"io.netty.channel.VoidChannelPromise$1\",\"io.netty.channel.AbstractChannelHandlerContext\",\"io.netty.channel.DefaultChannelPipeline$TailContext\",\"io.netty.channel.DefaultChannelPipeline$HeadContext\",\"io.netty.util.concurrent.AbstractEventExecutor\",\"io.netty.util.concurrent.AbstractScheduledEventExecutor$1\",\"io.netty.util.concurrent.AbstractScheduledEventExecutor\",\"io.netty.channel.embedded.EmbeddedEventLoop\",\"io.netty.channel.embedded.EmbeddedChannel$1\",\"io.netty.channel.DefaultMessageSizeEstimator$HandleImpl\",\"io.netty.channel.DefaultMessageSizeEstimator\",\"io.netty.channel.DefaultChannelConfig\",\"io.netty.channel.DefaultMaxMessagesRecvByteBufAllocator\",\"io.netty.channel.AdaptiveRecvByteBufAllocator\",\"io.netty.buffer.ByteBufUtil$1\",\"io.netty.util.CharsetUtil\",\"io.netty.util.internal.PlatformDependent0$1\",\"io.netty.util.internal.ReflectionUtil\",\"io.netty.util.internal.PlatformDependent0$2\",\"io.netty.util.internal.PlatformDependent0$3\",\"io.netty.util.internal.PlatformDependent0$4\",\"io.netty.util.internal.PlatformDependent0$5\",\"io.netty.util.internal.PlatformDependent0$10\",\"io.netty.util.internal.PlatformDependent0\",\"io.netty.util.internal.PlatformDependent$1\",\"io.netty.util.internal.PlatformDependent$2\",\"io.netty.util.internal.CleanerJava6\",\"io.netty.util.internal.PlatformDependent\",\"io.netty.buffer.AbstractByteBufAllocator\",\"io.netty.util.NettyRuntime$AvailableProcessorsHolder\",\"io.netty.util.NettyRuntime\",\"io.netty.buffer.ByteBuf\",\"io.netty.buffer.EmptyByteBuf\",\"io.netty.buffer.PooledByteBufAllocator$PoolThreadLocalCache\",\"io.netty.buffer.PoolArena\",\"io.netty.buffer.PoolArena$DirectArena\",\"io.netty.util.internal.LongAdderCounter\",\"io.netty.buffer.PoolSubpage\",\"io.netty.buffer.PoolChunkList\",\"io.netty.buffer.PooledByteBufAllocatorMetric\",\"io.netty.buffer.PooledByteBufAllocator\",\"io.netty.buffer.ByteBufUtil$2\",\"io.netty.buffer.ByteBufUtil\",\"io.netty.buffer.ByteBufAllocator\",\"io.netty.channel.WriteBufferWaterMark\",\"io.netty.channel.ChannelInitializer\",\"io.netty.channel.embedded.EmbeddedChannel$2\",\"io.netty.util.concurrent.FastThreadLocalThread\",\"io.netty.channel.DefaultChannelHandlerContext\",\"io.netty.channel.DefaultChannelPipeline$PendingHandlerCallback\",\"io.netty.channel.DefaultChannelPipeline$PendingHandlerAddedTask\",\"io.netty.channel.embedded.EmbeddedChannel$State\",\"io.netty.channel.ChannelException\",\"io.netty.channel.ChannelPipelineException\",\"io.netty.channel.AbstractChannel$AbstractUnsafe$8\",\"io.netty.util.concurrent.PromiseTask\",\"io.netty.util.concurrent.ScheduledFutureTask\",\"io.netty.util.concurrent.UnorderedThreadPoolEventExecutor\",\"io.netty.util.concurrent.DefaultThreadFactory\",\"io.netty.util.concurrent.GlobalEventExecutor$1\",\"io.netty.util.concurrent.GlobalEventExecutor$TaskRunner\",\"io.netty.util.concurrent.FailedFuture\",\"io.netty.util.internal.DefaultPriorityQueue\",\"io.netty.util.concurrent.GlobalEventExecutor\",\"io.netty.util.concurrent.DefaultProgressivePromise\",\"io.netty.util.concurrent.SingleThreadEventExecutor$1\",\"io.netty.util.concurrent.SingleThreadEventExecutor$2\",\"io.netty.util.concurrent.SingleThreadEventExecutor\",\"io.netty.util.concurrent.DefaultEventExecutor\",\"io.netty.util.concurrent.ThreadPerTaskExecutor\",\"io.netty.util.concurrent.RejectedExecutionHandlers$1\",\"io.netty.util.concurrent.RejectedExecutionHandlers\",\"io.netty.util.concurrent.PromiseNotifier\",\"io.netty.channel.DelegatingChannelPromiseNotifier\",\"com.google.protobuf.DescriptorProtos$MessageOptions$Builder\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProto$EnumReservedRange$1\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProto$EnumReservedRange\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProto$EnumReservedRange$Builder\",\"com.google.protobuf.Timestamp$Builder\",\"com.google.protobuf.DescriptorProtos$EnumOptions$1\",\"com.google.protobuf.DescriptorProtos$EnumOptions\",\"com.google.protobuf.DoubleValue$Builder\",\"com.google.protobuf.Enum$Builder\",\"com.google.protobuf.Mixin$1\",\"com.google.protobuf.Mixin\",\"com.google.protobuf.Mixin$Builder\",\"com.google.protobuf.Duration$1\",\"com.google.protobuf.Duration\",\"com.google.protobuf.Duration$Builder\",\"org.nico.ratel.landlords.entity.ClientTransferData$1\",\"org.nico.ratel.landlords.entity.ClientTransferData\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable$SingularStringFieldAccessor\",\"com.google.protobuf.Descriptors$OneofDescriptor\",\"com.google.protobuf.ApiProto\",\"com.google.protobuf.Type$1\",\"com.google.protobuf.Type\",\"com.google.protobuf.Type$Builder\",\"com.google.protobuf.Extension$ExtensionType\",\"io.netty.channel.local.LocalChannel\",\"io.netty.util.internal.PlatformDependent0$8\",\"io.netty.util.internal.MacAddressUtil\",\"io.netty.util.NetUtil\",\"io.netty.channel.DefaultChannelId\",\"io.netty.handler.codec.CodecOutputList$1\",\"io.netty.handler.codec.CodecOutputList$2\",\"io.netty.handler.codec.CodecOutputList\",\"io.netty.handler.codec.CodecOutputList$CodecOutputLists\",\"io.netty.util.internal.MathUtil\",\"com.google.protobuf.ListValue$1\",\"com.google.protobuf.ListValue\",\"com.google.protobuf.DescriptorProtos$EnumValueOptions$1\",\"com.google.protobuf.DescriptorProtos$EnumValueOptions\",\"com.google.protobuf.DescriptorProtos$EnumValueOptions$Builder\",\"com.google.protobuf.DescriptorProtos$UninterpretedOption$1\",\"com.google.protobuf.DescriptorProtos$UninterpretedOption\",\"com.google.protobuf.DescriptorProtos$UninterpretedOption$Builder\",\"com.google.protobuf.EnumValue$1\",\"com.google.protobuf.EnumValue\",\"com.google.protobuf.EnumValue$Builder\",\"com.google.protobuf.Empty$1\",\"com.google.protobuf.Empty\",\"com.google.protobuf.Value$1\",\"com.google.protobuf.Value\",\"com.google.protobuf.Value$Builder\",\"com.google.protobuf.FieldMask$1\",\"com.google.protobuf.FieldMask\",\"com.google.protobuf.FieldMask$Builder\",\"com.google.protobuf.DescriptorProtos$OneofDescriptorProto$1\",\"com.google.protobuf.DescriptorProtos$OneofDescriptorProto\",\"com.google.protobuf.UInt64Value$1\",\"com.google.protobuf.UInt64Value\",\"com.google.protobuf.UInt64Value$Builder\",\"com.google.protobuf.UInt32Value$1\",\"com.google.protobuf.UInt32Value\",\"com.google.protobuf.UInt32Value$Builder\",\"com.google.protobuf.DescriptorProtos$ServiceDescriptorProto$1\",\"com.google.protobuf.DescriptorProtos$ServiceDescriptorProto\",\"com.google.protobuf.Int32Value$1\",\"com.google.protobuf.Int32Value\",\"com.google.protobuf.AbstractMessageLite$Builder$LimitedInputStream\",\"com.google.protobuf.SourceContext$1\",\"com.google.protobuf.SourceContext\",\"com.google.protobuf.SourceContext$Builder\",\"com.google.protobuf.ByteString$CodedBuilder\",\"com.google.protobuf.ByteOutput\",\"com.google.protobuf.CodedOutputStream\",\"com.google.protobuf.CodedOutputStream$ArrayEncoder\",\"com.google.protobuf.ListValue$Builder\",\"com.google.protobuf.Struct$1\",\"com.google.protobuf.Struct\",\"com.google.protobuf.CodedInputStream\",\"com.google.protobuf.CodedInputStream$ArrayDecoder\",\"com.google.protobuf.Internal\",\"com.google.protobuf.Syntax$1\",\"com.google.protobuf.Syntax\",\"com.google.protobuf.ByteString$LeafByteString\",\"com.google.protobuf.ByteString$LiteralByteString\",\"com.google.protobuf.Android\",\"com.google.protobuf.ByteString$ArraysByteArrayCopier\",\"com.google.protobuf.ByteString$2\",\"com.google.protobuf.ByteString\");\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/handler/ProtobufTransferHandler_ESTest.java",
        "class": "ProtobufTransferHandler_ESTest",
        "name": "test0",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test0() throws Throwable {\n  ProtobufTransferHandler protobufTransferHandler0\u003dnew ProtobufTransferHandler();\n  SQLRecoverableException sQLRecoverableException0\u003dnew SQLRecoverableException();\n  MockIOException mockIOException0\u003dnew MockIOException(sQLRecoverableException0);\n  try {\n    protobufTransferHandler0.exceptionCaught((ChannelHandlerContext)null,mockIOException0);\n    fail(\"Expecting exception: System.SystemExitException\");\n  }\n catch (  System.SystemExitException e) {\n    verifyException(\"org.evosuite.runtime.System\",e);\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/handler/ProtobufTransferHandler_ESTest.java",
        "class": "ProtobufTransferHandler_ESTest",
        "name": "test1",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test1() throws Throwable {\n  ProtobufTransferHandler protobufTransferHandler0\u003dnew ProtobufTransferHandler();\n  SQLRecoverableException sQLRecoverableException0\u003dnew SQLRecoverableException();\n  protobufTransferHandler0.exceptionCaught((ChannelHandlerContext)null,sQLRecoverableException0);\n  assertEquals(0,sQLRecoverableException0.getErrorCode());\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/handler/ProtobufTransferHandler_ESTest.java",
        "class": "ProtobufTransferHandler_ESTest",
        "name": "test2",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test2() throws Throwable {\n  ProtobufTransferHandler protobufTransferHandler0\u003dnew ProtobufTransferHandler();\n  IdleStateEvent idleStateEvent0\u003dIdleStateEvent.READER_IDLE_STATE_EVENT;\n  protobufTransferHandler0.userEventTriggered((ChannelHandlerContext)null,idleStateEvent0);\n  assertEquals(IdleState.READER_IDLE,idleStateEvent0.state());\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/handler/ProtobufTransferHandler_ESTest.java",
        "class": "ProtobufTransferHandler_ESTest",
        "name": "test3",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test3() throws Throwable {\n  ProtobufTransferHandler protobufTransferHandler0\u003dnew ProtobufTransferHandler();\n  IdleStateEvent idleStateEvent0\u003dIdleStateEvent.FIRST_WRITER_IDLE_STATE_EVENT;\n  ChannelHandlerContext channelHandlerContext0\u003dmock(ChannelHandlerContext.class,new ViolatedAssumptionAnswer());\n  doReturn((Channel)null).when(channelHandlerContext0).channel();\n  try {\n    protobufTransferHandler0.userEventTriggered(channelHandlerContext0,idleStateEvent0);\n    fail(\"Expecting exception: NullPointerException\");\n  }\n catch (  NullPointerException e) {\n    verifyException(\"org.nico.ratel.landlords.channel.ChannelUtils\",e);\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/handler/ProtobufTransferHandler_ESTest.java",
        "class": "ProtobufTransferHandler_ESTest",
        "name": "test4",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test4() throws Throwable {\n  ProtobufTransferHandler protobufTransferHandler0\u003dnew ProtobufTransferHandler();\n  ChannelHandlerContext channelHandlerContext0\u003dmock(ChannelHandlerContext.class,new ViolatedAssumptionAnswer());\n  protobufTransferHandler0.userEventTriggered(channelHandlerContext0,\"faH`w{B-dVl~\");\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/handler/ProtobufTransferHandler_ESTest.java",
        "class": "ProtobufTransferHandler_ESTest",
        "name": "test5",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test5() throws Throwable {\n  ProtobufTransferHandler protobufTransferHandler0\u003dnew ProtobufTransferHandler();\n  ChannelHandlerContext channelHandlerContext0\u003dmock(ChannelHandlerContext.class,new ViolatedAssumptionAnswer());\n  Charset charset0\u003dCharset.defaultCharset();\n  CharBuffer charBuffer0\u003dCharBuffer.wrap((CharSequence)\"\");\n  ByteBuffer byteBuffer0\u003dcharset0.encode(charBuffer0);\n  ClientTransferData.ClientTransferDataProtoc clientTransferData_ClientTransferDataProtoc0\u003dClientTransferData.ClientTransferDataProtoc.parseFrom(byteBuffer0);\n  try {\n    protobufTransferHandler0.channelRead(channelHandlerContext0,clientTransferData_ClientTransferDataProtoc0);\n    fail(\"Expecting exception: IllegalArgumentException\");\n  }\n catch (  IllegalArgumentException e) {\n    verifyException(\"java.lang.Enum\",e);\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/handler/ProtobufTransferHandler_ESTest.java",
        "class": "ProtobufTransferHandler_ESTest",
        "name": "test6",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test6() throws Throwable {\n  ProtobufTransferHandler protobufTransferHandler0\u003dnew ProtobufTransferHandler();\n  ChannelHandlerContext channelHandlerContext0\u003dmock(ChannelHandlerContext.class,new ViolatedAssumptionAnswer());\n  IdleStateEvent idleStateEvent0\u003dIdleStateEvent.FIRST_WRITER_IDLE_STATE_EVENT;\n  protobufTransferHandler0.channelRead(channelHandlerContext0,idleStateEvent0);\n  assertEquals(IdleState.WRITER_IDLE,idleStateEvent0.state());\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/proxy/ProtobufProxy_ESTest.java",
        "class": "ProtobufProxy_ESTest",
        "name": "notGeneratedAnyTest",
        "return_type": "void",
        "modifiers": "@Test public",
        "parameters": [],
        "raw": "@Test public void notGeneratedAnyTest(){\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/proxy/WebsocketProxy_ESTest_scaffolding.java",
        "class": "WebsocketProxy_ESTest_scaffolding",
        "name": "initEvoSuiteFramework",
        "return_type": "void",
        "modifiers": "@BeforeClass public static",
        "parameters": [],
        "raw": "@BeforeClass public static void initEvoSuiteFramework(){\n  org.evosuite.runtime.RuntimeSettings.className\u003d\"org.nico.ratel.landlords.client.proxy.WebsocketProxy\";\n  org.evosuite.runtime.GuiSupport.initialize();\n  org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads\u003d100;\n  org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop\u003d10000;\n  org.evosuite.runtime.RuntimeSettings.mockSystemIn\u003dtrue;\n  org.evosuite.runtime.RuntimeSettings.sandboxMode\u003dorg.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED;\n  org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT();\n  org.evosuite.runtime.classhandling.JDKClassResetter.init();\n  setSystemProperties();\n  initializeClasses();\n  org.evosuite.runtime.Runtime.getInstance().resetRuntime();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/proxy/WebsocketProxy_ESTest_scaffolding.java",
        "class": "WebsocketProxy_ESTest_scaffolding",
        "name": "clearEvoSuiteFramework",
        "return_type": "void",
        "modifiers": "@AfterClass public static",
        "parameters": [],
        "raw": "@AfterClass public static void clearEvoSuiteFramework(){\n  Sandbox.resetDefaultSecurityManager();\n  java.lang.System.setProperties((java.util.Properties)defaultProperties.clone());\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/proxy/WebsocketProxy_ESTest_scaffolding.java",
        "class": "WebsocketProxy_ESTest_scaffolding",
        "name": "initTestCase",
        "return_type": "void",
        "modifiers": "@Before public",
        "parameters": [],
        "raw": "@Before public void initTestCase(){\n  threadStopper.storeCurrentThreads();\n  threadStopper.startRecordingTime();\n  org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler();\n  org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode();\n  setSystemProperties();\n  org.evosuite.runtime.GuiSupport.setHeadless();\n  org.evosuite.runtime.Runtime.getInstance().resetRuntime();\n  org.evosuite.runtime.agent.InstrumentingAgent.activate();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/proxy/WebsocketProxy_ESTest_scaffolding.java",
        "class": "WebsocketProxy_ESTest_scaffolding",
        "name": "doneWithTestCase",
        "return_type": "void",
        "modifiers": "@After public",
        "parameters": [],
        "raw": "@After public void doneWithTestCase(){\n  threadStopper.killAndJoinClientThreads();\n  org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks();\n  org.evosuite.runtime.classhandling.JDKClassResetter.reset();\n  resetClasses();\n  org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode();\n  org.evosuite.runtime.agent.InstrumentingAgent.deactivate();\n  org.evosuite.runtime.GuiSupport.restoreHeadlessMode();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/proxy/WebsocketProxy_ESTest_scaffolding.java",
        "class": "WebsocketProxy_ESTest_scaffolding",
        "name": "setSystemProperties",
        "return_type": "void",
        "modifiers": "public static",
        "parameters": [],
        "raw": "public static void setSystemProperties(){\n  java.lang.System.setProperties((java.util.Properties)defaultProperties.clone());\n  java.lang.System.setProperty(\"file.encoding\",\"UTF-8\");\n  java.lang.System.setProperty(\"java.awt.headless\",\"true\");\n  java.lang.System.setProperty(\"java.io.tmpdir\",\"/tmp\");\n  java.lang.System.setProperty(\"user.country\",\"US\");\n  java.lang.System.setProperty(\"user.dir\",\"/home/lvdthieu/code-gen/ratel/landlords-client\");\n  java.lang.System.setProperty(\"user.home\",\"/home/lvdthieu\");\n  java.lang.System.setProperty(\"user.language\",\"en\");\n  java.lang.System.setProperty(\"user.name\",\"lvdthieu\");\n  java.lang.System.setProperty(\"user.timezone\",\"Asia/Ho_Chi_Minh\");\n  java.lang.System.setProperty(\"sun.arch.data.model\",\"64\");\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/proxy/WebsocketProxy_ESTest_scaffolding.java",
        "class": "WebsocketProxy_ESTest_scaffolding",
        "name": "initializeClasses",
        "return_type": "void",
        "modifiers": "private static",
        "parameters": [],
        "raw": "private static void initializeClasses(){\n  org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(WebsocketProxy_ESTest_scaffolding.class.getClassLoader(),\"io.netty.util.internal.SystemPropertyUtil$1\",\"io.netty.channel.AbstractChannel$AnnotatedNoRouteToHostException\",\"io.netty.util.AttributeMap\",\"io.netty.handler.codec.http.HttpHeaders\",\"io.netty.util.internal.Cleaner\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueL1Pad\",\"io.netty.util.concurrent.ScheduledFuture\",\"io.netty.channel.ChannelInboundHandlerAdapter\",\"io.netty.buffer.ByteBufUtil$1\",\"io.netty.util.internal.PlatformDependent0\",\"io.netty.buffer.ByteBufUtil$2\",\"io.netty.util.internal.ReflectionUtil\",\"io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$ExitCondition\",\"io.netty.util.concurrent.MultithreadEventExecutorGroup$1\",\"io.netty.channel.DefaultChannelPipeline$PendingHandlerRemovedTask\",\"io.netty.util.concurrent.FastThreadLocalThread\",\"io.netty.channel.nio.NioEventLoop$1\",\"io.netty.channel.nio.NioEventLoop$2\",\"io.netty.channel.nio.NioEventLoop$3\",\"io.netty.util.concurrent.AbstractEventExecutorGroup\",\"io.netty.channel.nio.NioEventLoop$4\",\"io.netty.util.internal.ThreadLocalRandom\",\"io.netty.util.internal.shaded.org.jctools.queues.ConcurrentCircularArrayQueue\",\"io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue\",\"io.netty.util.internal.PlatformDependent0$3\",\"io.netty.channel.ChannelOutboundBuffer$MessageProcessor\",\"io.netty.util.internal.PlatformDependent0$4\",\"io.netty.util.internal.PlatformDependent0$5\",\"io.netty.util.internal.CleanerJava6\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseLinkedAtomicQueueProducerNodeRef\",\"io.netty.buffer.PooledByteBufAllocator\",\"io.netty.util.internal.PlatformDependent0$1\",\"io.netty.util.internal.PlatformDependent0$2\",\"io.netty.channel.ChannelPipelineException\",\"io.netty.channel.socket.ServerSocketChannelConfig\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueConsumerFields\",\"io.netty.util.concurrent.AbstractScheduledEventExecutor\",\"io.netty.util.internal.PlatformDependent0$8\",\"io.netty.util.internal.logging.InternalLogger\",\"io.netty.bootstrap.BootstrapConfig\",\"io.netty.buffer.AbstractReferenceCountedByteBuf\",\"io.netty.buffer.UnpooledHeapByteBuf\",\"io.netty.util.concurrent.EventExecutor\",\"io.netty.util.internal.PlatformDependent$1\",\"io.netty.util.internal.PlatformDependent$2\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueueProducerNodeRef\",\"io.netty.channel.ChannelOption\",\"io.netty.util.internal.shaded.org.jctools.queues.LinkedQueueNode\",\"io.netty.util.concurrent.EventExecutorChooserFactory\",\"io.netty.buffer.AdvancedLeakAwareByteBuf\",\"io.netty.util.internal.LongCounter\",\"io.netty.util.internal.StringUtil\",\"io.netty.util.ResourceLeakHint\",\"io.netty.channel.nio.SelectedSelectionKeySetSelector\",\"io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Consumer\",\"io.netty.util.internal.logging.AbstractInternalLogger\",\"io.netty.channel.DefaultChannelPipeline$PendingHandlerAddedTask\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueueColdProducerFields\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueConsumerIndexField\",\"io.netty.util.internal.shaded.org.jctools.util.RangeUtil\",\"io.netty.util.internal.LongAdderCounter\",\"io.netty.channel.AbstractChannelHandlerContext\",\"io.netty.util.internal.ThrowableUtil\",\"io.netty.channel.ChannelMetadata\",\"io.netty.buffer.SimpleLeakAwareByteBuf\",\"io.netty.channel.ChannelOutboundBuffer$1\",\"io.netty.channel.ChannelFlushPromiseNotifier$FlushCheckpoint\",\"io.netty.util.concurrent.GlobalEventExecutor$TaskRunner\",\"io.netty.util.Attribute\",\"io.netty.util.concurrent.AbstractFuture\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueL2Pad\",\"io.netty.channel.ChannelOutboundHandler\",\"io.netty.channel.SelectStrategy\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueConsumerFields\",\"io.netty.util.internal.UnpaddedInternalThreadLocalMap\",\"io.netty.buffer.PooledByteBuf\",\"io.netty.util.ReferenceCounted\",\"io.netty.util.concurrent.DefaultFutureListeners\",\"io.netty.util.concurrent.SingleThreadEventExecutor$5\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueConsumerIndexField\",\"io.netty.util.concurrent.SingleThreadEventExecutor$1\",\"io.netty.util.concurrent.SingleThreadEventExecutor$2\",\"io.netty.channel.nio.NioEventLoop\",\"io.netty.resolver.DefaultAddressResolverGroup\",\"io.netty.util.concurrent.Future\",\"io.netty.channel.nio.AbstractNioByteChannel\",\"io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf\",\"io.netty.util.concurrent.DefaultThreadFactory\",\"io.netty.buffer.ByteBufAllocatorMetricProvider\",\"io.netty.channel.MultithreadEventLoopGroup\",\"io.netty.buffer.ByteBufAllocator\",\"io.netty.channel.ChannelId\",\"io.netty.buffer.PoolChunkList\",\"io.netty.buffer.PoolSubpage\",\"io.netty.util.AbstractConstant\",\"io.netty.util.concurrent.GlobalEventExecutor\",\"io.netty.channel.MessageSizeEstimator\",\"org.nico.ratel.landlords.client.proxy.WebsocketProxy\",\"io.netty.channel.ChannelProgressiveFuture\",\"io.netty.util.NettyRuntime$AvailableProcessorsHolder\",\"io.netty.util.internal.DefaultPriorityQueue\",\"io.netty.util.internal.PlatformDependent\",\"io.netty.bootstrap.FailedChannel\",\"io.netty.util.concurrent.OrderedEventExecutor\",\"io.netty.channel.ChannelHandlerAdapter\",\"io.netty.util.internal.PlatformDependent$AtomicLongCounter\",\"io.netty.channel.AbstractChannel$AbstractUnsafe\",\"io.netty.buffer.AbstractByteBufAllocator\",\"io.netty.channel.EventLoop\",\"io.netty.util.internal.PriorityQueueNode\",\"io.netty.channel.nio.NioEventLoopGroup\",\"io.netty.util.internal.MacAddressUtil\",\"io.netty.buffer.PoolArenaMetric\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueL3Pad\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueuePad2\",\"io.netty.handler.codec.http.DefaultHttpHeaders\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueuePad0\",\"io.netty.channel.SingleThreadEventLoop\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueuePad1\",\"io.netty.util.AsciiString$2\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueProducerIndexField\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueL3Pad\",\"io.netty.util.internal.PriorityQueue\",\"io.netty.util.internal.InternalThreadLocalMap\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue\",\"io.netty.channel.ChannelFutureListener$3\",\"io.netty.channel.ChannelFutureListener$2\",\"io.netty.channel.ChannelFutureListener$1\",\"io.netty.buffer.PooledByteBufAllocatorMetric\",\"io.netty.util.AsciiString$1\",\"io.netty.util.concurrent.AbstractEventExecutor\",\"io.netty.util.ResourceLeak\",\"io.netty.channel.ChannelHandlerContext\",\"io.netty.buffer.PooledUnsafeDirectByteBuf\",\"io.netty.util.HashingStrategy\",\"io.netty.util.internal.MathUtil\",\"io.netty.channel.ChannelFutureListener\",\"io.netty.util.concurrent.BlockingOperationException\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueProducerLimitField\",\"io.netty.channel.nio.AbstractNioChannel\",\"io.netty.channel.FileRegion\",\"io.netty.util.ResourceLeakTracker\",\"io.netty.channel.nio.AbstractNioChannel$NioUnsafe\",\"io.netty.channel.ChannelProgressivePromise\",\"io.netty.channel.socket.nio.NioSocketChannel$NioSocketChannelUnsafe\",\"io.netty.channel.EventLoopGroup\",\"io.netty.bootstrap.FailedChannel$FailedChannelUnsafe\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue\",\"io.netty.util.concurrent.GenericFutureListener\",\"io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Supplier\",\"org.nico.ratel.landlords.print.SimplePrinter\",\"io.netty.channel.Channel$Unsafe\",\"io.netty.channel.VoidChannelPromise\",\"io.netty.util.internal.shaded.org.jctools.queues.QueueProgressIndicators\",\"io.netty.buffer.EmptyByteBuf\",\"io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe\",\"io.netty.util.concurrent.GlobalEventExecutor$1\",\"io.netty.util.concurrent.ScheduledFutureTask\",\"io.netty.util.AttributeKey\",\"io.netty.util.concurrent.RejectedExecutionHandlers\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseLinkedAtomicQueueConsumerNodeRef\",\"io.netty.channel.nio.SelectedSelectionKeySet\",\"io.netty.channel.ChannelInboundHandler\",\"io.netty.bootstrap.AbstractBootstrapConfig\",\"io.netty.util.AsciiString\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueProducerIndexField\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueL2Pad\",\"org.nico.ratel.landlords.client.proxy.WebsocketProxy$1\",\"io.netty.util.CharsetUtil\",\"io.netty.channel.DefaultChannelHandlerContext\",\"io.netty.util.concurrent.RejectedExecutionHandler\",\"io.netty.channel.socket.SocketChannel\",\"io.netty.buffer.PooledDirectByteBuf\",\"io.netty.util.concurrent.GenericProgressiveFutureListener\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueue\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueProducerFields\",\"io.netty.util.internal.logging.Slf4JLoggerFactory\",\"io.netty.channel.ChannelHandler$Sharable\",\"io.netty.channel.AbstractChannel$AnnotatedSocketException\",\"io.netty.channel.DefaultChannelPipeline$PendingHandlerCallback\",\"io.netty.util.internal.shaded.org.jctools.queues.SpscLinkedQueue\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueMidPad\",\"io.netty.util.NettyRuntime\",\"io.netty.util.concurrent.DefaultPromise$CauseHolder\",\"io.netty.channel.ChannelPipeline\",\"io.netty.channel.RecvByteBufAllocator\",\"io.netty.channel.ServerChannel\",\"io.netty.channel.ChannelException\",\"io.netty.resolver.AddressResolverGroup\",\"io.netty.util.AttributeKey$1\",\"io.netty.util.internal.shaded.org.jctools.util.Pow2\",\"io.netty.util.concurrent.ProgressivePromise\",\"io.netty.buffer.UnpooledDirectByteBuf\",\"io.netty.util.internal.PlatformDependent0$10\",\"io.netty.util.concurrent.ThreadProperties\",\"io.netty.buffer.UnpooledByteBufAllocator\",\"io.netty.util.Constant\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicReferenceArrayQueue\",\"io.netty.channel.ChannelOption$1\",\"io.netty.util.concurrent.RejectedExecutionHandlers$1\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseLinkedAtomicQueuePad0\",\"io.netty.buffer.PooledByteBufAllocator$PoolThreadLocalCache\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseLinkedAtomicQueuePad1\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseLinkedAtomicQueue\",\"io.netty.util.ResourceLeakDetector$Level\",\"io.netty.util.concurrent.CompleteFuture\",\"io.netty.util.concurrent.ProgressiveFuture\",\"io.netty.channel.AbstractChannel\",\"io.netty.util.concurrent.FastThreadLocalRunnable\",\"io.netty.util.concurrent.PromiseTask\",\"io.netty.util.internal.PlatformDependent$Mpsc\",\"io.netty.bootstrap.ChannelFactory\",\"io.netty.channel.MessageSizeEstimator$Handle\",\"io.netty.channel.socket.ServerSocketChannel\",\"io.netty.channel.nio.NioEventLoop$SelectorTuple\",\"io.netty.util.internal.shaded.org.jctools.queues.CircularArrayOffsetCalculator\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueMidPad\",\"io.netty.util.internal.EmptyArrays\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueColdProducerFields\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseLinkedAtomicQueuePad2\",\"io.netty.channel.ChannelFactory\",\"io.netty.channel.DefaultSelectStrategyFactory\",\"org.nico.ratel.landlords.client.proxy.Proxy\",\"io.netty.util.concurrent.Promise\",\"io.netty.util.concurrent.SingleThreadEventExecutor\",\"io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe\",\"io.netty.util.ByteProcessor\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueProducerFields\",\"io.netty.util.internal.shaded.org.jctools.queues.ConcurrentCircularArrayQueueL0Pad\",\"io.netty.channel.AbstractChannel$AnnotatedConnectException\",\"io.netty.buffer.ByteBufAllocatorMetric\",\"io.netty.channel.Channel\",\"io.netty.bootstrap.Bootstrap\",\"io.netty.channel.RecvByteBufAllocator$Handle\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueueConsumerNodeRef\",\"io.netty.channel.ReflectiveChannelFactory\",\"io.netty.buffer.PoolArena$DirectArena\",\"io.netty.util.internal.PlatformDependent$ThreadLocalRandomProvider\",\"io.netty.util.internal.logging.InternalLoggerFactory\",\"io.netty.util.internal.shaded.org.jctools.util.UnsafeAccess\",\"io.netty.util.concurrent.DefaultEventExecutorChooserFactory$PowerOfTwoEventExecutorChooser\",\"io.netty.util.internal.shaded.org.jctools.queues.IndexedQueueSizeUtil$IndexedQueue\",\"io.netty.buffer.AdvancedLeakAwareCompositeByteBuf\",\"io.netty.channel.DefaultChannelPipeline$TailContext\",\"io.netty.util.ConstantPool\",\"io.netty.channel.nio.NioTask\",\"io.netty.buffer.PoolSubpageMetric\",\"io.netty.buffer.WrappedCompositeByteBuf\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueColdProducerFields\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueProducerLimitField\",\"io.netty.channel.ChannelPromise\",\"io.netty.buffer.UnpooledUnsafeHeapByteBuf\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueue\",\"io.netty.bootstrap.AbstractBootstrap\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue\",\"io.netty.util.internal.ObjectUtil\",\"io.netty.channel.SelectStrategyFactory\",\"io.netty.channel.socket.ChannelOutputShutdownException\",\"io.netty.channel.DefaultChannelPromise\",\"io.netty.resolver.AddressResolver\",\"io.netty.channel.DefaultChannelId\",\"io.netty.buffer.AbstractByteBuf\",\"io.netty.channel.ChannelInitializer\",\"io.netty.util.concurrent.FutureListener\",\"io.netty.buffer.UnpooledUnsafeDirectByteBuf\",\"io.netty.buffer.PoolArena\",\"io.netty.util.AsciiString$CharEqualityComparator\",\"io.netty.util.internal.logging.InternalLogLevel\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueueColdProducerFields\",\"io.netty.util.ResourceLeakDetector\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscGrowableAtomicArrayQueue\",\"io.netty.channel.ChannelOutboundBuffer\",\"io.netty.util.concurrent.DefaultPromise\",\"io.netty.buffer.CompositeByteBuf\",\"io.netty.channel.ChannelOutboundInvoker\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueuePad2\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueuePad3\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueuePad1\",\"io.netty.channel.DefaultChannelPipeline\",\"io.netty.channel.ChannelOutboundBuffer$Entry\",\"io.netty.util.concurrent.MultithreadEventExecutorGroup\",\"io.netty.channel.socket.nio.NioSocketChannel\",\"io.netty.channel.WriteBufferWaterMark\",\"io.netty.channel.socket.SocketChannelConfig\",\"io.netty.channel.EventLoopException\",\"io.netty.channel.DefaultChannelPipeline$HeadContext\",\"io.netty.util.IntSupplier\",\"io.netty.buffer.ByteBuf\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.LinkedQueueAtomicNode\",\"io.netty.util.internal.logging.Slf4JLogger\",\"io.netty.util.concurrent.EventExecutorChooserFactory$EventExecutorChooser\",\"io.netty.util.DefaultAttributeMap\",\"io.netty.util.concurrent.FastThreadLocal\",\"io.netty.channel.socket.DuplexChannel\",\"io.netty.util.concurrent.DefaultEventExecutorChooserFactory$GenericEventExecutorChooser\",\"io.netty.buffer.SimpleLeakAwareCompositeByteBuf\",\"io.netty.util.internal.OutOfDirectMemoryError\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueuePad3\",\"io.netty.util.concurrent.AbstractScheduledEventExecutor$1\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.SpscLinkedAtomicQueue\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueuePad2\",\"io.netty.util.internal.IntegerHolder\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueuePad1\",\"io.netty.util.internal.PlatformDependent$Mpsc$1\",\"io.netty.util.NetUtil\",\"io.netty.util.concurrent.EventExecutorGroup\",\"io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$WaitStrategy\",\"io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf\",\"io.netty.buffer.WrappedByteBuf\",\"io.netty.channel.ChannelInboundInvoker\",\"io.netty.util.concurrent.DefaultEventExecutorChooserFactory\",\"io.netty.channel.ChannelFuture\",\"io.netty.util.internal.SystemPropertyUtil\",\"io.netty.util.concurrent.ThreadPerTaskExecutor\",\"io.netty.channel.AbstractChannel$CloseFuture\",\"io.netty.buffer.ByteBufUtil\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueL1Pad\",\"io.netty.buffer.PoolChunkListMetric\",\"io.netty.channel.ChannelConfig\",\"io.netty.channel.ChannelHandler\",\"io.netty.channel.DefaultSelectStrategy\",\"io.netty.channel.DefaultChannelPipeline$1\",\"io.netty.util.concurrent.FailedFuture\");\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/proxy/WebsocketProxy_ESTest_scaffolding.java",
        "class": "WebsocketProxy_ESTest_scaffolding",
        "name": "resetClasses",
        "return_type": "void",
        "modifiers": "private static",
        "parameters": [],
        "raw": "private static void resetClasses(){\n  org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(WebsocketProxy_ESTest_scaffolding.class.getClassLoader());\n  org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\"org.nico.ratel.landlords.client.proxy.WebsocketProxy\",\"io.netty.channel.ChannelHandlerAdapter\",\"io.netty.channel.ChannelInboundHandlerAdapter\",\"io.netty.util.internal.logging.InternalLoggerFactory\",\"io.netty.util.internal.logging.Slf4JLoggerFactory\",\"io.netty.util.internal.logging.AbstractInternalLogger\",\"io.netty.util.internal.logging.Slf4JLogger\",\"io.netty.channel.ChannelInitializer\",\"org.nico.ratel.landlords.client.proxy.WebsocketProxy$1\",\"io.netty.util.concurrent.AbstractEventExecutorGroup\",\"io.netty.util.concurrent.MultithreadEventExecutorGroup\",\"io.netty.util.NettyRuntime$AvailableProcessorsHolder\",\"io.netty.util.NettyRuntime\",\"io.netty.util.internal.SystemPropertyUtil\",\"io.netty.util.internal.SystemPropertyUtil$1\",\"io.netty.util.internal.ObjectUtil\",\"io.netty.channel.MultithreadEventLoopGroup\",\"io.netty.channel.nio.NioEventLoopGroup\",\"io.netty.channel.DefaultSelectStrategyFactory\",\"io.netty.util.concurrent.RejectedExecutionHandlers$1\",\"io.netty.util.concurrent.RejectedExecutionHandlers\",\"io.netty.util.concurrent.DefaultEventExecutorChooserFactory\",\"io.netty.util.concurrent.AbstractFuture\",\"io.netty.util.concurrent.DefaultPromise$CauseHolder\",\"io.netty.util.internal.ThrowableUtil\",\"io.netty.util.concurrent.DefaultPromise\",\"io.netty.util.concurrent.AbstractEventExecutor\",\"io.netty.util.concurrent.AbstractScheduledEventExecutor$1\",\"io.netty.util.concurrent.AbstractScheduledEventExecutor\",\"io.netty.util.concurrent.PromiseTask\",\"io.netty.util.concurrent.ScheduledFutureTask\",\"io.netty.util.concurrent.GlobalEventExecutor$1\",\"io.netty.util.concurrent.DefaultThreadFactory\",\"io.netty.util.internal.StringUtil\",\"io.netty.util.concurrent.GlobalEventExecutor$TaskRunner\",\"io.netty.util.concurrent.CompleteFuture\",\"io.netty.util.concurrent.FailedFuture\",\"io.netty.util.internal.DefaultPriorityQueue\",\"io.netty.util.concurrent.GlobalEventExecutor\",\"io.netty.util.concurrent.ThreadPerTaskExecutor\",\"io.netty.util.concurrent.SingleThreadEventExecutor$1\",\"io.netty.util.concurrent.SingleThreadEventExecutor$2\",\"io.netty.util.concurrent.SingleThreadEventExecutor\",\"io.netty.channel.SingleThreadEventLoop\",\"io.netty.channel.nio.NioEventLoop$2\",\"io.netty.channel.nio.NioEventLoop\",\"io.netty.channel.DefaultSelectStrategy\",\"io.netty.util.internal.PlatformDependent0$1\",\"io.netty.util.internal.ReflectionUtil\",\"io.netty.util.internal.PlatformDependent0$2\",\"io.netty.util.internal.PlatformDependent0$3\",\"io.netty.util.internal.PlatformDependent0$4\",\"io.netty.util.internal.PlatformDependent0$5\",\"io.netty.util.internal.PlatformDependent0$10\",\"io.netty.util.internal.PlatformDependent0\",\"io.netty.util.internal.PlatformDependent$1\",\"io.netty.util.internal.PlatformDependent$2\",\"io.netty.util.internal.CleanerJava6\",\"io.netty.util.internal.PlatformDependent\",\"io.netty.util.internal.PlatformDependent$Mpsc$1\",\"io.netty.util.internal.shaded.org.jctools.util.UnsafeAccess\",\"io.netty.util.internal.PlatformDependent$Mpsc\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueuePad1\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueProducerFields\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueuePad2\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueConsumerFields\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueuePad3\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueColdProducerFields\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue\",\"io.netty.util.internal.shaded.org.jctools.util.RangeUtil\",\"io.netty.util.internal.shaded.org.jctools.util.Pow2\",\"io.netty.util.internal.shaded.org.jctools.queues.CircularArrayOffsetCalculator\",\"io.netty.channel.nio.NioEventLoop$1\",\"io.netty.channel.nio.NioEventLoop$3\",\"io.netty.channel.nio.SelectedSelectionKeySet\",\"io.netty.channel.nio.NioEventLoop$4\",\"io.netty.channel.nio.NioEventLoop$SelectorTuple\",\"io.netty.channel.nio.SelectedSelectionKeySetSelector\",\"io.netty.util.concurrent.DefaultEventExecutorChooserFactory$PowerOfTwoEventExecutorChooser\",\"io.netty.util.concurrent.MultithreadEventExecutorGroup$1\",\"io.netty.bootstrap.AbstractBootstrap\",\"io.netty.resolver.AddressResolverGroup\",\"io.netty.resolver.DefaultAddressResolverGroup\",\"io.netty.bootstrap.Bootstrap\",\"io.netty.bootstrap.AbstractBootstrapConfig\",\"io.netty.bootstrap.BootstrapConfig\",\"io.netty.channel.ReflectiveChannelFactory\",\"org.nico.ratel.landlords.print.SimplePrinter\",\"io.netty.util.DefaultAttributeMap\",\"io.netty.channel.AbstractChannel\",\"io.netty.channel.nio.AbstractNioChannel\",\"io.netty.channel.ChannelMetadata\",\"io.netty.channel.nio.AbstractNioByteChannel\",\"io.netty.channel.socket.nio.NioSocketChannel\",\"io.netty.channel.VoidChannelPromise\",\"io.netty.channel.DefaultChannelPromise\",\"io.netty.channel.AbstractChannel$CloseFuture\",\"io.netty.util.internal.PlatformDependent0$8\",\"io.netty.util.internal.EmptyArrays\",\"io.netty.util.internal.MacAddressUtil\",\"io.netty.util.NetUtil\",\"io.netty.channel.DefaultChannelId\",\"io.netty.channel.ChannelException\",\"io.netty.bootstrap.FailedChannel\",\"io.netty.util.concurrent.SingleThreadEventExecutor$5\",\"io.netty.util.concurrent.FastThreadLocalRunnable\",\"io.netty.util.concurrent.FastThreadLocalThread\");\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/proxy/ProtobufProxy_ESTest_scaffolding.java",
        "class": "ProtobufProxy_ESTest_scaffolding",
        "name": "initEvoSuiteFramework",
        "return_type": "void",
        "modifiers": "@BeforeClass public static",
        "parameters": [],
        "raw": "@BeforeClass public static void initEvoSuiteFramework(){\n  org.evosuite.runtime.RuntimeSettings.className\u003d\"org.nico.ratel.landlords.client.proxy.ProtobufProxy\";\n  org.evosuite.runtime.GuiSupport.initialize();\n  org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads\u003d100;\n  org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop\u003d10000;\n  org.evosuite.runtime.RuntimeSettings.mockSystemIn\u003dtrue;\n  org.evosuite.runtime.RuntimeSettings.sandboxMode\u003dorg.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED;\n  org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT();\n  org.evosuite.runtime.classhandling.JDKClassResetter.init();\n  setSystemProperties();\n  initializeClasses();\n  org.evosuite.runtime.Runtime.getInstance().resetRuntime();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/proxy/ProtobufProxy_ESTest_scaffolding.java",
        "class": "ProtobufProxy_ESTest_scaffolding",
        "name": "initTestCase",
        "return_type": "void",
        "modifiers": "@Before public",
        "parameters": [],
        "raw": "@Before public void initTestCase(){\n  threadStopper.storeCurrentThreads();\n  threadStopper.startRecordingTime();\n  org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler();\n  org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode();\n  org.evosuite.runtime.GuiSupport.setHeadless();\n  org.evosuite.runtime.Runtime.getInstance().resetRuntime();\n  org.evosuite.runtime.agent.InstrumentingAgent.activate();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/proxy/ProtobufProxy_ESTest_scaffolding.java",
        "class": "ProtobufProxy_ESTest_scaffolding",
        "name": "doneWithTestCase",
        "return_type": "void",
        "modifiers": "@After public",
        "parameters": [],
        "raw": "@After public void doneWithTestCase(){\n  threadStopper.killAndJoinClientThreads();\n  org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks();\n  org.evosuite.runtime.classhandling.JDKClassResetter.reset();\n  resetClasses();\n  org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode();\n  org.evosuite.runtime.agent.InstrumentingAgent.deactivate();\n  org.evosuite.runtime.GuiSupport.restoreHeadlessMode();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/proxy/ProtobufProxy_ESTest_scaffolding.java",
        "class": "ProtobufProxy_ESTest_scaffolding",
        "name": "setSystemProperties",
        "return_type": "void",
        "modifiers": "public static",
        "parameters": [],
        "raw": "public static void setSystemProperties(){\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/proxy/ProtobufProxy_ESTest_scaffolding.java",
        "class": "ProtobufProxy_ESTest_scaffolding",
        "name": "initializeClasses",
        "return_type": "void",
        "modifiers": "private static",
        "parameters": [],
        "raw": "private static void initializeClasses(){\n  org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ProtobufProxy_ESTest_scaffolding.class.getClassLoader(),\"org.nico.ratel.landlords.client.proxy.Proxy\",\"io.netty.channel.EventLoopGroup\",\"io.netty.channel.ChannelHandler\",\"org.nico.ratel.landlords.client.proxy.ProtobufProxy\",\"io.netty.util.concurrent.EventExecutorGroup\");\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/proxy/ProtobufProxy_ESTest_scaffolding.java",
        "class": "ProtobufProxy_ESTest_scaffolding",
        "name": "resetClasses",
        "return_type": "void",
        "modifiers": "private static",
        "parameters": [],
        "raw": "private static void resetClasses(){\n  org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ProtobufProxy_ESTest_scaffolding.class.getClassLoader());\n  org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\"org.nico.ratel.landlords.client.proxy.ProtobufProxy\",\"io.netty.channel.ChannelHandlerAdapter\",\"io.netty.channel.ChannelInboundHandlerAdapter\",\"io.netty.util.internal.logging.InternalLoggerFactory\",\"io.netty.util.internal.logging.Slf4JLoggerFactory\",\"io.netty.util.internal.logging.AbstractInternalLogger\",\"io.netty.util.internal.logging.Slf4JLogger\",\"io.netty.channel.ChannelInitializer\",\"org.nico.ratel.landlords.client.proxy.ProtobufProxy$1\",\"io.netty.util.concurrent.AbstractEventExecutorGroup\",\"io.netty.util.concurrent.MultithreadEventExecutorGroup\",\"io.netty.util.NettyRuntime$AvailableProcessorsHolder\",\"io.netty.util.NettyRuntime\",\"io.netty.util.internal.SystemPropertyUtil\",\"io.netty.util.internal.SystemPropertyUtil$1\",\"io.netty.util.internal.ObjectUtil\",\"io.netty.channel.MultithreadEventLoopGroup\",\"io.netty.channel.nio.NioEventLoopGroup\",\"io.netty.channel.DefaultSelectStrategyFactory\",\"io.netty.util.concurrent.RejectedExecutionHandlers$1\",\"io.netty.util.concurrent.RejectedExecutionHandlers\",\"io.netty.util.concurrent.DefaultEventExecutorChooserFactory\",\"io.netty.util.concurrent.AbstractFuture\",\"io.netty.util.concurrent.DefaultPromise$CauseHolder\",\"io.netty.util.internal.ThrowableUtil\",\"io.netty.util.concurrent.DefaultPromise\",\"io.netty.util.concurrent.AbstractEventExecutor\",\"io.netty.util.concurrent.AbstractScheduledEventExecutor$1\",\"io.netty.util.concurrent.AbstractScheduledEventExecutor\",\"io.netty.util.concurrent.PromiseTask\",\"io.netty.util.concurrent.ScheduledFutureTask\",\"io.netty.util.concurrent.GlobalEventExecutor$1\",\"io.netty.util.concurrent.DefaultThreadFactory\",\"io.netty.util.internal.StringUtil\",\"io.netty.util.concurrent.GlobalEventExecutor$TaskRunner\",\"io.netty.util.concurrent.CompleteFuture\",\"io.netty.util.concurrent.FailedFuture\",\"io.netty.util.internal.DefaultPriorityQueue\",\"io.netty.util.concurrent.GlobalEventExecutor\",\"io.netty.util.concurrent.ThreadPerTaskExecutor\",\"io.netty.util.concurrent.SingleThreadEventExecutor$1\",\"io.netty.util.concurrent.SingleThreadEventExecutor$2\",\"io.netty.util.concurrent.SingleThreadEventExecutor\",\"io.netty.channel.SingleThreadEventLoop\",\"io.netty.channel.nio.NioEventLoop$2\",\"io.netty.channel.nio.NioEventLoop\",\"io.netty.channel.DefaultSelectStrategy\",\"io.netty.util.internal.PlatformDependent0$1\",\"io.netty.util.internal.ReflectionUtil\",\"io.netty.util.internal.PlatformDependent0$2\",\"io.netty.util.internal.PlatformDependent0$3\",\"io.netty.util.internal.PlatformDependent0$4\",\"io.netty.util.internal.PlatformDependent0$5\",\"io.netty.util.internal.PlatformDependent0$10\",\"io.netty.util.internal.PlatformDependent0\",\"io.netty.util.internal.PlatformDependent$1\",\"io.netty.util.internal.PlatformDependent$2\",\"io.netty.util.internal.CleanerJava6\",\"io.netty.util.internal.PlatformDependent\",\"io.netty.util.internal.PlatformDependent$Mpsc$1\",\"io.netty.util.internal.shaded.org.jctools.util.UnsafeAccess\",\"io.netty.util.internal.PlatformDependent$Mpsc\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueuePad1\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueProducerFields\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueuePad2\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueConsumerFields\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueuePad3\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueColdProducerFields\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue\",\"io.netty.util.internal.shaded.org.jctools.util.RangeUtil\",\"io.netty.util.internal.shaded.org.jctools.util.Pow2\",\"io.netty.util.internal.shaded.org.jctools.queues.CircularArrayOffsetCalculator\",\"io.netty.channel.nio.NioEventLoop$1\",\"io.netty.channel.nio.NioEventLoop$3\",\"io.netty.channel.nio.SelectedSelectionKeySet\",\"io.netty.channel.nio.NioEventLoop$4\",\"io.netty.channel.nio.NioEventLoop$SelectorTuple\",\"io.netty.channel.nio.SelectedSelectionKeySetSelector\",\"io.netty.util.concurrent.DefaultEventExecutorChooserFactory$PowerOfTwoEventExecutorChooser\",\"io.netty.util.concurrent.MultithreadEventExecutorGroup$1\",\"io.netty.bootstrap.AbstractBootstrap\",\"io.netty.resolver.AddressResolverGroup\",\"io.netty.resolver.DefaultAddressResolverGroup\",\"io.netty.bootstrap.Bootstrap\",\"io.netty.bootstrap.AbstractBootstrapConfig\",\"io.netty.bootstrap.BootstrapConfig\",\"io.netty.channel.ReflectiveChannelFactory\",\"org.nico.ratel.landlords.print.SimplePrinter\",\"io.netty.util.DefaultAttributeMap\",\"io.netty.channel.AbstractChannel\",\"io.netty.channel.nio.AbstractNioChannel\",\"io.netty.channel.ChannelMetadata\",\"io.netty.channel.nio.AbstractNioByteChannel\",\"io.netty.channel.socket.nio.NioSocketChannel\",\"io.netty.channel.VoidChannelPromise\",\"io.netty.channel.DefaultChannelPromise\",\"io.netty.channel.AbstractChannel$CloseFuture\",\"io.netty.util.internal.PlatformDependent0$8\",\"io.netty.util.internal.EmptyArrays\",\"io.netty.util.internal.MacAddressUtil\",\"io.netty.util.NetUtil\",\"io.netty.channel.DefaultChannelId\",\"io.netty.channel.ChannelException\",\"io.netty.bootstrap.FailedChannel\",\"io.netty.util.concurrent.SingleThreadEventExecutor$5\",\"io.netty.util.concurrent.FastThreadLocalRunnable\",\"io.netty.util.concurrent.FastThreadLocalThread\");\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/proxy/WebsocketProxy_ESTest.java",
        "class": "WebsocketProxy_ESTest",
        "name": "test0",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test0() throws Throwable {\n  WebsocketProxy websocketProxy0\u003dnew WebsocketProxy();\n  try {\n    websocketProxy0.connect(\"%asgX?T\u003c)%f\",(-1092));\n    fail(\"Expecting exception: URISyntaxException\");\n  }\n catch (  URISyntaxException e) {\n    verifyException(\"java.net.URI$Parser\",e);\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/event/ClientEventListener_ESTest_scaffolding.java",
        "class": "ClientEventListener_ESTest_scaffolding",
        "name": "initEvoSuiteFramework",
        "return_type": "void",
        "modifiers": "@BeforeClass public static",
        "parameters": [],
        "raw": "@BeforeClass public static void initEvoSuiteFramework(){\n  org.evosuite.runtime.RuntimeSettings.className\u003d\"org.nico.ratel.landlords.client.event.ClientEventListener\";\n  org.evosuite.runtime.GuiSupport.initialize();\n  org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads\u003d100;\n  org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop\u003d10000;\n  org.evosuite.runtime.RuntimeSettings.mockSystemIn\u003dtrue;\n  org.evosuite.runtime.RuntimeSettings.sandboxMode\u003dorg.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED;\n  org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT();\n  org.evosuite.runtime.classhandling.JDKClassResetter.init();\n  setSystemProperties();\n  initializeClasses();\n  org.evosuite.runtime.Runtime.getInstance().resetRuntime();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/event/ClientEventListener_ESTest_scaffolding.java",
        "class": "ClientEventListener_ESTest_scaffolding",
        "name": "clearEvoSuiteFramework",
        "return_type": "void",
        "modifiers": "@AfterClass public static",
        "parameters": [],
        "raw": "@AfterClass public static void clearEvoSuiteFramework(){\n  Sandbox.resetDefaultSecurityManager();\n  java.lang.System.setProperties((java.util.Properties)defaultProperties.clone());\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/event/ClientEventListener_ESTest_scaffolding.java",
        "class": "ClientEventListener_ESTest_scaffolding",
        "name": "initTestCase",
        "return_type": "void",
        "modifiers": "@Before public",
        "parameters": [],
        "raw": "@Before public void initTestCase(){\n  threadStopper.storeCurrentThreads();\n  threadStopper.startRecordingTime();\n  org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler();\n  org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode();\n  setSystemProperties();\n  org.evosuite.runtime.GuiSupport.setHeadless();\n  org.evosuite.runtime.Runtime.getInstance().resetRuntime();\n  org.evosuite.runtime.agent.InstrumentingAgent.activate();\n  org.evosuite.runtime.util.SystemInUtil.getInstance().initForTestCase();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/event/ClientEventListener_ESTest_scaffolding.java",
        "class": "ClientEventListener_ESTest_scaffolding",
        "name": "doneWithTestCase",
        "return_type": "void",
        "modifiers": "@After public",
        "parameters": [],
        "raw": "@After public void doneWithTestCase(){\n  threadStopper.killAndJoinClientThreads();\n  org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks();\n  org.evosuite.runtime.classhandling.JDKClassResetter.reset();\n  resetClasses();\n  org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode();\n  org.evosuite.runtime.agent.InstrumentingAgent.deactivate();\n  org.evosuite.runtime.GuiSupport.restoreHeadlessMode();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/event/ClientEventListener_ESTest_scaffolding.java",
        "class": "ClientEventListener_ESTest_scaffolding",
        "name": "setSystemProperties",
        "return_type": "void",
        "modifiers": "public static",
        "parameters": [],
        "raw": "public static void setSystemProperties(){\n  java.lang.System.setProperties((java.util.Properties)defaultProperties.clone());\n  java.lang.System.setProperty(\"file.encoding\",\"UTF-8\");\n  java.lang.System.setProperty(\"java.awt.headless\",\"true\");\n  java.lang.System.setProperty(\"java.io.tmpdir\",\"/tmp\");\n  java.lang.System.setProperty(\"user.country\",\"US\");\n  java.lang.System.setProperty(\"user.dir\",\"/home/lvdthieu/code-gen/ratel/landlords-client\");\n  java.lang.System.setProperty(\"user.home\",\"/home/lvdthieu\");\n  java.lang.System.setProperty(\"user.language\",\"en\");\n  java.lang.System.setProperty(\"user.name\",\"lvdthieu\");\n  java.lang.System.setProperty(\"user.timezone\",\"Asia/Ho_Chi_Minh\");\n  java.lang.System.setProperty(\"sun.arch.data.model\",\"64\");\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/event/ClientEventListener_ESTest_scaffolding.java",
        "class": "ClientEventListener_ESTest_scaffolding",
        "name": "initializeClasses",
        "return_type": "void",
        "modifiers": "private static",
        "parameters": [],
        "raw": "private static void initializeClasses(){\n  org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ClientEventListener_ESTest_scaffolding.class.getClassLoader(),\"com.google.gson.internal.bind.TimeTypeAdapter$1\",\"io.netty.channel.unix.DomainSocketChannelConfig\",\"org.nico.noson.handler.reversal.ReversalHandlerQueue\",\"io.netty.channel.ChannelInboundHandlerAdapter\",\"io.netty.util.internal.PlatformDependent0\",\"com.google.protobuf.CodedInputStream$UnsafeDirectNioDecoder\",\"com.google.gson.JsonDeserializationContext\",\"io.netty.channel.kqueue.KQueueDatagramChannel$KQueueDatagramChannelUnsafe\",\"io.netty.channel.unix.Errors$NativeConnectException\",\"io.netty.util.internal.ThreadLocalRandom\",\"io.netty.channel.MaxMessagesRecvByteBufAllocator\",\"com.google.protobuf.DescriptorProtos$EnumOptionsOrBuilder\",\"com.google.protobuf.ByteString$LeafByteString\",\"io.netty.util.internal.PromiseNotificationUtil\",\"io.netty.channel.ChannelOutboundBuffer$MessageProcessor\",\"org.nico.noson.NosonConfig\",\"org.nico.ratel.landlords.helper.MapHelper\",\"io.netty.channel.socket.ServerSocketChannelConfig\",\"io.netty.channel.epoll.EpollRecvByteAllocatorStreamingHandle\",\"io.netty.util.concurrent.AbstractScheduledEventExecutor\",\"com.google.protobuf.GeneratedMessageV3$ExtensionDescriptorRetriever\",\"com.google.gson.internal.Excluder\",\"io.netty.buffer.PoolThreadCache$MemoryRegionCache$Entry\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_GAME_POKER_PLAY_MISMATCH\",\"io.netty.channel.DefaultMaxMessagesRecvByteBufAllocator\",\"com.google.protobuf.Descriptors$DescriptorPool$SearchFilter\",\"io.netty.util.internal.PlatformDependent$1\",\"io.netty.util.internal.PlatformDependent$2\",\"com.google.protobuf.DescriptorProtos$EnumValueOptions$1\",\"io.netty.util.internal.shaded.org.jctools.queues.LinkedQueueNode\",\"io.netty.buffer.FixedCompositeByteBuf\",\"io.netty.channel.kqueue.KQueueDomainSocketChannelConfig\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_GAME_POKER_PLAY_PASS\",\"io.netty.util.internal.logging.AbstractInternalLogger\",\"com.google.protobuf.GeneratedMessageV3$1\",\"io.netty.channel.AbstractChannelHandlerContext\",\"io.netty.util.internal.LongAdderCounter\",\"io.netty.buffer.PoolArena$SizeClass\",\"io.netty.channel.ChannelOutboundHandler\",\"com.google.protobuf.Descriptors$DescriptorPool\",\"io.netty.util.internal.UnpaddedInternalThreadLocalMap\",\"com.google.protobuf.Internal$BooleanList\",\"io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory\",\"io.netty.util.ResourceLeakDetector$LeakEntry\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable$FieldAccessor\",\"com.google.gson.internal.ObjectConstructor\",\"com.google.protobuf.Writer\",\"io.netty.util.HashingStrategy$1\",\"io.netty.util.concurrent.DefaultThreadFactory\",\"com.google.protobuf.DescriptorProtos$OneofDescriptorProtoOrBuilder\",\"io.netty.buffer.ByteBufAllocator\",\"io.netty.channel.embedded.EmbeddedChannel$State\",\"com.google.gson.internal.bind.ObjectTypeAdapter\",\"io.netty.channel.kqueue.AbstractKQueueChannel\",\"io.netty.channel.epoll.AbstractEpollStreamChannel\",\"io.netty.channel.embedded.EmbeddedChannel$EmbeddedChannelPipeline\",\"io.netty.buffer.SwappedByteBuf\",\"com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter\",\"io.netty.util.Recycler$Handle\",\"io.netty.channel.socket.DatagramPacket\",\"com.google.protobuf.IntArrayList\",\"io.netty.channel.kqueue.AbstractKQueueServerChannel\",\"io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceInTask\",\"io.netty.buffer.AbstractByteBufAllocator\",\"io.netty.buffer.WrappedUnpooledUnsafeDirectByteBuf\",\"io.netty.util.internal.PriorityQueueNode\",\"com.google.gson.internal.bind.JsonTreeWriter$1\",\"com.google.protobuf.DescriptorProtos$FileDescriptorProto$1\",\"com.google.protobuf.Writer$FieldOrder\",\"io.netty.channel.DefaultFileRegion\",\"io.netty.channel.kqueue.KQueueRecvByteAllocatorHandle\",\"com.google.gson.internal.bind.TypeAdapters\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo$Builder\",\"com.google.protobuf.DescriptorProtos$ServiceDescriptorProtoOrBuilder\",\"io.netty.util.internal.InternalThreadLocalMap\",\"com.google.protobuf.DescriptorProtos$UninterpretedOption$1\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_SHOW_OPTIONS_SETTING\",\"io.netty.channel.ChannelHandlerContext\",\"io.netty.util.HashingStrategy\",\"com.google.gson.FieldNamingPolicy\",\"io.netty.channel.FixedRecvByteBufAllocator\",\"io.netty.channel.epoll.EpollRecvByteAllocatorHandle\",\"io.netty.util.concurrent.BlockingOperationException\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueProducerLimitField\",\"io.netty.channel.FileRegion\",\"com.google.protobuf.ExtensionRegistryFactory\",\"io.netty.channel.embedded.EmbeddedChannelId\",\"io.netty.channel.kqueue.KQueueServerDomainSocketChannel\",\"com.google.protobuf.MessageLiteOrBuilder\",\"io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Supplier\",\"io.netty.channel.Channel$Unsafe\",\"com.google.protobuf.MessageLite\",\"com.google.protobuf.UnsafeUtil$1\",\"com.google.protobuf.DescriptorProtos$EnumValueDescriptorProtoOrBuilder\",\"com.google.protobuf.CodedInputStream\",\"com.google.protobuf.Schema\",\"org.nico.noson.entity.NoType\",\"io.netty.channel.ChannelOutboundBuffer$Entry$1\",\"io.netty.channel.unix.Errors$NativeIoException\",\"com.google.protobuf.TextFormat$InvalidEscapeSequenceException\",\"io.netty.channel.epoll.EpollDomainSocketChannel$EpollDomainUnsafe\",\"org.nico.ratel.landlords.utils.OptionsUtils\",\"org.nico.noson.Noson\",\"io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory$1\",\"io.netty.channel.FailedChannelFuture\",\"io.netty.channel.unix.DomainSocketReadMode\",\"com.google.protobuf.GeneratedMessageV3$ExtendableMessage$ExtensionWriter\",\"io.netty.util.CharsetUtil\",\"org.nico.noson.scanner.buddy.JsonKeyParser\",\"io.netty.util.concurrent.GenericProgressiveFutureListener\",\"io.netty.channel.AbstractChannel$AnnotatedSocketException\",\"io.netty.buffer.UnsafeDirectSwappedByteBuf\",\"io.netty.util.NettyRuntime\",\"org.nico.noson.handler.reversal.impl.ReversalVerityHandler\",\"io.netty.buffer.PooledSlicedByteBuf\",\"io.netty.channel.ChannelPipeline\",\"org.nico.noson.scanner.impl.SimpleScanner$ScanState\",\"io.netty.channel.ChannelException\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$1\",\"io.netty.util.ReferenceCountUtil\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$Builder\",\"io.netty.util.internal.PlatformDependent0$10\",\"com.google.gson.TypeAdapterFactory\",\"io.netty.channel.ChannelOption$1\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseLinkedAtomicQueuePad0\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseLinkedAtomicQueuePad1\",\"io.netty.util.concurrent.CompleteFuture\",\"io.netty.util.Recycler$DefaultHandle\",\"io.netty.channel.epoll.EpollDatagramChannel\",\"io.netty.channel.epoll.EpollSocketChannel\",\"io.netty.channel.unix.DomainSocketChannel\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueMidPad\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_GAME_POKER_PLAY\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseLinkedAtomicQueuePad2\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_SHOW_POKERS\",\"com.google.protobuf.DescriptorProtos$MethodOptions$IdempotencyLevel$1\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_GAME_READY\",\"io.netty.util.ByteProcessor$IndexOfProcessor\",\"io.netty.util.ByteProcessor\",\"com.google.protobuf.DescriptorProtos$ExtensionRangeOptionsOrBuilder\",\"com.google.protobuf.DescriptorProtos$FileDescriptorProtoOrBuilder\",\"io.netty.channel.kqueue.KQueueServerSocketChannelConfig\",\"io.netty.util.internal.shaded.org.jctools.queues.ConcurrentCircularArrayQueueL0Pad\",\"com.google.protobuf.DescriptorProtos$FieldOptionsOrBuilder\",\"io.netty.channel.RecvByteBufAllocator$Handle\",\"com.google.protobuf.Descriptors$EnumValueDescriptor\",\"com.google.protobuf.DescriptorProtos$ExtensionRangeOptions\",\"com.google.protobuf.AbstractParser\",\"com.google.protobuf.CodedInputStream$IterableDirectByteBufferDecoder\",\"io.netty.util.internal.RecyclableArrayList$1\",\"com.google.protobuf.GeneratedMessageV3$Builder\",\"io.netty.channel.DefaultChannelPipeline$TailContext\",\"com.google.protobuf.GeneratedMessageV3$ExtendableBuilder\",\"io.netty.buffer.PoolSubpageMetric\",\"io.netty.channel.AbstractServerChannel\",\"org.nico.noson.entity.TypeBean\",\"io.netty.channel.kqueue.AbstractKQueueStreamChannel\",\"com.google.protobuf.DescriptorProtos$FileOptions\",\"com.google.protobuf.AbstractMessageLite\",\"org.nico.noson.handler.reversal.impl.ReversalNosonHandler\",\"io.netty.channel.epoll.AbstractEpollServerChannel$EpollServerSocketUnsafe\",\"com.google.protobuf.DescriptorProtos$UninterpretedOptionOrBuilder\",\"io.netty.channel.socket.ChannelOutputShutdownException\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProtoOrBuilder\",\"io.netty.channel.ChannelDuplexHandler\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_GAME_POKER_PLAY_INVALID\",\"com.google.protobuf.LazyFieldLite\",\"com.google.protobuf.Utf8\",\"com.google.protobuf.UnsafeUtil$Android32MemoryAccessor\",\"io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf$1\",\"io.netty.buffer.UnpooledDuplicatedByteBuf\",\"com.google.protobuf.LazyStringList\",\"com.google.protobuf.Utf8$UnsafeProcessor\",\"com.google.gson.internal.bind.SqlDateTypeAdapter$1\",\"io.netty.buffer.AbstractDerivedByteBuf\",\"org.nico.noson.scanner.buddy.JsonFieldParser\",\"io.netty.buffer.UnpooledSlicedByteBuf\",\"com.google.gson.internal.ConstructorConstructor\",\"org.nico.ratel.landlords.print.SimpleWriter\",\"com.google.protobuf.Descriptors$FieldDescriptor$JavaType\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_SHOW_OPTIONS_PVP\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_SHOW_POKERS$1\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_GAME_LANDLORD_CYCLE\",\"com.google.protobuf.DescriptorProtos$ServiceOptions$1\",\"io.netty.buffer.ByteBuf\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.LinkedQueueAtomicNode\",\"com.google.gson.annotations.JsonAdapter\",\"com.google.protobuf.Descriptors$EnumDescriptor\",\"org.nico.noson.util.string.CharUtils\",\"com.google.protobuf.WireFormat$JavaType\",\"org.nico.noson.util.type.TypeUtils\",\"com.google.protobuf.Descriptors$Descriptor\",\"io.netty.util.NetUtil\",\"io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf\",\"io.netty.buffer.WrappedByteBuf\",\"io.netty.channel.kqueue.AcceptFilter\",\"io.netty.channel.SingleThreadEventLoop$NonWakeupRunnable\",\"com.google.gson.FieldNamingPolicy$4\",\"com.google.gson.FieldNamingPolicy$3\",\"com.google.protobuf.DescriptorProtos$ExtensionRangeOptions$Builder\",\"com.google.gson.annotations.Since\",\"com.google.gson.FieldNamingPolicy$6\",\"io.netty.channel.unix.ServerDomainSocketChannel\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueL1Pad\",\"com.google.gson.FieldNamingPolicy$5\",\"com.google.gson.internal.JsonReaderInternalAccess\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_ROOM_JOIN_FAIL_BY_INEXIST\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_SHOW_OPTIONS\",\"com.google.protobuf.DescriptorProtos$EnumValueDescriptorProto$Builder\",\"com.google.gson.FieldNamingPolicy$2\",\"com.google.gson.FieldNamingPolicy$1\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_SHOW_OPTIONS_PVE\",\"io.netty.channel.kqueue.KQueueDomainSocketChannel$KQueueDomainUnsafe\",\"io.netty.util.AttributeMap\",\"com.google.protobuf.DescriptorProtos$OneofDescriptorProto\",\"io.netty.util.internal.Cleaner\",\"io.netty.util.concurrent.ScheduledFuture\",\"io.netty.channel.kqueue.KQueueDatagramChannel\",\"io.netty.buffer.CompositeByteBuf$Component\",\"io.netty.channel.socket.DatagramChannel\",\"io.netty.channel.unix.DatagramSocketAddress\",\"io.netty.channel.unix.DomainSocketAddress\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_GAME_POKER_PLAY_ORDER_ERROR\",\"com.google.protobuf.InvalidProtocolBufferException\",\"com.google.protobuf.Descriptors$MethodDescriptor\",\"io.netty.channel.epoll.EpollServerChannelConfig\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto$1\",\"com.google.protobuf.GeneratedMessageLite$GeneratedExtension\",\"com.google.gson.internal.JavaVersion\",\"io.netty.channel.AbstractChannelHandlerContext$WriteTask\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ReservedRangeOrBuilder\",\"com.google.protobuf.DescriptorProtos$MethodDescriptorProto$Builder\",\"com.google.protobuf.DescriptorProtos$MessageOptions$1\",\"io.netty.util.internal.logging.InternalLogger\",\"org.nico.noson.handler.reversal.impl.ReversalObjectHandler\",\"org.nico.noson.scanner.NoScanner\",\"io.netty.channel.embedded.EmbeddedChannel$EmbeddedUnsafe\",\"io.netty.buffer.AbstractReferenceCountedByteBuf\",\"com.google.protobuf.DescriptorProtos$ExtensionRangeOptions$1\",\"io.netty.buffer.UnpooledHeapByteBuf\",\"io.netty.util.concurrent.EventExecutor\",\"com.google.protobuf.DescriptorProtos$UninterpretedOption$Builder\",\"com.google.gson.stream.JsonReader$1\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueueProducerNodeRef\",\"io.netty.channel.SucceededChannelFuture\",\"io.netty.channel.ChannelOption\",\"io.netty.util.internal.ThreadLocalRandom$1\",\"io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Consumer\",\"io.netty.channel.DefaultChannelPipeline$PendingHandlerAddedTask\",\"io.netty.channel.epoll.EpollServerSocketChannel\",\"io.netty.util.concurrent.ImmediateEventExecutor\",\"io.netty.channel.kqueue.KQueueSocketChannel\",\"io.netty.channel.unix.LimitsStaticallyReferencedJniMethods\",\"com.google.gson.internal.bind.TreeTypeAdapter\",\"com.google.protobuf.DescriptorProtos$MethodDescriptorProto$1\",\"com.google.gson.stream.JsonWriter\",\"com.google.gson.internal.bind.ArrayTypeAdapter$1\",\"com.google.protobuf.MapEntryLite$Metadata\",\"org.nico.noson.scanner.buddy.JsonFieldParser$ParserResult\",\"io.netty.util.concurrent.AbstractFuture\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueL2Pad\",\"com.google.protobuf.Descriptors$FileDescriptor$InternalDescriptorAssigner\",\"com.google.protobuf.UnsafeUtil$JvmMemoryAccessor\",\"io.netty.util.ReferenceCounted\",\"io.netty.buffer.PooledDuplicatedByteBuf$1\",\"com.google.protobuf.DescriptorProtos$EnumOptions\",\"io.netty.util.ResourceLeakDetectorFactory\",\"io.netty.channel.kqueue.KQueueChannelConfig\",\"com.google.protobuf.CodedOutputStream$UnsafeDirectNioEncoder\",\"com.google.gson.internal.bind.JsonTreeReader$1\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_GAME_WATCH$1\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_GAME_WATCH$2\",\"io.netty.channel.RecvByteBufAllocator$ExtendedHandle\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfoOrBuilder\",\"io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf$1\",\"io.netty.channel.ChannelId\",\"io.netty.buffer.CompositeByteBuf$ComponentList\",\"org.nico.ratel.landlords.enums.PokerType\",\"org.nico.noson.verify.SymbolVerify\",\"com.google.protobuf.CodedOutputStream$ArrayEncoder\",\"io.netty.channel.MessageSizeEstimator\",\"com.google.protobuf.UnknownFieldSet$Parser\",\"com.google.protobuf.AbstractProtobufList\",\"io.netty.channel.epoll.EpollDomainSocketChannel\",\"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory\",\"com.google.protobuf.DescriptorProtos$FieldOptions$JSType$1\",\"io.netty.channel.AbstractChannel$AbstractUnsafe\",\"io.netty.channel.epoll.EpollChannelConfig\",\"io.netty.buffer.UnpooledUnsafeNoCleanerDirectByteBuf\",\"io.netty.buffer.PoolThreadCache\",\"com.google.gson.internal.bind.TypeAdapters$2\",\"com.google.gson.internal.bind.TypeAdapters$1\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueL3Pad\",\"com.google.gson.internal.bind.TypeAdapters$8\",\"com.google.gson.internal.bind.TypeAdapters$7\",\"com.google.gson.internal.bind.TypeAdapters$9\",\"com.google.gson.internal.bind.TypeAdapters$4\",\"com.google.gson.internal.bind.TypeAdapters$3\",\"com.google.gson.internal.bind.TypeAdapters$6\",\"com.google.gson.internal.bind.TypeAdapters$5\",\"io.netty.util.AsciiString$2\",\"org.nico.noson.scanner.impl.SimpleScanner$SimpleStruct\",\"io.netty.util.internal.PriorityQueue\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue\",\"io.netty.channel.ChannelFutureListener$3\",\"io.netty.channel.ChannelFutureListener$2\",\"io.netty.channel.ChannelFutureListener$1\",\"io.netty.util.AsciiString$1\",\"com.google.protobuf.DescriptorProtos$ServiceOptions$Builder\",\"io.netty.util.concurrent.AbstractEventExecutor\",\"com.google.protobuf.ByteString$ByteIterator\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_PVE_DIFFICULTY_NOT_SUPPORT\",\"io.netty.channel.ChannelProgressivePromise\",\"com.google.protobuf.ByteString$LiteralByteString\",\"com.google.protobuf.InvalidProtocolBufferException$InvalidWireTypeException\",\"com.google.gson.JsonSyntaxException\",\"io.netty.channel.AbstractServerChannel$DefaultServerUnsafe\",\"io.netty.util.concurrent.GenericFutureListener\",\"com.google.protobuf.Utf8$UnpairedSurrogateException\",\"org.nico.ratel.landlords.print.SimplePrinter\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProto$1\",\"com.google.protobuf.Internal$LongList\",\"com.google.protobuf.MapField$Converter\",\"com.google.protobuf.MapField\",\"io.netty.util.concurrent.GlobalEventExecutor$2\",\"io.netty.util.concurrent.GlobalEventExecutor$1\",\"io.netty.util.AttributeKey\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseLinkedAtomicQueueConsumerNodeRef\",\"io.netty.util.Recycler$WeakOrderQueue$Head\",\"io.netty.channel.local.LocalServerChannel\",\"io.netty.util.concurrent.PromiseNotifier\",\"com.google.protobuf.DescriptorProtos$MethodOptions$1\",\"com.google.protobuf.Message$Builder\",\"io.netty.util.UncheckedBooleanSupplier$2\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_ROOM_PLAY_FAIL_BY_INEXIST\",\"io.netty.util.UncheckedBooleanSupplier$1\",\"com.google.gson.TypeAdapter\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_GAME_LANDLORD_CONFIRM\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueProducerIndexField\",\"com.google.protobuf.DescriptorProtos$ServiceDescriptorProto$Builder\",\"com.google.gson.internal.bind.SqlDateTypeAdapter\",\"io.netty.channel.kqueue.KQueueDatagramChannelConfig\",\"com.google.protobuf.UnsafeUtil$Android64MemoryAccessor\",\"org.nico.noson.scanner.impl.SimpleScanner\",\"com.google.protobuf.DescriptorProtos$EnumValueOptions\",\"com.google.protobuf.DescriptorProtos$ServiceOptions\",\"io.netty.util.internal.logging.Slf4JLoggerFactory\",\"io.netty.util.concurrent.SucceededFuture\",\"io.netty.channel.ChannelHandler$Sharable\",\"io.netty.util.concurrent.DefaultPromise$CauseHolder\",\"com.google.protobuf.ByteString$CodedBuilder\",\"io.netty.channel.ServerChannel\",\"com.google.protobuf.Descriptors$FieldDescriptor$Type\",\"io.netty.util.AttributeKey$1\",\"com.google.protobuf.DescriptorProtos$OneofDescriptorProto$1\",\"org.nico.ratel.landlords.entity.ServerTransferData$ServerTransferDataProtoc$Builder\",\"io.netty.buffer.UnpooledDirectByteBuf\",\"org.nico.noson.adapter.JsonParseAdapter\",\"com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter\",\"com.google.protobuf.CodedOutputStream$ByteOutputEncoder\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicReferenceArrayQueue\",\"com.google.protobuf.RepeatedFieldBuilderV3\",\"io.netty.util.ResourceLeakDetector$Level\",\"io.netty.buffer.UnpooledByteBufAllocator$InstrumentedUnpooledHeapByteBuf\",\"org.nico.ratel.landlords.enums.ServerEventCode\",\"io.netty.util.concurrent.FastThreadLocalRunnable\",\"io.netty.util.concurrent.PromiseTask\",\"io.netty.channel.MessageSizeEstimator$Handle\",\"io.netty.channel.epoll.AbstractEpollChannel\",\"com.google.protobuf.WireFormat\",\"io.netty.util.concurrent.Promise\",\"io.netty.channel.unix.FileDescriptor\",\"io.netty.channel.AbstractChannel$AnnotatedConnectException\",\"io.netty.buffer.ByteBufAllocatorMetric\",\"com.google.gson.stream.MalformedJsonException\",\"com.google.gson.internal.bind.DateTypeAdapter$1\",\"io.netty.buffer.ReadOnlyUnsafeDirectByteBuf\",\"io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask\",\"io.netty.util.internal.shaded.org.jctools.util.UnsafeAccess\",\"org.nico.noson.handler.reversal.impl.ReversalArrayHandler\",\"io.netty.channel.epoll.EpollSocketChannel$EpollSocketChannelUnsafe\",\"io.netty.buffer.AdvancedLeakAwareCompositeByteBuf\",\"org.nico.ratel.landlords.entity.ServerTransferData$ServerTransferDataProtoc$1\",\"org.nico.noson.cache.Cache\",\"io.netty.channel.DefaultAddressedEnvelope\",\"com.google.protobuf.MapEntry\",\"com.google.protobuf.DescriptorProtos$FileDescriptorProto$Builder\",\"io.netty.util.ConstantPool\",\"com.google.protobuf.Descriptors$DescriptorPool$DescriptorIntPair\",\"com.google.protobuf.GeneratedMessage$ExtensionDescriptorRetriever\",\"com.google.gson.internal.bind.DateTypeAdapter\",\"io.netty.util.BooleanSupplier\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProto$EnumReservedRange$1\",\"com.google.protobuf.GeneratedMessageV3$UnusedPrivateParameter\",\"io.netty.channel.DefaultMessageSizeEstimator$HandleImpl\",\"io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueue\",\"com.google.protobuf.DescriptorProtos$EnumValueOptions$Builder\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProto$EnumReservedRangeOrBuilder\",\"com.google.gson.internal.reflect.ReflectionAccessor\",\"io.netty.channel.DefaultChannelPromise\",\"com.google.protobuf.DescriptorProtos$EnumOptions$1\",\"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField\",\"io.netty.buffer.PoolArena\",\"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1\",\"io.netty.util.AsciiString$CharEqualityComparator\",\"io.netty.util.internal.logging.InternalLogLevel\",\"com.google.protobuf.DescriptorProtos$FileDescriptorProto\",\"com.google.protobuf.DescriptorProtos$EnumValueDescriptorProto\",\"io.netty.buffer.CompositeByteBuf\",\"org.nico.ratel.landlords.entity.ServerTransferData$ServerTransferDataProtoc\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_GAME_LANDLORD_CONFIRM$1\",\"io.netty.channel.epoll.EpollDomainSocketChannelConfig\",\"io.netty.channel.ChannelOutboundInvoker\",\"io.netty.buffer.PoolChunk\",\"com.google.protobuf.GeneratedMessageV3$BuilderParent\",\"com.google.protobuf.DescriptorProtos$FileOptions$Builder\",\"io.netty.channel.ChannelOutboundBuffer$Entry\",\"com.google.gson.internal.LazilyParsedNumber\",\"com.google.protobuf.DescriptorProtos$EnumValueOptionsOrBuilder\",\"com.google.protobuf.MapEntry$Builder\",\"com.google.protobuf.MessageReflection$MergeTarget$ContainerType\",\"io.netty.channel.WriteBufferWaterMark\",\"io.netty.channel.socket.SocketChannelConfig\",\"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter\",\"io.netty.util.Recycler$Stack\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProto$Builder\",\"com.google.protobuf.DescriptorProtos$FileOptions$OptimizeMode\",\"com.google.gson.JsonElement\",\"com.google.protobuf.Descriptors$DescriptorPool$PackageDescriptor\",\"io.netty.util.internal.logging.Slf4JLogger\",\"com.google.protobuf.ByteString$ByteArrayCopier\",\"io.netty.util.DefaultAttributeMap\",\"io.netty.util.concurrent.AbstractScheduledEventExecutor$1\",\"io.netty.channel.kqueue.AbstractKQueueChannel$AbstractKQueueUnsafe\",\"com.google.protobuf.Internal$ProtobufList\",\"io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceFdTask\",\"io.netty.buffer.PoolThreadCache$MemoryRegionCache\",\"org.nico.ratel.landlords.entity.Poker\",\"io.netty.util.concurrent.EventExecutorGroup\",\"io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$WaitStrategy\",\"com.google.protobuf.Descriptors$FileDescriptor$Syntax\",\"io.netty.buffer.ByteBufUtil\",\"com.google.protobuf.Message\",\"com.google.protobuf.ByteString$ArraysByteArrayCopier\",\"org.nico.ratel.landlords.entity.ServerTransferData$1\",\"com.google.protobuf.DescriptorProtos$OneofOptionsOrBuilder\",\"io.netty.buffer.UnpooledByteBufAllocator$InstrumentedUnpooledDirectByteBuf\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_GAME_POKER_PLAY_REDIRECT\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo$Location\",\"com.google.gson.internal.bind.JsonTreeWriter\",\"com.google.gson.GsonBuilder\",\"io.netty.util.internal.ReflectionUtil\",\"com.google.protobuf.Extension$ExtensionType\",\"io.netty.channel.DefaultChannelPipeline$PendingHandlerRemovedTask\",\"io.netty.buffer.DuplicatedByteBuf\",\"io.netty.util.concurrent.FastThreadLocalThread\",\"com.google.protobuf.Descriptors$ServiceDescriptor\",\"com.google.gson.internal.bind.TimeTypeAdapter\",\"com.google.protobuf.MessageReflection$MergeTarget\",\"io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe\",\"io.netty.channel.ChannelOutboundHandlerAdapter\",\"io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue\",\"com.google.protobuf.DescriptorProtos$MethodDescriptorProto\",\"io.netty.util.internal.PlatformDependent0$3\",\"io.netty.util.internal.PlatformDependent0$4\",\"io.netty.util.internal.PlatformDependent0$5\",\"com.google.protobuf.DescriptorProtos$DescriptorProtoOrBuilder\",\"io.netty.buffer.PooledByteBufAllocator\",\"io.netty.util.internal.PlatformDependent0$1\",\"io.netty.util.concurrent.DefaultProgressivePromise\",\"io.netty.util.internal.PlatformDependent0$2\",\"com.google.gson.LongSerializationPolicy\",\"io.netty.util.internal.PlatformDependent0$8\",\"org.nico.noson.util.type.TypeUtils$1\",\"com.google.protobuf.SmallSortedMap$EmptySet$1\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ReservedRange\",\"com.google.protobuf.DescriptorProtos$UninterpretedOption$NamePart\",\"com.google.protobuf.SmallSortedMap$EmptySet$2\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProto\",\"io.netty.util.ResourceLeakDetector$DefaultResourceLeak\",\"com.google.protobuf.AbstractMessage$BuilderParent\",\"com.google.protobuf.DescriptorProtos$OneofDescriptorProto$Builder\",\"com.google.protobuf.UnsafeUtil$MemoryAccessor\",\"com.google.protobuf.SingleFieldBuilderV3\",\"io.netty.buffer.AdvancedLeakAwareByteBuf\",\"io.netty.channel.embedded.EmbeddedChannel$1\",\"io.netty.channel.embedded.EmbeddedChannel$2\",\"io.netty.util.internal.StringUtil\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto\",\"com.google.protobuf.UnknownFieldSet$Field$Builder\",\"com.google.protobuf.CodedOutputStream$OutputStreamEncoder\",\"com.google.gson.internal.reflect.UnsafeReflectionAccessor\",\"com.google.gson.Gson$FutureTypeAdapter\",\"io.netty.util.internal.ThrowableUtil\",\"com.google.protobuf.UnsafeUtil\",\"io.netty.channel.ChannelFlushPromiseNotifier$FlushCheckpoint\",\"com.google.protobuf.CodedOutputStream$AbstractBufferedEncoder\",\"com.google.protobuf.DescriptorProtos$MethodDescriptorProtoOrBuilder\",\"com.google.gson.internal.$Gson$Preconditions\",\"io.netty.channel.CombinedChannelDuplexHandler\",\"com.google.protobuf.ByteString$BoundedByteString\",\"org.nico.ratel.landlords.helper.PokerHelper\",\"com.google.protobuf.UnknownFieldSet$Field\",\"io.netty.buffer.PooledByteBuf\",\"com.google.protobuf.DescriptorProtos$ServiceOptionsOrBuilder\",\"com.google.protobuf.DescriptorProtos$OneofOptions$1\",\"com.google.gson.JsonNull\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Label$1\",\"io.netty.util.concurrent.Future\",\"io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe\",\"com.google.gson.JsonObject\",\"io.netty.channel.epoll.EpollServerDomainSocketChannel\",\"com.google.protobuf.ProtocolMessageEnum\",\"com.google.protobuf.Internal$FloatList\",\"com.google.gson.Gson$2\",\"io.netty.buffer.PoolChunkList\",\"com.google.gson.Gson$3\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_GAME_WATCH\",\"com.google.gson.Gson$4\",\"com.google.gson.Gson$5\",\"io.netty.channel.embedded.EmbeddedEventLoop\",\"io.netty.buffer.PoolSubpage\",\"io.netty.buffer.Unpooled\",\"com.google.gson.Gson$1\",\"io.netty.channel.ChannelProgressiveFuture\",\"io.netty.util.NettyRuntime$AvailableProcessorsHolder\",\"io.netty.util.internal.DefaultPriorityQueue\",\"io.netty.channel.kqueue.AbstractKQueueStreamChannel$KQueueStreamUnsafe\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_SHOW_ROOMS\",\"com.google.protobuf.Descriptors$DescriptorValidationException\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Builder\",\"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory\",\"com.google.protobuf.DescriptorProtos$MessageOptions$Builder\",\"org.nico.noson.exception.NosonException\",\"com.google.protobuf.DescriptorProtos$UninterpretedOption$NamePart$Builder\",\"io.netty.util.internal.MacAddressUtil\",\"io.netty.channel.embedded.EmbeddedSocketAddress\",\"io.netty.buffer.PooledDuplicatedByteBuf\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueuePad2\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueuePad0\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_GAME_OVER\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueuePad1\",\"com.google.protobuf.Descriptors$OneofDescriptor\",\"com.google.gson.JsonIOException\",\"io.netty.util.UncheckedBooleanSupplier\",\"com.google.protobuf.GeneratedMessageV3$ExtendableMessage\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueProducerIndexField\",\"com.google.protobuf.FieldSet$FieldDescriptorLite\",\"com.google.protobuf.MessageOrBuilder\",\"org.nico.noson.exception.NosonFormatException\",\"io.netty.util.ResourceLeak\",\"io.netty.channel.unix.UnixChannel\",\"com.google.protobuf.DescriptorProtos$FieldOptions$Builder\",\"io.netty.util.internal.MathUtil\",\"io.netty.channel.ChannelFutureListener\",\"org.nico.noson.scanner.buddy.JsonValueParser\",\"com.google.protobuf.WireFormat$FieldType\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Type\",\"com.google.gson.JsonPrimitive\",\"io.netty.channel.EventLoopGroup\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ReservedRange$Builder\",\"io.netty.buffer.AbstractUnpooledSlicedByteBuf\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_ROOM_CREATE_SUCCESS\",\"io.netty.util.BooleanSupplier$1\",\"io.netty.util.BooleanSupplier$2\",\"io.netty.channel.VoidChannelPromise\",\"io.netty.util.internal.shaded.org.jctools.queues.QueueProgressIndicators\",\"io.netty.buffer.EmptyByteBuf\",\"io.netty.buffer.AbstractPooledDerivedByteBuf$PooledNonRetainedSlicedByteBuf\",\"com.google.protobuf.ExtensionRegistry\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Label\",\"com.google.protobuf.CodedInputStream$ArrayDecoder\",\"com.google.protobuf.DescriptorProtos$MethodOptions$Builder\",\"com.google.protobuf.Descriptors$1\",\"io.netty.buffer.ReadOnlyByteBuf\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ExtensionRangeOrBuilder\",\"com.google.protobuf.Android\",\"com.google.protobuf.AbstractMessageLite$Builder$LimitedInputStream\",\"com.google.gson.internal.bind.TypeAdapters$23\",\"io.netty.util.AsciiString\",\"com.google.gson.internal.bind.TypeAdapters$24\",\"com.google.gson.internal.bind.TypeAdapters$25\",\"com.google.gson.internal.bind.TypeAdapters$26\",\"com.google.gson.internal.bind.TypeAdapters$20\",\"com.google.protobuf.GeneratedMessageV3$Builder$BuilderParentImpl\",\"io.netty.channel.DefaultMessageSizeEstimator\",\"com.google.gson.internal.bind.TypeAdapters$21\",\"com.google.gson.internal.bind.TypeAdapters$22\",\"io.netty.channel.kqueue.AbstractKQueueServerChannel$KQueueServerSocketUnsafe\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueL2Pad\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_GAME_POKER_PLAY$2\",\"com.google.protobuf.Internal$IntList\",\"com.google.gson.internal.bind.TypeAdapters$27\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_GAME_POKER_PLAY$1\",\"com.google.gson.FieldNamingStrategy\",\"com.google.gson.internal.bind.TypeAdapters$28\",\"com.google.gson.internal.bind.TypeAdapters$29\",\"com.google.protobuf.ExtensionRegistryLite\",\"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper\",\"com.google.protobuf.DescriptorProtos$OneofOptions$Builder\",\"com.google.protobuf.DescriptorProtos$MessageOptions\",\"com.google.gson.ExclusionStrategy\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueue\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_GAME_LANDLORD_ELECT\",\"io.netty.channel.DefaultChannelPipeline$PendingHandlerCallback\",\"com.google.protobuf.ByteString$Output\",\"io.netty.util.internal.shaded.org.jctools.queues.SpscLinkedQueue\",\"com.google.gson.internal.bind.TypeAdapters$34\",\"com.google.gson.internal.bind.TypeAdapters$35\",\"io.netty.channel.RecvByteBufAllocator\",\"org.nico.ratel.landlords.enums.PokerLevel\",\"com.google.gson.internal.bind.TypeAdapters$30\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_GAME_POKER_PLAY_CANT_PASS\",\"com.google.gson.internal.bind.TypeAdapters$32\",\"com.google.gson.internal.bind.TypeAdapters$33\",\"com.google.protobuf.DescriptorProtos$FileOptions$OptimizeMode$1\",\"com.google.protobuf.GeneratedMessage$GeneratedExtension\",\"com.google.gson.JsonArray\",\"com.google.protobuf.MapField$MutatabilityAwareMap\",\"io.netty.channel.kqueue.BsdSocket\",\"io.netty.util.concurrent.ProgressivePromise\",\"com.google.protobuf.ExtensionLite\",\"com.google.protobuf.DescriptorProtos$ServiceDescriptorProto\",\"io.netty.channel.VoidChannelPromise$1\",\"io.netty.channel.CompleteChannelFuture\",\"io.netty.util.Constant\",\"com.google.protobuf.UnknownFieldSet$Builder\",\"org.nico.noson.scanner.impl.EmptyScanner\",\"io.netty.buffer.PooledByteBufAllocator$PoolThreadLocalCache\",\"com.google.protobuf.Descriptors$GenericDescriptor\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ReservedRange$1\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseLinkedAtomicQueue\",\"org.nico.ratel.landlords.entity.PokerSell\",\"io.netty.channel.AddressedEnvelope\",\"org.nico.ratel.landlords.enums.ClientEventCode\",\"io.netty.util.concurrent.ImmediateEventExecutor$2\",\"io.netty.util.concurrent.ImmediateEventExecutor$1\",\"io.netty.buffer.UnsafeHeapSwappedByteBuf\",\"com.google.gson.internal.bind.TypeAdapters$12\",\"com.google.gson.internal.bind.TypeAdapters$13\",\"com.google.gson.internal.bind.TypeAdapters$14\",\"com.google.gson.internal.bind.TypeAdapters$15\",\"org.nico.ratel.landlords.entity.ServerTransferData$ServerTransferDataProtocOrBuilder\",\"com.google.gson.internal.bind.TypeAdapters$10\",\"com.google.gson.internal.bind.TypeAdapters$11\",\"io.netty.channel.Channel\",\"com.google.protobuf.Reader\",\"com.google.protobuf.NioByteString$1\",\"com.google.gson.internal.bind.TypeAdapters$16\",\"com.google.gson.internal.bind.TypeAdapters$17\",\"com.google.gson.internal.bind.TypeAdapters$18\",\"com.google.gson.internal.bind.TypeAdapters$19\",\"io.netty.util.internal.logging.InternalLoggerFactory\",\"io.netty.channel.kqueue.KQueueDomainSocketChannel\",\"com.google.protobuf.Utf8$Processor\",\"com.google.gson.TypeAdapter$1\",\"io.netty.channel.DefaultChannelConfig\",\"org.nico.noson.scanner.buddy.JsonWrapper\",\"io.netty.channel.AbstractChannel$AbstractUnsafe$8\",\"io.netty.buffer.WrappedCompositeByteBuf\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueProducerLimitField\",\"io.netty.channel.ChannelPromise\",\"io.netty.util.Recycler$WeakOrderQueue\",\"io.netty.channel.local.LocalChannel\",\"com.google.protobuf.MessageLite$Builder\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo\",\"com.google.protobuf.NioByteString\",\"io.netty.channel.DefaultChannelId\",\"io.netty.channel.ChannelInitializer\",\"io.netty.channel.kqueue.KQueueServerChannelConfig\",\"org.nico.ratel.landlords.utils.JsonUtils\",\"com.google.protobuf.Parser\",\"io.netty.channel.ChannelOutboundBuffer\",\"com.google.protobuf.Descriptors$FieldDescriptor\",\"com.google.protobuf.MutabilityOracle$1\",\"io.netty.buffer.PoolChunkMetric\",\"com.google.protobuf.DescriptorProtos$MessageOptionsOrBuilder\",\"io.netty.channel.DefaultChannelPipeline\",\"com.google.protobuf.Descriptors$FileDescriptor\",\"com.google.gson.internal.bind.ObjectTypeAdapter$1\",\"com.google.gson.JsonParseException\",\"io.netty.channel.DelegatingChannelPromiseNotifier\",\"io.netty.channel.kqueue.KQueueServerSocketChannel\",\"com.google.protobuf.WireFormat$FieldType$1\",\"com.google.protobuf.WireFormat$FieldType$2\",\"com.google.protobuf.WireFormat$FieldType$3\",\"com.google.protobuf.WireFormat$FieldType$4\",\"io.netty.channel.epoll.EpollServerSocketChannelConfig\",\"com.google.protobuf.DescriptorProtos$EnumOptions$Builder\",\"com.google.protobuf.AbstractMessageLite$Builder\",\"io.netty.util.concurrent.ImmediateEventExecutor$ImmediateProgressivePromise\",\"io.netty.util.internal.RecyclableArrayList\",\"org.nico.ratel.landlords.entity.ServerTransferData\",\"io.netty.channel.kqueue.KQueueSocketChannelConfig\",\"io.netty.channel.socket.DatagramChannelConfig\",\"io.netty.channel.socket.DuplexChannel\",\"com.google.gson.DefaultDateTypeAdapter\",\"com.google.gson.JsonSerializationContext\",\"io.netty.buffer.SimpleLeakAwareCompositeByteBuf\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.SpscLinkedAtomicQueue\",\"com.google.protobuf.Utf8$SafeProcessor\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo$LocationOrBuilder\",\"com.google.protobuf.DescriptorProtos$UninterpretedOption\",\"io.netty.channel.embedded.EmbeddedChannel\",\"com.google.protobuf.CodedOutputStream$HeapNioEncoder\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ExtensionRange\",\"io.netty.channel.ChannelFuture\",\"io.netty.channel.ChannelConfig\",\"com.google.protobuf.GeneratedMessageV3\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_ROOM_JOIN_FAIL_BY_FULL\",\"io.netty.util.concurrent.FailedFuture\",\"io.netty.util.internal.SystemPropertyUtil$1\",\"io.netty.channel.AbstractChannel$AnnotatedNoRouteToHostException\",\"com.google.protobuf.PrimitiveNonBoxingCollection\",\"com.google.protobuf.DescriptorProtos$MethodOptions\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueL1Pad\",\"io.netty.util.IllegalReferenceCountException\",\"io.netty.buffer.ByteBufUtil$1\",\"io.netty.buffer.ByteBufUtil$2\",\"io.netty.buffer.ByteBufHolder\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_CLIENT_KICK\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Type$1\",\"io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$ExitCondition\",\"com.google.protobuf.LazyStringArrayList\",\"io.netty.buffer.AbstractPooledDerivedByteBuf$PooledNonRetainedDuplicateByteBuf\",\"io.netty.util.internal.shaded.org.jctools.queues.ConcurrentCircularArrayQueue\",\"org.nico.noson.util.string.StringUtils\",\"io.netty.buffer.UnpooledByteBufAllocator$InstrumentedUnpooledUnsafeNoCleanerDirectByteBuf\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_GAME_STARTING\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo$Location$Builder\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseLinkedAtomicQueueProducerNodeRef\",\"io.netty.util.internal.CleanerJava6\",\"io.netty.channel.ChannelPipelineException\",\"com.google.protobuf.DescriptorProtos$FieldOptions$JSType\",\"com.google.protobuf.DescriptorProtos$UninterpretedOption$NamePartOrBuilder\",\"io.netty.util.ByteProcessor$1\",\"com.google.gson.internal.bind.TypeAdapters$35$1\",\"com.google.gson.annotations.Until\",\"com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter\",\"com.google.protobuf.SmallSortedMap$1\",\"com.google.gson.internal.$Gson$Types\",\"io.netty.util.internal.LongCounter\",\"org.nico.ratel.landlords.channel.ChannelUtils\",\"io.netty.util.ByteProcessor$4\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo$Location$1\",\"io.netty.util.ByteProcessor$3\",\"io.netty.util.ByteProcessor$2\",\"io.netty.util.ResourceLeakHint\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueConsumerIndexField\",\"io.netty.channel.ChannelMetadata\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_SHOW_ROOMS$1\",\"io.netty.util.Recycler$3\",\"io.netty.buffer.FixedCompositeByteBuf$Component\",\"io.netty.channel.ChannelOutboundBuffer$1\",\"io.netty.buffer.SimpleLeakAwareByteBuf\",\"io.netty.util.Recycler$1\",\"io.netty.util.Recycler$2\",\"io.netty.util.Attribute\",\"io.netty.util.concurrent.GlobalEventExecutor$TaskRunner\",\"io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask\",\"com.google.protobuf.DescriptorProtos$FieldOptions$CType$1\",\"io.netty.buffer.PoolThreadCache$MemoryRegionCache$1\",\"org.nico.ratel.landlords.client.entity.User\",\"io.netty.util.concurrent.DefaultFutureListeners\",\"io.netty.buffer.AbstractPooledDerivedByteBuf\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueConsumerIndexField\",\"com.google.gson.stream.JsonToken\",\"com.google.protobuf.DescriptorProtos$FieldOptions\",\"io.netty.buffer.UnpooledByteBufAllocator$InstrumentedUnpooledUnsafeHeapByteBuf\",\"io.netty.channel.epoll.EpollTcpInfo\",\"io.netty.channel.epoll.EpollDatagramChannelConfig\",\"com.google.gson.LongSerializationPolicy$1\",\"com.google.gson.LongSerializationPolicy$2\",\"io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf\",\"io.netty.buffer.ByteBufAllocatorMetricProvider\",\"org.nico.noson.cache.CacheManager\",\"io.netty.buffer.UnreleasableByteBuf\",\"com.google.protobuf.AbstractMessage$Builder\",\"org.nico.noson.entity.ReversalRecorder\",\"io.netty.util.AbstractConstant\",\"io.netty.util.concurrent.GlobalEventExecutor\",\"io.netty.channel.DefaultChannelProgressivePromise\",\"io.netty.buffer.ReadOnlyByteBufferBuf\",\"io.netty.channel.unix.Socket\",\"com.google.protobuf.SmallSortedMap$EmptySet\",\"io.netty.channel.unix.ErrorsStaticallyReferencedJniMethods\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_GAME_WATCH_SUCCESSFUL\",\"io.netty.util.internal.PlatformDependent\",\"com.google.protobuf.DescriptorProtos$ServiceDescriptorProto$1\",\"org.nico.ratel.landlords.client.event.ClientEventListener\",\"com.google.gson.Gson\",\"com.google.protobuf.LazyField\",\"io.netty.util.concurrent.OrderedEventExecutor\",\"com.google.protobuf.DescriptorProtos$MethodOptions$IdempotencyLevel\",\"io.netty.util.concurrent.UnorderedThreadPoolEventExecutor\",\"com.google.protobuf.ByteOutput\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_CLIENT_NICKNAME_SET\",\"com.google.protobuf.Internal$EnumLiteMap\",\"io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceInChannelTask\",\"io.netty.channel.ChannelHandlerAdapter\",\"io.netty.channel.EventLoop\",\"io.netty.buffer.PoolArenaMetric\",\"io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext\",\"io.netty.buffer.PooledDirectByteBuf$1\",\"com.google.protobuf.ByteString\",\"com.google.protobuf.Internal$EnumLite\",\"com.google.gson.internal.Excluder$1\",\"io.netty.channel.unix.PeerCredentials\",\"com.google.protobuf.CodedOutputStream$OutOfSpaceException\",\"org.nico.noson.handler.reversal.impl.ReversalMapHandler\",\"com.google.protobuf.SmallSortedMap\",\"org.nico.ratel.landlords.enums.SellType\",\"io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueL3Pad\",\"io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask$1\",\"com.google.protobuf.ByteString$2\",\"io.netty.channel.epoll.LinuxSocket\",\"io.netty.buffer.PooledByteBufAllocatorMetric\",\"io.netty.buffer.PooledUnsafeDirectByteBuf\",\"com.google.gson.internal.bind.CollectionTypeAdapterFactory\",\"com.google.gson.internal.reflect.PreJava9ReflectionAccessor\",\"io.netty.channel.embedded.EmbeddedChannel$EmbeddedUnsafe$1\",\"io.netty.channel.AdaptiveRecvByteBufAllocator\",\"io.netty.channel.AbstractChannelHandlerContext$WriteTask$1\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_GAME_POKER_PLAY_LESS\",\"io.netty.util.ResourceLeakTracker\",\"io.netty.channel.unix.IovArray\",\"com.google.protobuf.ExtensionRegistry$ExtensionInfo\",\"com.google.protobuf.UnknownFieldSet\",\"com.google.protobuf.AbstractMessage\",\"com.google.protobuf.Extension$MessageType\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProto$EnumReservedRange$Builder\",\"com.google.protobuf.WireFormat$Utf8Validation\",\"io.netty.channel.kqueue.KQueueSocketChannel$KQueueSocketChannelUnsafe\",\"io.netty.util.ByteProcessor$IndexNotOfProcessor\",\"io.netty.util.concurrent.ScheduledFutureTask\",\"com.google.protobuf.Internal\",\"com.google.protobuf.DescriptorProtos$DescriptorProto\",\"com.google.gson.reflect.TypeToken\",\"io.netty.buffer.PooledSlicedByteBuf$1\",\"io.netty.channel.ChannelInboundHandler\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_CLIENT_CONNECT\",\"com.google.protobuf.MapEntry$Metadata\",\"io.netty.channel.epoll.EpollMode\",\"io.netty.util.ResourceLeakDetector$Record\",\"com.google.protobuf.DescriptorProtos$FieldOptions$1\",\"io.netty.channel.local.LocalAddress\",\"io.netty.channel.DefaultChannelHandlerContext\",\"io.netty.channel.socket.SocketChannel\",\"io.netty.buffer.PooledDirectByteBuf\",\"io.netty.buffer.AbstractUnsafeSwappedByteBuf\",\"io.netty.channel.local.LocalChannel$State\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_GAME_STARTING$1\",\"com.google.protobuf.CodedInputStream$StreamDecoder\",\"com.google.protobuf.DescriptorProtos$MethodOptionsOrBuilder\",\"org.nico.noson.scanner.impl.SimpleScanner$SimpleStruct$StructType\",\"io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueMidPad\",\"io.netty.buffer.UnpooledByteBufAllocator$InstrumentedUnpooledUnsafeDirectByteBuf\",\"io.netty.util.Recycler\",\"com.google.protobuf.CodedOutputStream$SafeDirectNioEncoder\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ExtensionRange$1\",\"io.netty.buffer.UnpooledByteBufAllocator$UnpooledByteBufAllocatorMetric\",\"com.google.protobuf.MutabilityOracle\",\"io.netty.buffer.UnpooledByteBufAllocator\",\"org.nico.noson.util.string.FormatUtils\",\"io.netty.util.concurrent.ProgressiveFuture\",\"io.netty.channel.unix.Errors\",\"io.netty.channel.AbstractChannel\",\"com.google.protobuf.Extension\",\"com.google.gson.stream.JsonReader\",\"com.google.gson.FieldAttributes\",\"io.netty.channel.socket.ServerSocketChannel\",\"com.google.protobuf.DescriptorProtos$DescriptorProto$ExtensionRange$Builder\",\"com.google.gson.internal.bind.MapTypeAdapterFactory\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_CLIENT_EXIT\",\"io.netty.util.internal.EmptyArrays\",\"io.netty.buffer.PooledUnsafeDirectByteBuf$1\",\"com.google.protobuf.WireFormat$Utf8Validation$1\",\"com.google.protobuf.WireFormat$Utf8Validation$2\",\"com.google.protobuf.FieldSet\",\"com.google.protobuf.WireFormat$Utf8Validation$3\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_GAME_OVER$2\",\"com.google.protobuf.DescriptorProtos$OneofOptions\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_GAME_OVER$1\",\"org.nico.noson.handler.reversal.impl.ReversalListHandler\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_ROOM_JOIN_SUCCESS\",\"com.google.protobuf.DescriptorProtos$EnumDescriptorProto$EnumReservedRange\",\"com.google.gson.internal.bind.ArrayTypeAdapter\",\"io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueueConsumerNodeRef\",\"io.netty.buffer.PoolArena$DirectArena\",\"io.netty.util.internal.PlatformDependent$ThreadLocalRandomProvider\",\"io.netty.channel.local.LocalChannel$LocalUnsafe\",\"org.nico.noson.handler.reversal.ReversalHandler\",\"com.google.protobuf.FieldSet$Builder\",\"io.netty.util.internal.shaded.org.jctools.queues.IndexedQueueSizeUtil$IndexedQueue\",\"com.google.protobuf.ProtocolStringList\",\"com.google.gson.internal.bind.TypeAdapters$26$1\",\"io.netty.channel.epoll.AbstractEpollServerChannel\",\"io.netty.buffer.UnpooledUnsafeHeapByteBuf\",\"com.google.protobuf.DescriptorProtos$UninterpretedOption$NamePart$1\",\"io.netty.util.internal.ObjectUtil\",\"com.google.protobuf.DescriptorProtos$FieldOptions$CType\",\"io.netty.buffer.AbstractByteBuf\",\"io.netty.buffer.UnpooledUnsafeDirectByteBuf\",\"io.netty.util.ResourceLeakDetector\",\"com.google.protobuf.IterableByteBufferInputStream\",\"io.netty.util.concurrent.DefaultPromise\",\"com.google.protobuf.UninitializedMessageException\",\"com.google.protobuf.DescriptorProtos$FieldDescriptorProtoOrBuilder\",\"com.google.gson.internal.bind.JsonTreeReader\",\"io.netty.channel.unix.Limits\",\"com.google.protobuf.DescriptorProtos$SourceCodeInfo$1\",\"io.netty.channel.CombinedChannelDuplexHandler$1\",\"com.google.protobuf.Internal$DoubleList\",\"com.google.protobuf.GeneratedMessageV3$FieldAccessorTable$OneofAccessor\",\"com.google.protobuf.Descriptors\",\"io.netty.util.AbstractReferenceCounted\",\"io.netty.channel.epoll.EpollSocketChannelConfig\",\"com.google.protobuf.DescriptorProtos$FileOptionsOrBuilder\",\"io.netty.channel.DefaultChannelPipeline$HeadContext\",\"io.netty.util.concurrent.FastThreadLocal\",\"com.google.protobuf.DescriptorProtos$EnumValueDescriptorProto$1\",\"io.netty.util.internal.OutOfDirectMemoryError\",\"com.google.protobuf.CodedOutputStream\",\"io.netty.util.internal.IntegerHolder\",\"io.netty.channel.ChannelInboundInvoker\",\"io.netty.util.internal.SystemPropertyUtil\",\"com.google.protobuf.DescriptorProtos$FileOptions$1\",\"io.netty.channel.AbstractChannel$CloseFuture\",\"io.netty.buffer.PoolChunkListMetric\",\"com.google.protobuf.ArrayDecoders$Registers\",\"io.netty.channel.ChannelHandler\",\"io.netty.channel.DefaultChannelPipeline$1\",\"com.google.protobuf.GeneratedMessageV3$ExtendableMessageOrBuilder\");\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/event/ClientEventListener_ESTest_scaffolding.java",
        "class": "ClientEventListener_ESTest_scaffolding",
        "name": "resetClasses",
        "return_type": "void",
        "modifiers": "private static",
        "parameters": [],
        "raw": "private static void resetClasses(){\n  org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ClientEventListener_ESTest_scaffolding.class.getClassLoader());\n  org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\"org.nico.ratel.landlords.client.event.ClientEventListener\",\"com.google.gson.reflect.TypeToken\",\"com.google.gson.internal.$Gson$Preconditions\",\"com.google.gson.internal.$Gson$Types\",\"com.google.gson.Gson\",\"com.google.gson.internal.Excluder\",\"com.google.gson.FieldNamingPolicy\",\"com.google.gson.LongSerializationPolicy\",\"com.google.gson.internal.ConstructorConstructor\",\"com.google.gson.internal.JavaVersion\",\"com.google.gson.internal.reflect.PreJava9ReflectionAccessor\",\"com.google.gson.internal.reflect.ReflectionAccessor\",\"com.google.gson.TypeAdapter\",\"com.google.gson.internal.bind.TypeAdapters$1\",\"com.google.gson.TypeAdapter$1\",\"com.google.gson.internal.bind.TypeAdapters$32\",\"com.google.gson.internal.bind.TypeAdapters$2\",\"com.google.gson.internal.bind.TypeAdapters$3\",\"com.google.gson.internal.bind.TypeAdapters$4\",\"com.google.gson.internal.bind.TypeAdapters$33\",\"com.google.gson.internal.bind.TypeAdapters$5\",\"com.google.gson.internal.bind.TypeAdapters$6\",\"com.google.gson.internal.bind.TypeAdapters$7\",\"com.google.gson.internal.bind.TypeAdapters$8\",\"com.google.gson.internal.bind.TypeAdapters$9\",\"com.google.gson.internal.bind.TypeAdapters$10\",\"com.google.gson.internal.bind.TypeAdapters$11\",\"com.google.gson.internal.bind.TypeAdapters$12\",\"com.google.gson.internal.bind.TypeAdapters$13\",\"com.google.gson.internal.bind.TypeAdapters$14\",\"com.google.gson.internal.bind.TypeAdapters$15\",\"com.google.gson.internal.bind.TypeAdapters$16\",\"com.google.gson.internal.bind.TypeAdapters$17\",\"com.google.gson.internal.bind.TypeAdapters$18\",\"com.google.gson.internal.bind.TypeAdapters$19\",\"com.google.gson.internal.bind.TypeAdapters$20\",\"com.google.gson.internal.bind.TypeAdapters$21\",\"com.google.gson.internal.bind.TypeAdapters$22\",\"com.google.gson.internal.bind.TypeAdapters$23\",\"com.google.gson.internal.bind.TypeAdapters$35\",\"com.google.gson.internal.bind.TypeAdapters$24\",\"com.google.gson.internal.bind.TypeAdapters$25\",\"com.google.gson.internal.bind.TypeAdapters$26\",\"com.google.gson.internal.bind.TypeAdapters$27\",\"com.google.gson.internal.bind.TypeAdapters$34\",\"com.google.gson.internal.bind.TypeAdapters$28\",\"com.google.gson.internal.bind.TypeAdapters$29\",\"com.google.gson.internal.bind.TypeAdapters$30\",\"com.google.gson.internal.bind.TypeAdapters\",\"com.google.gson.internal.bind.ObjectTypeAdapter$1\",\"com.google.gson.internal.bind.ObjectTypeAdapter\",\"com.google.gson.Gson$1\",\"com.google.gson.Gson$2\",\"com.google.gson.Gson$4\",\"com.google.gson.Gson$5\",\"com.google.gson.internal.bind.DateTypeAdapter$1\",\"com.google.gson.internal.bind.DateTypeAdapter\",\"com.google.gson.internal.bind.TimeTypeAdapter$1\",\"com.google.gson.internal.bind.TimeTypeAdapter\",\"com.google.gson.internal.bind.SqlDateTypeAdapter$1\",\"com.google.gson.internal.bind.SqlDateTypeAdapter\",\"com.google.gson.internal.bind.ArrayTypeAdapter$1\",\"com.google.gson.internal.bind.ArrayTypeAdapter\",\"com.google.gson.internal.bind.CollectionTypeAdapterFactory\",\"com.google.gson.internal.bind.MapTypeAdapterFactory\",\"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory\",\"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory\",\"org.nico.ratel.landlords.utils.JsonUtils\",\"com.google.protobuf.AbstractMessageLite\",\"com.google.protobuf.AbstractMessage\",\"com.google.protobuf.GeneratedMessageV3\",\"com.google.protobuf.ExtensionRegistryLite\",\"com.google.protobuf.ExtensionRegistry\",\"com.google.protobuf.ExtensionRegistryFactory\",\"com.google.protobuf.AbstractParser\",\"com.google.protobuf.UnknownFieldSet$Parser\",\"com.google.protobuf.UnknownFieldSet\",\"org.nico.ratel.landlords.entity.ServerTransferData$ServerTransferDataProtoc$1\",\"org.nico.ratel.landlords.entity.ServerTransferData$ServerTransferDataProtoc\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_GAME_LANDLORD_ELECT\",\"io.netty.util.DefaultAttributeMap\",\"io.netty.util.internal.logging.InternalLoggerFactory\",\"io.netty.util.internal.logging.Slf4JLoggerFactory\",\"io.netty.util.internal.logging.AbstractInternalLogger\",\"io.netty.util.internal.logging.Slf4JLogger\",\"io.netty.util.internal.ThrowableUtil\",\"io.netty.channel.AbstractChannel\",\"io.netty.channel.ChannelMetadata\",\"io.netty.channel.kqueue.AbstractKQueueChannel\",\"io.netty.channel.kqueue.AbstractKQueueServerChannel\",\"io.netty.channel.kqueue.KQueueServerDomainSocketChannel\",\"io.netty.channel.unix.ErrorsStaticallyReferencedJniMethods\",\"io.netty.channel.unix.Errors\",\"io.netty.channel.unix.FileDescriptor\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_GAME_POKER_PLAY_INVALID\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_PVE_DIFFICULTY_NOT_SUPPORT\",\"org.nico.ratel.landlords.print.SimplePrinter\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_SHOW_OPTIONS_PVE\",\"org.nico.ratel.landlords.client.entity.User\",\"org.nico.ratel.landlords.print.SimpleWriter\",\"io.netty.util.internal.SystemPropertyUtil\",\"io.netty.util.internal.SystemPropertyUtil$1\",\"io.netty.util.internal.StringUtil\",\"io.netty.util.internal.ObjectUtil\",\"io.netty.channel.kqueue.AbstractKQueueStreamChannel\",\"io.netty.channel.kqueue.KQueueSocketChannel\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_ROOM_JOIN_FAIL_BY_INEXIST\",\"io.netty.channel.epoll.AbstractEpollChannel\",\"io.netty.channel.epoll.EpollDatagramChannel\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_GAME_OVER\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_ROOM_CREATE_SUCCESS\",\"io.netty.channel.ChannelHandlerAdapter\",\"io.netty.channel.ChannelInboundHandlerAdapter\",\"io.netty.channel.ChannelDuplexHandler\",\"io.netty.channel.CombinedChannelDuplexHandler\",\"io.netty.util.internal.UnpaddedInternalThreadLocalMap\",\"io.netty.util.internal.InternalThreadLocalMap\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_GAME_POKER_PLAY_CANT_PASS\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_GAME_LANDLORD_CYCLE\",\"io.netty.channel.epoll.AbstractEpollServerChannel\",\"io.netty.channel.epoll.EpollServerSocketChannel\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_GAME_WATCH_SUCCESSFUL\",\"io.netty.channel.kqueue.KQueueServerSocketChannel\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_SHOW_OPTIONS_SETTING\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_GAME_POKER_PLAY_ORDER_ERROR\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_CLIENT_CONNECT\",\"io.netty.channel.epoll.AbstractEpollStreamChannel\",\"io.netty.channel.epoll.EpollDomainSocketChannel\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_CLIENT_NICKNAME_SET\",\"io.netty.channel.epoll.EpollSocketChannel\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_ROOM_PLAY_FAIL_BY_INEXIST\",\"io.netty.channel.ChannelOutboundHandlerAdapter\",\"io.netty.channel.embedded.EmbeddedSocketAddress\",\"io.netty.channel.embedded.EmbeddedChannel\",\"io.netty.channel.embedded.EmbeddedChannelId\",\"io.netty.util.concurrent.AbstractFuture\",\"io.netty.channel.VoidChannelPromise\",\"io.netty.util.concurrent.DefaultPromise$CauseHolder\",\"io.netty.util.concurrent.DefaultPromise\",\"io.netty.channel.DefaultChannelPromise\",\"io.netty.channel.AbstractChannel$CloseFuture\",\"io.netty.channel.AbstractChannel$AbstractUnsafe\",\"io.netty.channel.embedded.EmbeddedChannel$EmbeddedUnsafe\",\"io.netty.util.concurrent.FastThreadLocal\",\"io.netty.channel.ChannelOutboundBuffer$1\",\"io.netty.channel.ChannelOutboundBuffer\",\"io.netty.channel.embedded.EmbeddedChannel$EmbeddedUnsafe$1\",\"io.netty.channel.DefaultChannelPipeline$1\",\"io.netty.channel.DefaultChannelPipeline\",\"io.netty.channel.embedded.EmbeddedChannel$EmbeddedChannelPipeline\",\"io.netty.util.ResourceLeakDetector$Level\",\"io.netty.util.internal.EmptyArrays\",\"io.netty.util.ResourceLeakDetector\",\"io.netty.util.concurrent.CompleteFuture\",\"io.netty.channel.CompleteChannelFuture\",\"io.netty.channel.SucceededChannelFuture\",\"io.netty.channel.VoidChannelPromise$1\",\"io.netty.channel.AbstractChannelHandlerContext\",\"io.netty.channel.DefaultChannelPipeline$TailContext\",\"io.netty.channel.DefaultChannelPipeline$HeadContext\",\"io.netty.util.concurrent.AbstractEventExecutor\",\"io.netty.util.concurrent.AbstractScheduledEventExecutor$1\",\"io.netty.util.concurrent.AbstractScheduledEventExecutor\",\"io.netty.channel.embedded.EmbeddedEventLoop\",\"io.netty.channel.embedded.EmbeddedChannel$1\",\"io.netty.channel.DefaultMessageSizeEstimator$HandleImpl\",\"io.netty.channel.DefaultMessageSizeEstimator\",\"io.netty.channel.DefaultChannelConfig\",\"io.netty.channel.DefaultMaxMessagesRecvByteBufAllocator\",\"io.netty.channel.AdaptiveRecvByteBufAllocator\",\"io.netty.buffer.ByteBufUtil$1\",\"io.netty.util.CharsetUtil\",\"io.netty.util.internal.PlatformDependent0$1\",\"io.netty.util.internal.ReflectionUtil\",\"io.netty.util.internal.PlatformDependent0$2\",\"io.netty.util.internal.PlatformDependent0$3\",\"io.netty.util.internal.PlatformDependent0$4\",\"io.netty.util.internal.PlatformDependent0$5\",\"io.netty.util.internal.PlatformDependent0$10\",\"io.netty.util.internal.PlatformDependent0\",\"io.netty.util.internal.PlatformDependent$1\",\"io.netty.util.internal.PlatformDependent$2\",\"io.netty.util.internal.CleanerJava6\",\"io.netty.util.internal.PlatformDependent\",\"io.netty.buffer.AbstractByteBufAllocator\",\"io.netty.util.NettyRuntime$AvailableProcessorsHolder\",\"io.netty.util.NettyRuntime\",\"io.netty.buffer.ByteBuf\",\"io.netty.buffer.EmptyByteBuf\",\"io.netty.buffer.PooledByteBufAllocator$PoolThreadLocalCache\",\"io.netty.buffer.PoolArena\",\"io.netty.buffer.PoolArena$DirectArena\",\"io.netty.util.internal.LongAdderCounter\",\"io.netty.buffer.PoolSubpage\",\"io.netty.buffer.PoolChunkList\",\"io.netty.buffer.PooledByteBufAllocatorMetric\",\"io.netty.buffer.PooledByteBufAllocator\",\"io.netty.buffer.ByteBufUtil$2\",\"io.netty.buffer.ByteBufUtil\",\"io.netty.buffer.ByteBufAllocator\",\"io.netty.channel.WriteBufferWaterMark\",\"io.netty.channel.ChannelInitializer\",\"io.netty.channel.embedded.EmbeddedChannel$2\",\"io.netty.util.concurrent.FastThreadLocalThread\",\"io.netty.channel.DefaultChannelHandlerContext\",\"io.netty.channel.DefaultChannelPipeline$PendingHandlerCallback\",\"io.netty.channel.DefaultChannelPipeline$PendingHandlerAddedTask\",\"io.netty.channel.embedded.EmbeddedChannel$State\",\"io.netty.util.concurrent.PromiseTask\",\"io.netty.util.concurrent.ScheduledFutureTask\",\"io.netty.util.Recycler$1\",\"io.netty.util.internal.MathUtil\",\"io.netty.util.Recycler$3\",\"io.netty.util.Recycler\",\"io.netty.util.internal.RecyclableArrayList$1\",\"io.netty.util.Recycler$2\",\"io.netty.util.internal.RecyclableArrayList\",\"io.netty.util.Recycler$Stack\",\"io.netty.util.Recycler$DefaultHandle\",\"io.netty.util.ReferenceCountUtil\",\"io.netty.channel.ChannelOutboundBuffer$Entry$1\",\"io.netty.channel.ChannelOutboundBuffer$Entry\",\"io.netty.util.internal.PromiseNotificationUtil\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_SHOW_OPTIONS\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_ROOM_JOIN_SUCCESS\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_CLIENT_KICK\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_SHOW_OPTIONS_PVP\",\"io.netty.util.internal.PlatformDependent0$8\",\"io.netty.util.internal.MacAddressUtil\",\"io.netty.util.NetUtil\",\"io.netty.channel.DefaultChannelId\",\"io.netty.channel.kqueue.KQueueDatagramChannel\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_SHOW_ROOMS\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_GAME_POKER_PLAY_REDIRECT\",\"org.nico.ratel.landlords.helper.MapHelper\",\"org.nico.noson.Noson\",\"org.nico.noson.handler.reversal.ReversalHandlerQueue\",\"org.nico.noson.handler.reversal.ReversalHandler\",\"org.nico.noson.handler.reversal.impl.ReversalVerityHandler\",\"org.nico.noson.handler.reversal.impl.ReversalNosonHandler\",\"org.nico.noson.handler.reversal.impl.ReversalListHandler\",\"org.nico.noson.handler.reversal.impl.ReversalArrayHandler\",\"org.nico.noson.handler.reversal.impl.ReversalMapHandler\",\"org.nico.noson.handler.reversal.impl.ReversalObjectHandler\",\"org.nico.noson.scanner.buddy.JsonWrapper\",\"org.nico.noson.scanner.impl.EmptyScanner\",\"org.nico.noson.scanner.impl.SimpleScanner\",\"org.nico.noson.scanner.buddy.JsonKeyParser\",\"org.nico.noson.scanner.buddy.JsonValueParser\",\"org.nico.noson.NosonConfig\",\"org.nico.noson.adapter.JsonParseAdapter\",\"org.nico.noson.verify.SymbolVerify\",\"org.nico.noson.util.string.FormatUtils\",\"org.nico.noson.util.string.StringUtils\",\"org.nico.noson.exception.NosonException\",\"org.nico.noson.exception.NosonFormatException\",\"org.nico.noson.cache.CacheManager\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_ROOM_JOIN_FAIL_BY_FULL\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_SHOW_POKERS\",\"org.nico.noson.util.string.CharUtils\",\"io.netty.channel.epoll.EpollServerDomainSocketChannel\",\"org.nico.ratel.landlords.entity.Poker\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_CLIENT_EXIT\",\"io.netty.channel.local.LocalChannel\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_GAME_POKER_PLAY_LESS\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_GAME_WATCH\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_GAME_LANDLORD_CONFIRM\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_GAME_POKER_PLAY_PASS\",\"io.netty.channel.AbstractServerChannel\",\"io.netty.channel.local.LocalServerChannel\",\"org.nico.ratel.landlords.channel.ChannelUtils\",\"com.google.protobuf.AbstractMessageLite$Builder\",\"com.google.protobuf.AbstractMessage$Builder\",\"com.google.protobuf.GeneratedMessageV3$Builder\",\"org.nico.ratel.landlords.entity.ServerTransferData$ServerTransferDataProtoc$Builder\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_GAME_POKER_PLAY\",\"io.netty.channel.kqueue.KQueueDomainSocketChannel\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_GAME_READY\",\"org.nico.noson.util.type.TypeUtils$1\",\"org.nico.noson.util.type.TypeUtils\",\"org.nico.noson.entity.TypeBean\",\"org.nico.noson.scanner.impl.SimpleScanner$ScanState\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_GAME_STARTING\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_GAME_POKER_PLAY_MISMATCH\",\"io.netty.util.concurrent.GlobalEventExecutor$1\",\"io.netty.util.concurrent.DefaultThreadFactory\",\"io.netty.util.concurrent.GlobalEventExecutor$TaskRunner\",\"io.netty.util.concurrent.FailedFuture\",\"io.netty.util.internal.DefaultPriorityQueue\",\"io.netty.util.concurrent.GlobalEventExecutor\",\"io.netty.util.concurrent.SucceededFuture\",\"io.netty.channel.FailedChannelFuture\",\"io.netty.util.concurrent.DefaultProgressivePromise\",\"io.netty.channel.DefaultChannelProgressivePromise\",\"io.netty.channel.AbstractChannel$AbstractUnsafe$8\",\"org.nico.noson.entity.NoType\",\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_SHOW_ROOMS$1\",\"io.netty.util.AbstractConstant\",\"io.netty.util.ConstantPool\",\"io.netty.util.AttributeKey$1\",\"io.netty.util.AttributeKey\",\"org.nico.ratel.landlords.utils.OptionsUtils\",\"io.netty.util.concurrent.UnorderedThreadPoolEventExecutor\",\"io.netty.channel.ChannelException\",\"io.netty.channel.ChannelPipelineException\",\"io.netty.util.concurrent.FastThreadLocalRunnable\",\"io.netty.util.concurrent.GlobalEventExecutor$2\",\"io.netty.util.concurrent.ImmediateEventExecutor$1\",\"io.netty.util.concurrent.ImmediateEventExecutor$2\",\"io.netty.util.concurrent.ImmediateEventExecutor\",\"io.netty.util.concurrent.ImmediateEventExecutor$ImmediateProgressivePromise\",\"io.netty.util.concurrent.PromiseNotifier\",\"io.netty.util.concurrent.BlockingOperationException\",\"io.netty.channel.DelegatingChannelPromiseNotifier\",\"org.nico.ratel.landlords.enums.PokerLevel\",\"org.nico.ratel.landlords.enums.PokerType\",\"org.nico.ratel.landlords.helper.PokerHelper\");\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/event/ClientEventListener_ESTest.java",
        "class": "ClientEventListener_ESTest",
        "name": "test0",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test0() throws Throwable {\n  ClientEventListener_CODE_PVE_DIFFICULTY_NOT_SUPPORT clientEventListener_CODE_PVE_DIFFICULTY_NOT_SUPPORT0\u003dnew ClientEventListener_CODE_PVE_DIFFICULTY_NOT_SUPPORT();\n  EmbeddedChannel embeddedChannel0\u003dnew EmbeddedChannel((ChannelId)null);\n  ServerEventCode serverEventCode0\u003dServerEventCode.CODE_GET_ROOMS;\n  ChannelFuture channelFuture0\u003dclientEventListener_CODE_PVE_DIFFICULTY_NOT_SUPPORT0.pushToServer(embeddedChannel0,serverEventCode0,\"(S:9a\u003c7/}s!-W\");\n  assertFalse(channelFuture0.isCancellable());\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/event/ClientEventListener_ESTest.java",
        "class": "ClientEventListener_ESTest",
        "name": "test1",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test1() throws Throwable {\n  ClientEventListener_CODE_CLIENT_EXIT clientEventListener_CODE_CLIENT_EXIT0\u003dnew ClientEventListener_CODE_CLIENT_EXIT();\n  EmbeddedChannel embeddedChannel0\u003dnew EmbeddedChannel();\n  ServerEventCode serverEventCode0\u003dServerEventCode.CODE_ROOM_CREATE;\n  ChannelFuture channelFuture0\u003dclientEventListener_CODE_CLIENT_EXIT0.pushToServer(embeddedChannel0,serverEventCode0);\n  assertFalse(channelFuture0.isCancelled());\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/event/ClientEventListener_ESTest.java",
        "class": "ClientEventListener_ESTest",
        "name": "test2",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test2() throws Throwable {\n  ClientEventCode clientEventCode0\u003dClientEventCode.CODE_ROOM_PLAY_FAIL_BY_INEXIST1;\n  ClientEventListener clientEventListener0\u003dClientEventListener.get(clientEventCode0);\n  assertNull(clientEventListener0);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/event/ClientEventListener_ESTest.java",
        "class": "ClientEventListener_ESTest",
        "name": "test3",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test3() throws Throwable {\n  ClientEventListener_CODE_GAME_POKER_PLAY_CANT_PASS clientEventListener_CODE_GAME_POKER_PLAY_CANT_PASS0\u003dnew ClientEventListener_CODE_GAME_POKER_PLAY_CANT_PASS();\n  ServerEventCode serverEventCode0\u003dServerEventCode.CODE_GAME_READY;\n  try {\n    clientEventListener_CODE_GAME_POKER_PLAY_CANT_PASS0.pushToServer((Channel)null,serverEventCode0,\"\");\n    fail(\"Expecting exception: NullPointerException\");\n  }\n catch (  NullPointerException e) {\n    verifyException(\"org.nico.ratel.landlords.channel.ChannelUtils\",e);\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/event/ClientEventListener_ESTest.java",
        "class": "ClientEventListener_ESTest",
        "name": "test4",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test4() throws Throwable {\n  ClientEventListener_CODE_GAME_POKER_PLAY_PASS clientEventListener_CODE_GAME_POKER_PLAY_PASS0\u003dnew ClientEventListener_CODE_GAME_POKER_PLAY_PASS();\n  ServerEventCode serverEventCode0\u003dServerEventCode.CODE_ROOM_JOIN;\n  try {\n    clientEventListener_CODE_GAME_POKER_PLAY_PASS0.pushToServer((Channel)null,serverEventCode0);\n    fail(\"Expecting exception: NullPointerException\");\n  }\n catch (  NullPointerException e) {\n    verifyException(\"org.nico.ratel.landlords.channel.ChannelUtils\",e);\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/event/ClientEventListener_ESTest.java",
        "class": "ClientEventListener_ESTest",
        "name": "test5",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test5() throws Throwable {\n  try {\n    ClientEventListener.get((ClientEventCode)null);\n    fail(\"Expecting exception: NullPointerException\");\n  }\n catch (  NullPointerException e) {\n    verifyException(\"org.nico.ratel.landlords.client.event.ClientEventListener\",e);\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/event/ClientEventListener_ESTest.java",
        "class": "ClientEventListener_ESTest",
        "name": "test6",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test6() throws Throwable {\n  ClientEventListener_CODE_CLIENT_KICK clientEventListener_CODE_CLIENT_KICK0\u003dnew ClientEventListener_CODE_CLIENT_KICK();\n  try {\n    clientEventListener_CODE_CLIENT_KICK0.call((Channel)null,\"VHfa\u003e- g!41OG\");\n    fail(\"Expecting exception: NullPointerException\");\n  }\n catch (  NullPointerException e) {\n    verifyException(\"org.nico.ratel.landlords.client.event.ClientEventListener_CODE_SHOW_OPTIONS\",e);\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/event/ClientEventListener_ESTest.java",
        "class": "ClientEventListener_ESTest",
        "name": "test7",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test7() throws Throwable {\n  ClientEventCode clientEventCode0\u003dClientEventCode.CODE_GAME_LANDLORD_CONFIRM;\n  ClientEventListener clientEventListener0\u003dClientEventListener.get(clientEventCode0);\n  try {\n    clientEventListener0.call((Channel)null,(String)null);\n    fail(\"Expecting exception: NullPointerException\");\n  }\n catch (  NullPointerException e) {\n    verifyException(\"org.nico.noson.scanner.impl.SimpleScanner\",e);\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/event/ClientEventListener_ESTest.java",
        "class": "ClientEventListener_ESTest",
        "name": "test8",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test8() throws Throwable {\n  ClientEventListener.initLastSellInfo();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/evosuite-tests/org/nico/ratel/landlords/client/event/ClientEventListener_ESTest.java",
        "class": "ClientEventListener_ESTest",
        "name": "test9",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test9() throws Throwable {\n  ClientEventCode clientEventCode0\u003dClientEventCode.CODE_GAME_POKER_PLAY_CANT_PASS;\n  ClientEventListener_CODE_GAME_POKER_PLAY_CANT_PASS clientEventListener_CODE_GAME_POKER_PLAY_CANT_PASS0\u003d(ClientEventListener_CODE_GAME_POKER_PLAY_CANT_PASS)ClientEventListener.get(clientEventCode0);\n  ChannelHandler[] channelHandlerArray0\u003dnew ChannelHandler[0];\n  EmbeddedChannel embeddedChannel0\u003dnew EmbeddedChannel(false,false,channelHandlerArray0);\n  ServerEventCode serverEventCode0\u003dServerEventCode.CODE_ROOM_JOIN;\n  try {\n    clientEventListener_CODE_GAME_POKER_PLAY_CANT_PASS0.pushToServer(embeddedChannel0,serverEventCode0);\n    fail(\"Expecting exception: IllegalStateException\");\n  }\n catch (  IllegalStateException e) {\n    verifyException(\"io.netty.channel.AbstractChannel\",e);\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/entity/User.java",
        "class": "User",
        "name": "User",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [],
        "raw": "private User(){\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/entity/User.java",
        "class": "User",
        "name": "isPlaying",
        "return_type": "boolean",
        "modifiers": "public",
        "parameters": [],
        "raw": "public boolean isPlaying(){\n  return isPlaying;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/entity/User.java",
        "class": "User",
        "name": "setPlaying",
        "return_type": "void",
        "modifiers": "public",
        "parameters": [
            {
                "type": "boolean",
                "name": "playing"
            }
        ],
        "raw": "public void setPlaying(boolean playing){\n  isPlaying\u003dplaying;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/entity/User.java",
        "class": "User",
        "name": "isWatching",
        "return_type": "boolean",
        "modifiers": "public",
        "parameters": [],
        "raw": "public boolean isWatching(){\n  return isWatching;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/entity/User.java",
        "class": "User",
        "name": "setWatching",
        "return_type": "void",
        "modifiers": "public",
        "parameters": [
            {
                "type": "boolean",
                "name": "watching"
            }
        ],
        "raw": "public void setWatching(boolean watching){\n  isWatching\u003dwatching;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/entity/User.java",
        "class": "User",
        "name": "getNickname",
        "return_type": "String",
        "modifiers": "public",
        "parameters": [],
        "raw": "public String getNickname(){\n  return nickname;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/entity/User.java",
        "class": "User",
        "name": "setNickname",
        "return_type": "void",
        "modifiers": "public",
        "parameters": [
            {
                "type": "String",
                "name": "nickname"
            }
        ],
        "raw": "public void setNickname(String nickname){\n  this.nickname\u003dnickname;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/SimpleClient.java",
        "class": "SimpleClient",
        "name": "main",
        "return_type": "void",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "String[]",
                "name": "args"
            }
        ],
        "raw": "public static void main(String[] args) throws InterruptedException, IOException, URISyntaxException {\n  if (args !\u003d null \u0026\u0026 args.length \u003e 0) {\n    for (int index\u003d0; index \u003c args.length; index\u003dindex + 2) {\n      if (index + 1 \u003c args.length) {\n        if (args[index].equalsIgnoreCase(\"-p\") || args[index].equalsIgnoreCase(\"-port\")) {\n          port\u003dInteger.parseInt(args[index + 1]);\n        }\n        if (args[index].equalsIgnoreCase(\"-h\") || args[index].equalsIgnoreCase(\"-host\")) {\n          serverAddress\u003dargs[index + 1];\n        }\n        if (args[index].equalsIgnoreCase(\"-ptl\") || args[index].equalsIgnoreCase(\"-protocol\")) {\n          protocol\u003dargs[index + 1];\n        }\n      }\n    }\n  }\n  if (serverAddress \u003d\u003d null) {\n    List\u003cString\u003e serverAddressList\u003dgetServerAddressList();\n    if (serverAddressList \u003d\u003d null || serverAddressList.size() \u003d\u003d 0) {\n      throw new RuntimeException(\"Please use \u0027-host\u0027 to setting server address.\");\n    }\n    SimplePrinter.printNotice(\"Please select a server:\");\n    for (int i\u003d0; i \u003c serverAddressList.size(); i++) {\n      SimplePrinter.printNotice((i + 1) + \". \" + serverAddressList.get(i));\n    }\n    int serverPick\u003dInteger.parseInt(SimpleWriter.write(User.INSTANCE.getNickname(),\"option\"));\n    while (serverPick \u003c 1 || serverPick \u003e serverAddressList.size()) {\n      try {\n        SimplePrinter.printNotice(\"The server address does not exist!\");\n        serverPick\u003dInteger.parseInt(SimpleWriter.write(User.INSTANCE.getNickname(),\"option\"));\n      }\n catch (      NumberFormatException ignore) {\n      }\n    }\n    serverAddress\u003dserverAddressList.get(serverPick - 1);\n    String[] elements\u003dserverAddress.split(\":\");\n    serverAddress\u003delements[0];\n    port\u003dInteger.parseInt(elements[1]);\n  }\n  if (Objects.equals(protocol,\"pb\")) {\n    new ProtobufProxy().connect(serverAddress,port);\n  }\n else   if (Objects.equals(protocol,\"ws\")) {\n    new WebsocketProxy().connect(serverAddress,port + 1);\n  }\n else {\n    throw new UnsupportedOperationException(\"Unsupported protocol \" + protocol);\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/SimpleClient.java",
        "class": "SimpleClient",
        "name": "getServerAddressList",
        "return_type": "List\u003cString\u003e",
        "modifiers": "private static",
        "parameters": [],
        "raw": "private static List\u003cString\u003e getServerAddressList(){\n  for (  String serverAddressSource : serverAddressSource) {\n    try {\n      String serverInfo\u003dStreamUtils.convertToString(new URL(serverAddressSource));\n      return Noson.convert(serverInfo,new NoType\u003cList\u003cString\u003e\u003e(){\n      }\n);\n    }\n catch (    IOException e) {\n      SimplePrinter.printNotice(\"Try connected \" + serverAddressSource + \" failed: \"+ e.getMessage());\n    }\n  }\n  return null;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/handler/WebsocketTransferHandler.java",
        "class": "WebsocketTransferHandler",
        "name": "channelRead0",
        "return_type": "void",
        "modifiers": "@Override protected",
        "parameters": [
            {
                "type": "ChannelHandlerContext",
                "name": "ctx"
            },
            {
                "type": "TextWebSocketFrame",
                "name": "frame"
            }
        ],
        "raw": "@Override protected void channelRead0(ChannelHandlerContext ctx,TextWebSocketFrame frame){\n  Msg msg\u003dJsonUtils.fromJson(frame.text(),Msg.class);\n  if (msg.getInfo() !\u003d null \u0026\u0026 !msg.getInfo().isEmpty()) {\n    SimplePrinter.printNotice(msg.getInfo());\n  }\n  ClientEventCode code\u003dClientEventCode.valueOf(msg.getCode());\n  if (User.INSTANCE.isWatching()) {\n    Map\u003cString,Object\u003e wrapMap\u003dnew HashMap\u003c\u003e(3);\n    wrapMap.put(\"code\",code);\n    wrapMap.put(\"data\",msg.getData());\n    ClientEventListener.get(ClientEventCode.CODE_GAME_WATCH).call(ctx.channel(),JsonUtils.toJson(wrapMap));\n  }\n else {\n    ClientEventListener.get(code).call(ctx.channel(),msg.getData());\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/handler/WebsocketTransferHandler.java",
        "class": "WebsocketTransferHandler",
        "name": "userEventTriggered",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "ChannelHandlerContext",
                "name": "ctx"
            },
            {
                "type": "Object",
                "name": "evt"
            }
        ],
        "raw": "@Override public void userEventTriggered(ChannelHandlerContext ctx,Object evt) throws Exception {\n  if (evt instanceof IdleStateEvent) {\n    IdleStateEvent event\u003d(IdleStateEvent)evt;\n    if (event.state() \u003d\u003d IdleState.WRITER_IDLE) {\n      ChannelUtils.pushToServer(ctx.channel(),ServerEventCode.CODE_CLIENT_HEAD_BEAT,\"heartbeat\");\n    }\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/handler/WebsocketTransferHandler.java",
        "class": "WebsocketTransferHandler",
        "name": "exceptionCaught",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "ChannelHandlerContext",
                "name": "ctx"
            },
            {
                "type": "Throwable",
                "name": "cause"
            }
        ],
        "raw": "@Override public void exceptionCaught(ChannelHandlerContext ctx,Throwable cause) throws Exception {\n  if (cause instanceof java.io.IOException) {\n    SimplePrinter.printNotice(\"The network is not good or did not operate for a long time, has been offline\");\n    System.exit(0);\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/handler/SecondProtobufCodec.java",
        "class": "SecondProtobufCodec",
        "name": "encode",
        "return_type": "void",
        "modifiers": "@Override protected",
        "parameters": [
            {
                "type": "ChannelHandlerContext",
                "name": "ctx"
            },
            {
                "type": "MessageLite",
                "name": "msg"
            },
            {
                "type": "List\u003cObject\u003e",
                "name": "out"
            }
        ],
        "raw": "@Override protected void encode(ChannelHandlerContext ctx,MessageLite msg,List\u003cObject\u003e out){\n  out.add(msg);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/handler/SecondProtobufCodec.java",
        "class": "SecondProtobufCodec",
        "name": "decode",
        "return_type": "void",
        "modifiers": "@Override protected",
        "parameters": [
            {
                "type": "ChannelHandlerContext",
                "name": "ctx"
            },
            {
                "type": "ClientTransferDataProtoc",
                "name": "msg"
            },
            {
                "type": "List\u003cObject\u003e",
                "name": "out"
            }
        ],
        "raw": "@Override protected void decode(ChannelHandlerContext ctx,ClientTransferDataProtoc msg,List\u003cObject\u003e out){\n  out.add(msg);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/handler/ProtobufTransferHandler.java",
        "class": "ProtobufTransferHandler",
        "name": "channelRead",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "ChannelHandlerContext",
                "name": "ctx"
            },
            {
                "type": "Object",
                "name": "msg"
            }
        ],
        "raw": "@Override public void channelRead(ChannelHandlerContext ctx,Object msg){\n  if (msg instanceof ClientTransferDataProtoc) {\n    ClientTransferDataProtoc clientTransferData\u003d(ClientTransferDataProtoc)msg;\n    if (!clientTransferData.getInfo().isEmpty()) {\n      SimplePrinter.printNotice(clientTransferData.getInfo());\n    }\n    ClientEventCode code\u003dClientEventCode.valueOf(clientTransferData.getCode());\n    if (User.INSTANCE.isWatching()) {\n      Map\u003cString,Object\u003e wrapMap\u003dnew HashMap\u003c\u003e(3);\n      wrapMap.put(\"code\",code);\n      wrapMap.put(\"data\",clientTransferData.getData());\n      ClientEventListener.get(ClientEventCode.CODE_GAME_WATCH).call(ctx.channel(),Noson.reversal(wrapMap));\n    }\n else {\n      ClientEventListener.get(code).call(ctx.channel(),clientTransferData.getData());\n    }\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/handler/ProtobufTransferHandler.java",
        "class": "ProtobufTransferHandler",
        "name": "userEventTriggered",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "ChannelHandlerContext",
                "name": "ctx"
            },
            {
                "type": "Object",
                "name": "evt"
            }
        ],
        "raw": "@Override public void userEventTriggered(ChannelHandlerContext ctx,Object evt){\n  if (evt instanceof IdleStateEvent) {\n    IdleStateEvent event\u003d(IdleStateEvent)evt;\n    if (event.state() \u003d\u003d IdleState.WRITER_IDLE) {\n      ChannelUtils.pushToServer(ctx.channel(),ServerEventCode.CODE_CLIENT_HEAD_BEAT,\"heartbeat\");\n    }\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/handler/ProtobufTransferHandler.java",
        "class": "ProtobufTransferHandler",
        "name": "exceptionCaught",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "ChannelHandlerContext",
                "name": "ctx"
            },
            {
                "type": "Throwable",
                "name": "cause"
            }
        ],
        "raw": "@Override public void exceptionCaught(ChannelHandlerContext ctx,Throwable cause){\n  if (cause instanceof java.io.IOException) {\n    SimplePrinter.printNotice(\"The network is not good or did not operate for a long time, has been offline\");\n    System.exit(0);\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/proxy/Proxy.java",
        "class": "Proxy",
        "name": "connect",
        "return_type": "void",
        "modifiers": "",
        "parameters": [
            {
                "type": "String",
                "name": "serverAddress"
            },
            {
                "type": "int",
                "name": "port"
            }
        ],
        "raw": "void connect(String serverAddress,int port) throws InterruptedException, URISyntaxException ;\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/proxy/WebsocketProxy.java",
        "class": "WebsocketProxy",
        "name": "connect",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "String",
                "name": "serverAddress"
            },
            {
                "type": "int",
                "name": "port"
            }
        ],
        "raw": "@Override public void connect(String serverAddress,int port) throws InterruptedException, URISyntaxException {\n  URI uri\u003dnew URI(\"ws://\" + serverAddress + \":\"+ port+ \"/ratel\");\n  EventLoopGroup group\u003dnew NioEventLoopGroup();\n  try {\n    Bootstrap bootstrap\u003dnew Bootstrap().group(group).channel(NioSocketChannel.class).handler(new ChannelInitializer\u003cSocketChannel\u003e(){\n      @Override protected void initChannel(      SocketChannel ch) throws Exception {\n        ch.pipeline().addLast(new IdleStateHandler(60 * 30,0,0,TimeUnit.SECONDS)).addLast(new HttpClientCodec()).addLast(new HttpObjectAggregator(8192)).addLast(new WebSocketClientProtocolHandler(uri,WebSocketVersion.V13,null,true,new DefaultHttpHeaders(),100000)).addLast(\"ws\",new WebsocketTransferHandler());\n      }\n    }\n);\n    SimplePrinter.printNotice(\"Connecting to \" + serverAddress + \":\"+ port);\n    Channel channel\u003dbootstrap.connect(serverAddress,port).sync().channel();\n    channel.closeFuture().sync();\n  }\n  finally {\n    group.shutdownGracefully().sync();\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/proxy/WebsocketProxy.java",
        "class": "WebsocketProxy",
        "name": "initChannel",
        "return_type": "void",
        "modifiers": "@Override protected",
        "parameters": [
            {
                "type": "SocketChannel",
                "name": "ch"
            }
        ],
        "raw": "@Override protected void initChannel(SocketChannel ch) throws Exception {\n  ch.pipeline().addLast(new IdleStateHandler(60 * 30,0,0,TimeUnit.SECONDS)).addLast(new HttpClientCodec()).addLast(new HttpObjectAggregator(8192)).addLast(new WebSocketClientProtocolHandler(uri,WebSocketVersion.V13,null,true,new DefaultHttpHeaders(),100000)).addLast(\"ws\",new WebsocketTransferHandler());\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/proxy/ProtobufProxy.java",
        "class": "ProtobufProxy",
        "name": "connect",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "String",
                "name": "serverAddress"
            },
            {
                "type": "int",
                "name": "port"
            }
        ],
        "raw": "@Override public void connect(String serverAddress,int port) throws InterruptedException {\n  EventLoopGroup group\u003dnew NioEventLoopGroup();\n  try {\n    Bootstrap bootstrap\u003dnew Bootstrap().group(group).channel(NioSocketChannel.class).handler(new ChannelInitializer\u003cSocketChannel\u003e(){\n      @Override protected void initChannel(      SocketChannel ch) throws Exception {\n        ch.pipeline().addLast(new IdleStateHandler(0,4,0,TimeUnit.SECONDS)).addLast(new ProtobufVarint32FrameDecoder()).addLast(new ProtobufDecoder(ClientTransferData.ClientTransferDataProtoc.getDefaultInstance())).addLast(new ProtobufVarint32LengthFieldPrepender()).addLast(new ProtobufEncoder()).addLast(new SecondProtobufCodec()).addLast(new ProtobufTransferHandler());\n      }\n    }\n);\n    SimplePrinter.printNotice(\"Connecting to \" + serverAddress + \":\"+ port);\n    Channel channel\u003dbootstrap.connect(serverAddress,port).sync().channel();\n    channel.closeFuture().sync();\n  }\n  finally {\n    group.shutdownGracefully().sync();\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/proxy/ProtobufProxy.java",
        "class": "ProtobufProxy",
        "name": "initChannel",
        "return_type": "void",
        "modifiers": "@Override protected",
        "parameters": [
            {
                "type": "SocketChannel",
                "name": "ch"
            }
        ],
        "raw": "@Override protected void initChannel(SocketChannel ch) throws Exception {\n  ch.pipeline().addLast(new IdleStateHandler(0,4,0,TimeUnit.SECONDS)).addLast(new ProtobufVarint32FrameDecoder()).addLast(new ProtobufDecoder(ClientTransferData.ClientTransferDataProtoc.getDefaultInstance())).addLast(new ProtobufVarint32LengthFieldPrepender()).addLast(new ProtobufEncoder()).addLast(new SecondProtobufCodec()).addLast(new ProtobufTransferHandler());\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_SHOW_OPTIONS_PVE.java",
        "class": "ClientEventListener_CODE_SHOW_OPTIONS_PVE",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(Channel channel,String data){\n  SimplePrinter.printNotice(\"PVE: \");\n  SimplePrinter.printNotice(\"1. Easy Mode\");\n  SimplePrinter.printNotice(\"2. Medium Mode\");\n  SimplePrinter.printNotice(\"3. Hard Mode\");\n  SimplePrinter.printNotice(\"Please select an option above (enter [back|b] to return to options list)\");\n  String line\u003dSimpleWriter.write(User.INSTANCE.getNickname(),\"pve\");\n  if (line.equalsIgnoreCase(\"back\") || line.equalsIgnoreCase(\"b\")) {\n    get(ClientEventCode.CODE_SHOW_OPTIONS).call(channel,data);\n    return;\n  }\n  int choose\u003dOptionsUtils.getOptions(line);\n  if (choose \u003c 0 || choose \u003e\u003d 4) {\n    SimplePrinter.printNotice(\"Invalid option, please choose again：\");\n    call(channel,data);\n    return;\n  }\n  initLastSellInfo();\n  pushToServer(channel,ServerEventCode.CODE_ROOM_CREATE_PVE,String.valueOf(choose));\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_SHOW_ROOMS.java",
        "class": "ClientEventListener_CODE_SHOW_ROOMS",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(Channel channel,String data){\n  List\u003cMap\u003cString,Object\u003e\u003e roomList\u003dNoson.convert(data,new NoType\u003cList\u003cMap\u003cString,Object\u003e\u003e\u003e(){\n  }\n);\n  if (roomList !\u003d null \u0026\u0026 !roomList.isEmpty()) {\n    String format\u003d\"#\\t%s\\t|\\t%-\" + NICKNAME_MAX_LENGTH + \"s\\t|\\t%-6s\\t|\\t%-6s\\t#\\n\";\n    FormatPrinter.printNotice(format,\"ID\",\"OWNER\",\"COUNT\",\"TYPE\");\n    for (    Map\u003cString,Object\u003e room : roomList) {\n      FormatPrinter.printNotice(format,room.get(\"roomId\"),room.get(\"roomOwner\"),room.get(\"roomClientCount\"),room.get(\"roomType\"));\n    }\n    SimplePrinter.printNotice(\"\");\n    get(ClientEventCode.CODE_SHOW_OPTIONS_PVP).call(channel,data);\n  }\n else {\n    SimplePrinter.printNotice(\"No available room. Please create a room!\");\n    get(ClientEventCode.CODE_SHOW_OPTIONS_PVP).call(channel,data);\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_CLIENT_KICK.java",
        "class": "ClientEventListener_CODE_CLIENT_KICK",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(Channel channel,String data){\n  SimplePrinter.printNotice(\"You have been kicked from the room for being idle.\\n\");\n  get(ClientEventCode.CODE_SHOW_OPTIONS).call(channel,data);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_CLIENT_EXIT.java",
        "class": "ClientEventListener_CODE_CLIENT_EXIT",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(Channel channel,String data){\n  Map\u003cString,Object\u003e map\u003dMapHelper.parser(data);\n  Integer exitClientId\u003d(Integer)map.get(\"exitClientId\");\n  String role;\n  if (exitClientId \u003d\u003d SimpleClient.id) {\n    role\u003d\"You\";\n  }\n else {\n    role\u003dString.valueOf(map.get(\"exitClientNickname\"));\n  }\n  SimplePrinter.printNotice(role + \" left the room. Room disbanded!\\n\");\n  get(ClientEventCode.CODE_SHOW_OPTIONS).call(channel,data);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_GAME_POKER_PLAY.java",
        "class": "ClientEventListener_CODE_GAME_POKER_PLAY",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(Channel channel,String data){\n  Map\u003cString,Object\u003e map\u003dMapHelper.parser(data);\n  SimplePrinter.printNotice(\"It\u0027s your turn to play, your cards are as follows: \");\n  List\u003cPoker\u003e pokers\u003dNoson.convert(map.get(\"pokers\"),new NoType\u003cList\u003cPoker\u003e\u003e(){\n  }\n);\n  SimplePrinter.printPokers(pokers);\n  SimplePrinter.printNotice(\"Last cards are\");\n  SimplePrinter.printNotice(map.containsKey(\"lastPokers\") ? map.get(\"lastPokers\").toString() : \"\");\n  SimplePrinter.printNotice(\"Please enter the combination you came up with (enter [exit|e] to exit current room, enter [pass|p] to jump current round, enter [view|v] to show all valid combinations.)\");\n  String line\u003dSimpleWriter.write(User.INSTANCE.getNickname(),\"combination\");\n  if (line \u003d\u003d null) {\n    SimplePrinter.printNotice(\"Invalid enter\");\n    call(channel,data);\n  }\n else {\n    if (line.equalsIgnoreCase(\"pass\") || line.equalsIgnoreCase(\"p\")) {\n      pushToServer(channel,ServerEventCode.CODE_GAME_POKER_PLAY_PASS);\n    }\n else     if (line.equalsIgnoreCase(\"exit\") || line.equalsIgnoreCase(\"e\")) {\n      pushToServer(channel,ServerEventCode.CODE_CLIENT_EXIT);\n    }\n else     if (line.equalsIgnoreCase(\"view\") || line.equalsIgnoreCase(\"v\")) {\n      if (!map.containsKey(\"lastSellPokers\") || !map.containsKey(\"lastSellClientId\")) {\n        SimplePrinter.printNotice(\"Current server version unsupport this feature, need more than v1.2.4.\");\n        call(channel,data);\n        return;\n      }\n      Object lastSellPokersObj\u003dmap.get(\"lastSellPokers\");\n      if (lastSellPokersObj \u003d\u003d null || Integer.valueOf(SimpleClient.id).equals(map.get(\"lastSellClientId\"))) {\n        SimplePrinter.printNotice(\"Up to you !\");\n        call(channel,data);\n        return;\n      }\n else {\n        List\u003cPoker\u003e lastSellPokers\u003dNoson.convert(lastSellPokersObj,new NoType\u003cList\u003cPoker\u003e\u003e(){\n        }\n);\n        List\u003cPokerSell\u003e sells\u003dPokerHelper.validSells(PokerHelper.checkPokerType(lastSellPokers),pokers);\n        if (sells.size() \u003d\u003d 0) {\n          SimplePrinter.printNotice(\"It is a pity that, there is no winning combination...\");\n          call(channel,data);\n          return;\n        }\n        for (int i\u003d0; i \u003c sells.size(); i++) {\n          SimplePrinter.printNotice(i + 1 + \". \"+ PokerHelper.textOnlyNoType(sells.get(i).getSellPokers()));\n        }\n        while (true) {\n          SimplePrinter.printNotice(\"You can enter index to choose anyone.(enter [back|b] to go back.)\");\n          line\u003dSimpleWriter.write(User.INSTANCE.getNickname(),\"choose\");\n          if (line.equalsIgnoreCase(\"back\") || line.equalsIgnoreCase(\"b\")) {\n            call(channel,data);\n            return;\n          }\n else {\n            try {\n              int choose\u003dInteger.valueOf(line);\n              if (choose \u003c 1 || choose \u003e sells.size()) {\n                SimplePrinter.printNotice(\"The input number must be in the range of 1 to \" + sells.size() + \".\");\n              }\n else {\n                List\u003cPoker\u003e choosePokers\u003dsells.get(choose - 1).getSellPokers();\n                List\u003cCharacter\u003e options\u003dnew ArrayList\u003c\u003e();\n                for (                Poker poker : choosePokers) {\n                  options.add(poker.getLevel().getAlias()[0]);\n                }\n                pushToServer(channel,ServerEventCode.CODE_GAME_POKER_PLAY,Noson.reversal(options.toArray(new Character[]{})));\n                break;\n              }\n            }\n catch (            NumberFormatException e) {\n              SimplePrinter.printNotice(\"Please input a number.\");\n            }\n          }\n        }\n      }\n    }\n else {\n      String[] strs\u003dline.split(\" \");\n      List\u003cCharacter\u003e options\u003dnew ArrayList\u003c\u003e();\n      boolean access\u003dtrue;\n      for (int index\u003d0; index \u003c strs.length; index++) {\n        String str\u003dstrs[index];\n        for (        char c : str.toCharArray()) {\n          if (c \u003d\u003d \u0027 \u0027 || c \u003d\u003d \u0027\\t\u0027) {\n          }\n else {\n            if (!PokerLevel.aliasContains(c)) {\n              access\u003dfalse;\n              break;\n            }\n else {\n              options.add(c);\n            }\n          }\n        }\n      }\n      if (access) {\n        pushToServer(channel,ServerEventCode.CODE_GAME_POKER_PLAY,Noson.reversal(options.toArray(new Character[]{})));\n      }\n else {\n        SimplePrinter.printNotice(\"Invalid enter\");\n        if (lastPokers !\u003d null) {\n          SimplePrinter.printNotice(lastSellClientNickname + \"[\" + lastSellClientType+ \"] played:\");\n          SimplePrinter.printPokers(lastPokers);\n        }\n        call(channel,data);\n      }\n    }\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_CLIENT_CONNECT.java",
        "class": "ClientEventListener_CODE_CLIENT_CONNECT",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(Channel channel,String data){\n  SimplePrinter.printNotice(\"Connected to server. Welcome to ratel!\");\n  SimpleClient.id\u003dInteger.parseInt(data);\n  Map\u003cString,Object\u003e infos\u003dnew HashMap\u003c\u003e();\n  infos.put(\"version\",SimpleClient.VERSION);\n  pushToServer(channel,ServerEventCode.CODE_CLIENT_INFO_SET,Noson.reversal(infos));\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_ROOM_PLAY_FAIL_BY_INEXIST.java",
        "class": "ClientEventListener_CODE_ROOM_PLAY_FAIL_BY_INEXIST",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(Channel channel,String data){\n  SimplePrinter.printNotice(\"Play failed. Room already disbanded!\");\n  ClientEventListener.get(ClientEventCode.CODE_SHOW_OPTIONS).call(channel,data);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_GAME_LANDLORD_CONFIRM.java",
        "class": "ClientEventListener_CODE_GAME_LANDLORD_CONFIRM",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(Channel channel,String data){\n  Map\u003cString,Object\u003e map\u003dMapHelper.parser(data);\n  String landlordNickname\u003dString.valueOf(map.get(\"landlordNickname\"));\n  int baseScore\u003d(Integer)map.get(\"baseScore\");\n  String baseScoreString;\n  if (baseScore \u003d\u003d 1) {\n    baseScoreString\u003d\"1 score\";\n  }\n else {\n    baseScoreString\u003dbaseScore + \" scores\";\n  }\n  SimplePrinter.printNotice(landlordNickname + \" has become the landlord with \" + baseScoreString+ \" and gotten three extra cards\");\n  List\u003cPoker\u003e additionalPokers\u003dNoson.convert(map.get(\"additionalPokers\"),new NoType\u003cList\u003cPoker\u003e\u003e(){\n  }\n);\n  SimplePrinter.printPokers(additionalPokers);\n  pushToServer(channel,ServerEventCode.CODE_GAME_POKER_PLAY_REDIRECT);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_GAME_POKER_PLAY_CANT_PASS.java",
        "class": "ClientEventListener_CODE_GAME_POKER_PLAY_CANT_PASS",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(Channel channel,String data){\n  SimplePrinter.printNotice(\"You played the previous card, so you can\u0027t pass.\");\n  pushToServer(channel,ServerEventCode.CODE_GAME_POKER_PLAY_REDIRECT);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_GAME_STARTING.java",
        "class": "ClientEventListener_CODE_GAME_STARTING",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(Channel channel,String data){\n  Map\u003cString,Object\u003e map\u003dMapHelper.parser(data);\n  SimplePrinter.printNotice(\"Game starting!\");\n  List\u003cPoker\u003e pokers\u003dNoson.convert(map.get(\"pokers\"),new NoType\u003cList\u003cPoker\u003e\u003e(){\n  }\n);\n  SimplePrinter.printNotice(\"\");\n  SimplePrinter.printNotice(\"Your cards are\");\n  SimplePrinter.printPokers(pokers);\n  SimplePrinter.printNotice(\"Last cards are\");\n  SimplePrinter.printNotice(map.containsKey(\"lastPokers\") ? map.get(\"lastPokers\").toString() : \"\");\n  get(ClientEventCode.CODE_GAME_LANDLORD_ELECT).call(channel,data);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_GAME_LANDLORD_ELECT.java",
        "class": "ClientEventListener_CODE_GAME_LANDLORD_ELECT",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(Channel channel,String data){\n  Map\u003cString,Object\u003e map\u003dMapHelper.parser(data);\n  int turnClientId\u003d(int)map.get(\"nextClientId\");\n  int highestScore\u003d(int)map.get(\"highestScore\");\n  if (map.containsKey(\"preClientNickname\")) {\n    if (highestScore !\u003d 0 \u0026\u0026 map.get(\"preClientId\") \u003d\u003d map.get(\"currentLandlordId\")) {\n      SimplePrinter.printNotice(map.get(\"preClientNickname\") + \" robs the landlord with \" + highestScore+ \" score\"+ (highestScore \u003d\u003d 1 ? \"\" : \"s\")+ \"!\");\n    }\n else {\n      SimplePrinter.printNotice(map.get(\"preClientNickname\") + \" don\u0027t rob the landlord!\");\n    }\n  }\n  if (turnClientId !\u003d SimpleClient.id) {\n    SimplePrinter.printNotice(\"It\u0027s \" + map.get(\"nextClientNickname\") + \"\u0027s turn. Please wait patiently for his/her confirmation !\");\n  }\n else {\n    String message\u003d\"It\u0027s your turn. What score do you want to rob the landlord? [0\";\n    for (int i\u003dhighestScore + 1; i \u003c\u003d 3; ++i) {\n      message\u003dmessage + \"/\" + i;\n    }\n    message\u003dmessage + \"] (enter [exit|e] to exit current room)\";\n    SimplePrinter.printNotice(message);\n    String line\u003dSimpleWriter.write(\"getScore\");\n    if (!line.equalsIgnoreCase(\"exit\") \u0026\u0026 !line.equalsIgnoreCase(\"e\")) {\n      try {\n        int currentScore\u003dInteger.parseInt(line);\n        if (currentScore \u003c\u003d highestScore \u0026\u0026 currentScore !\u003d 0 || currentScore \u003e 3) {\n          SimplePrinter.printNotice(\"Invalid options\");\n          this.call(channel,data);\n          return;\n        }\n        String result;\n        if (currentScore \u003e highestScore) {\n          result\u003dMapHelper.newInstance().put(\"highestScore\",currentScore).put(\"currentLandlordId\",SimpleClient.id).json();\n        }\n else         if (map.containsKey(\"currentLandlordId\")) {\n          result\u003dMapHelper.newInstance().put(\"highestScore\",highestScore).put(\"currentLandlordId\",(int)map.get(\"currentLandlordId\")).json();\n        }\n else {\n          result\u003dMapHelper.newInstance().put(\"highestScore\",0).json();\n        }\n        this.pushToServer(channel,ServerEventCode.CODE_GAME_LANDLORD_ELECT,result);\n      }\n catch (      Exception e) {\n        SimplePrinter.printNotice(\"Invalid options\");\n        this.call(channel,data);\n      }\n    }\n else {\n      this.pushToServer(channel,ServerEventCode.CODE_CLIENT_EXIT);\n    }\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_GAME_WATCH_SUCCESSFUL.java",
        "class": "ClientEventListener_CODE_GAME_WATCH_SUCCESSFUL",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(Channel channel,String data){\n  User.INSTANCE.setWatching(true);\n  Map\u003cString,Object\u003e map\u003dMapHelper.parser(data);\n  SimplePrinter.printNotice(String.format(WATCH_SUCCESSFUL_TIPS,map.get(\"owner\"),map.get(\"status\")));\n  new Thread(() -\u003e registerExitEvent(channel),\"exit-spectator-input-thread\").start();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_GAME_WATCH_SUCCESSFUL.java",
        "class": "ClientEventListener_CODE_GAME_WATCH_SUCCESSFUL",
        "name": "registerExitEvent",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            }
        ],
        "raw": "private void registerExitEvent(Channel channel){\n  String enter\u003dSimpleWriter.write();\n  if (\"exit\".equalsIgnoreCase(enter) || \"e\".equalsIgnoreCase(enter)) {\n    quitWatch(channel);\n    return;\n  }\n  printCommandUsage();\n  registerExitEvent(channel);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_GAME_WATCH_SUCCESSFUL.java",
        "class": "ClientEventListener_CODE_GAME_WATCH_SUCCESSFUL",
        "name": "quitWatch",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            }
        ],
        "raw": "private void quitWatch(Channel channel){\n  SimplePrinter.printNotice(FORMATTER.format(LocalDateTime.now()) + \"  Spectating ended. Bye.\");\n  SimplePrinter.printNotice(\"\");\n  SimplePrinter.printNotice(\"\");\n  User.INSTANCE.setWatching(false);\n  pushToServer(channel,ServerEventCode.CODE_GAME_WATCH_EXIT);\n  get(ClientEventCode.CODE_SHOW_OPTIONS).call(channel,\"\");\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_GAME_WATCH_SUCCESSFUL.java",
        "class": "ClientEventListener_CODE_GAME_WATCH_SUCCESSFUL",
        "name": "printCommandUsage",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [],
        "raw": "private void printCommandUsage(){\n  SimplePrinter.printNotice(\"Enter [exit|e] to exit\");\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_GAME_POKER_PLAY_LESS.java",
        "class": "ClientEventListener_CODE_GAME_POKER_PLAY_LESS",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(Channel channel,String data){\n  SimplePrinter.printNotice(\"Your combination has lower rank than the previous. You cannot play this combination!\");\n  if (lastPokers !\u003d null) {\n    SimplePrinter.printNotice(lastSellClientNickname + \"[\" + lastSellClientType+ \"] played:\");\n    SimplePrinter.printPokers(lastPokers);\n  }\n  pushToServer(channel,ServerEventCode.CODE_GAME_POKER_PLAY_REDIRECT);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_GAME_POKER_PLAY_ORDER_ERROR.java",
        "class": "ClientEventListener_CODE_GAME_POKER_PLAY_ORDER_ERROR",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(Channel channel,String data){\n  SimplePrinter.printNotice(\"It is not your turn yet. Please wait for other players!\");\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_SHOW_OPTIONS.java",
        "class": "ClientEventListener_CODE_SHOW_OPTIONS",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(Channel channel,String data){\n  SimplePrinter.printNotice(\"Options: \");\n  SimplePrinter.printNotice(\"1. PvP\");\n  SimplePrinter.printNotice(\"2. PvE\");\n  SimplePrinter.printNotice(\"3. Settings\");\n  SimplePrinter.printNotice(\"Please select an option above (enter [exit|e] to log out)\");\n  String line\u003dSimpleWriter.write(User.INSTANCE.getNickname(),\"selection\");\n  if (line.equalsIgnoreCase(\"exit\") || line.equalsIgnoreCase(\"e\")) {\n    System.exit(0);\n  }\n else {\n    int choose\u003dOptionsUtils.getOptions(line);\n    if (choose \u003d\u003d 1) {\n      get(ClientEventCode.CODE_SHOW_OPTIONS_PVP).call(channel,data);\n    }\n else     if (choose \u003d\u003d 2) {\n      get(ClientEventCode.CODE_SHOW_OPTIONS_PVE).call(channel,data);\n    }\n else     if (choose \u003d\u003d 3) {\n      get(ClientEventCode.CODE_SHOW_OPTIONS_SETTING).call(channel,data);\n    }\n else {\n      SimplePrinter.printNotice(\"Invalid option, please choose again：\");\n      call(channel,data);\n    }\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_GAME_LANDLORD_CYCLE.java",
        "class": "ClientEventListener_CODE_GAME_LANDLORD_CYCLE",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(Channel channel,String data){\n  SimplePrinter.printNotice(\"No player takes the landlord, so redealing cards.\");\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_ROOM_JOIN_FAIL_BY_FULL.java",
        "class": "ClientEventListener_CODE_ROOM_JOIN_FAIL_BY_FULL",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(Channel channel,String data){\n  Map\u003cString,Object\u003e dataMap\u003dMapHelper.parser(data);\n  SimplePrinter.printNotice(\"Join room failed. Room \" + dataMap.get(\"roomId\") + \" is full!\");\n  ClientEventListener.get(ClientEventCode.CODE_SHOW_OPTIONS).call(channel,data);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_PVE_DIFFICULTY_NOT_SUPPORT.java",
        "class": "ClientEventListener_CODE_PVE_DIFFICULTY_NOT_SUPPORT",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(Channel channel,String data){\n  SimplePrinter.printNotice(\"The current difficulty is not supported, please pay attention to the following.\\n\");\n  get(ClientEventCode.CODE_SHOW_OPTIONS_PVE).call(channel,data);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_CLIENT_NICKNAME_SET.java",
        "class": "ClientEventListener_CODE_CLIENT_NICKNAME_SET",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(Channel channel,String data){\n  if (StringUtils.isNotBlank(data)) {\n    Map\u003cString,Object\u003e dataMap\u003dMapHelper.parser(data);\n    if (dataMap.containsKey(\"invalidLength\")) {\n      SimplePrinter.printNotice(\"Your nickname has invalid length: \" + dataMap.get(\"invalidLength\"));\n    }\n  }\n  SimplePrinter.printNotice(\"Please set your nickname (upto \" + NICKNAME_MAX_LENGTH + \" characters)\");\n  String nickname\u003dSimpleWriter.write(User.INSTANCE.getNickname(),\"nickname\");\n  if (nickname.trim().length() \u003e NICKNAME_MAX_LENGTH) {\n    String result\u003dMapHelper.newInstance().put(\"invalidLength\",nickname.trim().length()).json();\n    get(ClientEventCode.CODE_CLIENT_NICKNAME_SET).call(channel,result);\n  }\n else {\n    pushToServer(channel,ServerEventCode.CODE_CLIENT_NICKNAME_SET,nickname);\n    User.INSTANCE.setNickname(nickname);\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_GAME_WATCH.java",
        "class": "ClientEventListener_CODE_GAME_WATCH",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            },
            {
                "type": "String",
                "name": "wrapData"
            }
        ],
        "raw": "@Override public void call(Channel channel,String wrapData){\n  if (!User.INSTANCE.isWatching()) {\n    return;\n  }\n  Map\u003cString,Object\u003e wrapMap\u003dMapHelper.parser(wrapData);\n  ClientEventCode rawCode\u003dClientEventCode.valueOf(wrapMap.get(\"code\").toString());\n  Object rawData\u003dwrapMap.get(\"data\");\nswitch (rawCode) {\ncase CODE_ROOM_JOIN_SUCCESS:\n    printJoinPlayerInfo(rawData);\n  break;\ncase CODE_GAME_STARTING:\nprintGameStartInfo(rawData);\nbreak;\ncase CODE_GAME_LANDLORD_ELECT:\nprintRobLandlord(rawData);\nbreak;\ncase CODE_GAME_LANDLORD_CONFIRM:\nprintConfirmLandlord(rawData);\nbreak;\ncase CODE_SHOW_POKERS:\nprintPlayPokers(rawData);\nbreak;\ncase CODE_GAME_POKER_PLAY_PASS:\nprintPlayPass(rawData);\nbreak;\ncase CODE_CLIENT_EXIT:\nprintPlayerExit(rawData,channel);\nbreak;\ncase CODE_CLIENT_KICK:\nprintKickInfo(rawData);\nbreak;\ncase CODE_GAME_OVER:\nprintGameResult(rawData,channel);\nbreak;\ndefault :\nbreak;\n}\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_GAME_WATCH.java",
        "class": "ClientEventListener_CODE_GAME_WATCH",
        "name": "printJoinPlayerInfo",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [
            {
                "type": "Object",
                "name": "rawData"
            }
        ],
        "raw": "private void printJoinPlayerInfo(Object rawData){\n  printNoticeWithTime(\"Player [\" + rawData + \"] joined the room\");\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_GAME_WATCH.java",
        "class": "ClientEventListener_CODE_GAME_WATCH",
        "name": "printGameStartInfo",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [
            {
                "type": "Object",
                "name": "rawData"
            }
        ],
        "raw": "private void printGameStartInfo(Object rawData){\n  Map\u003cString,Object\u003e map\u003dMapHelper.parser(rawData.toString());\n  printNoticeWithTime(\"Game starting\");\n  printNoticeWithTime(\"Player1 : \" + map.get(\"player1\"));\n  printNoticeWithTime(\"Player2 : \" + map.get(\"player2\"));\n  printNoticeWithTime(\"Player3 : \" + map.get(\"player3\"));\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_GAME_WATCH.java",
        "class": "ClientEventListener_CODE_GAME_WATCH",
        "name": "printRobLandlord",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [
            {
                "type": "Object",
                "name": "rawData"
            }
        ],
        "raw": "private void printRobLandlord(Object rawData){\n  printNoticeWithTime(\"Player [\" + rawData + \"] didn\u0027t choose to become the landlord.\");\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_GAME_WATCH.java",
        "class": "ClientEventListener_CODE_GAME_WATCH",
        "name": "printConfirmLandlord",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [
            {
                "type": "Object",
                "name": "rawData"
            }
        ],
        "raw": "private void printConfirmLandlord(Object rawData){\n  Map\u003cString,Object\u003e map\u003dMapHelper.parser(rawData.toString());\n  printNoticeWithTime(\"Player [\" + map.get(\"landlord\") + \"] has become the landlord and gotten three extra cards:\");\n  SimplePrinter.printPokers(Noson.convert(map.get(\"additionalPokers\"),new NoType\u003cList\u003cPoker\u003e\u003e(){\n  }\n));\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_GAME_WATCH.java",
        "class": "ClientEventListener_CODE_GAME_WATCH",
        "name": "printPlayPokers",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [
            {
                "type": "Object",
                "name": "rawData"
            }
        ],
        "raw": "private void printPlayPokers(Object rawData){\n  Map\u003cString,Object\u003e map\u003dMapHelper.parser(rawData.toString());\n  printNoticeWithTime(\"Player [\" + map.get(\"clientNickname\") + \"] played:\");\n  SimplePrinter.printPokers(Noson.convert(map.get(\"pokers\"),new NoType\u003cList\u003cPoker\u003e\u003e(){\n  }\n));\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_GAME_WATCH.java",
        "class": "ClientEventListener_CODE_GAME_WATCH",
        "name": "printPlayPass",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [
            {
                "type": "Object",
                "name": "rawData"
            }
        ],
        "raw": "private void printPlayPass(Object rawData){\n  printNoticeWithTime(\"Player [\" + rawData + \"] : passed\");\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_GAME_WATCH.java",
        "class": "ClientEventListener_CODE_GAME_WATCH",
        "name": "printPlayerExit",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [
            {
                "type": "Object",
                "name": "rawData"
            },
            {
                "type": "Channel",
                "name": "channel"
            }
        ],
        "raw": "private void printPlayerExit(Object rawData,Channel channel){\n  printNoticeWithTime(\"Player [\" + rawData + \"] left the room\");\n  quitWatch(channel);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_GAME_WATCH.java",
        "class": "ClientEventListener_CODE_GAME_WATCH",
        "name": "quitWatch",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            }
        ],
        "raw": "private void quitWatch(Channel channel){\n  printNoticeWithTime(\"This room will be closed!\");\n  printNoticeWithTime(\"Spectating ended. Bye.\");\n  SimplePrinter.printNotice(\"\");\n  SimplePrinter.printNotice(\"\");\n  User.INSTANCE.setWatching(false);\n  get(ClientEventCode.CODE_SHOW_OPTIONS).call(channel,\"\");\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_GAME_WATCH.java",
        "class": "ClientEventListener_CODE_GAME_WATCH",
        "name": "printGameResult",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [
            {
                "type": "Object",
                "name": "rawData"
            },
            {
                "type": "Channel",
                "name": "channel"
            }
        ],
        "raw": "private void printGameResult(Object rawData,Channel channel){\n  Map\u003cString,Object\u003e map\u003dMapHelper.parser(rawData.toString());\n  printNoticeWithTime(\"Player [\" + map.get(\"winnerNickname\") + \"](\"+ map.get(\"winnerType\")+ \") won the game.\");\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_GAME_WATCH.java",
        "class": "ClientEventListener_CODE_GAME_WATCH",
        "name": "printKickInfo",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [
            {
                "type": "Object",
                "name": "rawData"
            }
        ],
        "raw": "private void printKickInfo(Object rawData){\n  printNoticeWithTime(\"Player [\" + rawData + \"] has been kicked out for being idle.\");\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_GAME_WATCH.java",
        "class": "ClientEventListener_CODE_GAME_WATCH",
        "name": "printNoticeWithTime",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [
            {
                "type": "String",
                "name": "notice"
            }
        ],
        "raw": "private void printNoticeWithTime(String notice){\n  String msg\u003dFORMATTER.format(LocalDateTime.now()) + \"  \" + notice;\n  SimplePrinter.printNotice(msg);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_ROOM_JOIN_SUCCESS.java",
        "class": "ClientEventListener_CODE_ROOM_JOIN_SUCCESS",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(Channel channel,String data){\n  Map\u003cString,Object\u003e map\u003dMapHelper.parser(data);\n  initLastSellInfo();\n  int joinClientId\u003d(int)map.get(\"clientId\");\n  if (SimpleClient.id \u003d\u003d joinClientId) {\n    SimplePrinter.printNotice(\"You have joined room：\" + map.get(\"roomId\") + \". There are \"+ map.get(\"roomClientCount\")+ \" players in the room now.\");\n    SimplePrinter.printNotice(\"Please wait for other players to join. The game would start at three players!\");\n  }\n else {\n    SimplePrinter.printNotice(map.get(\"clientNickname\") + \" joined room, there are currently \" + map.get(\"roomClientCount\")+ \" in the room.\");\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_GAME_POKER_PLAY_REDIRECT.java",
        "class": "ClientEventListener_CODE_GAME_POKER_PLAY_REDIRECT",
        "name": "call",
        "return_type": "void",
        "modifiers": "@SuppressWarnings(\"unchecked\") @Override public",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@SuppressWarnings(\"unchecked\") @Override public void call(Channel channel,String data){\n  Map\u003cString,Object\u003e map\u003dMapHelper.parser(data);\n  int sellClientId\u003d(int)map.get(\"sellClientId\");\n  List\u003cMap\u003cString,Object\u003e\u003e clientInfos\u003d(List\u003cMap\u003cString,Object\u003e\u003e)map.get(\"clientInfos\");\n  for (int index\u003d0; index \u003c 2; index++) {\n    for (    Map\u003cString,Object\u003e clientInfo : clientInfos) {\n      String position\u003d(String)clientInfo.get(\"position\");\n      if (position.equalsIgnoreCase(choose[index])) {\n        FormatPrinter.printNotice(format,clientInfo.get(\"position\"),clientInfo.get(\"clientNickname\"),clientInfo.get(\"surplus\"),clientInfo.get(\"type\"));\n      }\n    }\n  }\n  SimplePrinter.printNotice(\"\");\n  if (sellClientId \u003d\u003d SimpleClient.id) {\n    get(ClientEventCode.CODE_GAME_POKER_PLAY).call(channel,data);\n  }\n else {\n    SimplePrinter.printNotice(\"It is \" + map.get(\"sellClientNickname\") + \"\u0027s turn. Please wait for him to play his cards.\");\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_GAME_POKER_PLAY_PASS.java",
        "class": "ClientEventListener_CODE_GAME_POKER_PLAY_PASS",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(Channel channel,String data){\n  Map\u003cString,Object\u003e map\u003dMapHelper.parser(data);\n  SimplePrinter.printNotice(map.get(\"clientNickname\") + \" passed. It is now \" + map.get(\"nextClientNickname\")+ \"\u0027s turn.\");\n  int turnClientId\u003d(int)map.get(\"nextClientId\");\n  if (SimpleClient.id \u003d\u003d turnClientId) {\n    pushToServer(channel,ServerEventCode.CODE_GAME_POKER_PLAY_REDIRECT);\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_ROOM_JOIN_FAIL_BY_INEXIST.java",
        "class": "ClientEventListener_CODE_ROOM_JOIN_FAIL_BY_INEXIST",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(Channel channel,String data){\n  Map\u003cString,Object\u003e dataMap\u003dMapHelper.parser(data);\n  SimplePrinter.printNotice(\"Join room failed. Room \" + dataMap.get(\"roomId\") + \" doesn\u0027t exist!\");\n  ClientEventListener.get(ClientEventCode.CODE_SHOW_OPTIONS).call(channel,data);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_GAME_OVER.java",
        "class": "ClientEventListener_CODE_GAME_OVER",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(Channel channel,String data){\n  Map\u003cString,Object\u003e map\u003dMapHelper.parser(data);\n  SimplePrinter.printNotice(\"\\nPlayer \" + map.get(\"winnerNickname\") + \"[\"+ map.get(\"winnerType\")+ \"]\"+ \" won the game\");\n  if (map.containsKey(\"scores\")) {\n    List\u003cMap\u003cString,Object\u003e\u003e scores\u003dNoson.convert(map.get(\"scores\"),new NoType\u003cList\u003cMap\u003cString,Object\u003e\u003e\u003e(){\n    }\n);\n    for (    Map\u003cString,Object\u003e score : scores) {\n      if (!Objects.equals(score.get(\"clientId\"),SimpleClient.id)) {\n        SimplePrinter.printNotice(score.get(\"nickName\").toString() + \"\u0027s rest poker is:\");\n        SimplePrinter.printPokers(Noson.convert(score.get(\"pokers\"),new NoType\u003cList\u003cPoker\u003e\u003e(){\n        }\n));\n      }\n    }\n    SimplePrinter.printNotice(\"\\n\");\n    for (    Map\u003cString,Object\u003e score : scores) {\n      String scoreInc\u003dscore.get(\"scoreInc\").toString();\n      String scoreTotal\u003dscore.get(\"score\").toString();\n      if (SimpleClient.id !\u003d (int)score.get(\"clientId\")) {\n        SimplePrinter.printNotice(score.get(\"nickName\").toString() + \"\u0027s score is \" + scoreInc+ \", total score is \"+ scoreTotal);\n      }\n else {\n        SimplePrinter.printNotice(\"your score is \" + scoreInc + \", total score is \"+ scoreTotal);\n      }\n    }\n    ClientEventListener_CODE_GAME_READY.gameReady(channel);\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_GAME_READY.java",
        "class": "ClientEventListener_CODE_GAME_READY",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(Channel channel,String data){\n  Map\u003cString,Object\u003e map\u003dMapHelper.parser(data);\n  if (SimpleClient.id \u003d\u003d (int)map.get(\"clientId\")) {\n    SimplePrinter.printNotice(\"you are ready to play game.\");\n    return;\n  }\n  SimplePrinter.printNotice(map.get(\"clientNickName\").toString() + \" is ready to play game.\");\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_GAME_READY.java",
        "class": "ClientEventListener_CODE_GAME_READY",
        "name": "gameReady",
        "return_type": "void",
        "modifiers": "static",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            }
        ],
        "raw": "static void gameReady(Channel channel){\n  SimplePrinter.printNotice(\"\\nDo you want to continue the game? [Y/N]\");\n  String line\u003dSimpleWriter.write(User.INSTANCE.getNickname(),\"notReady\");\n  if (line.equals(\"Y\") || line.equals(\"y\")) {\n    ChannelUtils.pushToServer(channel,ServerEventCode.CODE_GAME_READY,\"\");\n    return;\n  }\n  ChannelUtils.pushToServer(channel,ServerEventCode.CODE_CLIENT_EXIT,\"\");\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_SHOW_OPTIONS_SETTING.java",
        "class": "ClientEventListener_CODE_SHOW_OPTIONS_SETTING",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(Channel channel,String data){\n  SimplePrinter.printNotice(\"Setting: \");\n  SimplePrinter.printNotice(\"1. Card with shape edges (Default)\");\n  SimplePrinter.printNotice(\"2. Card with rounded edges\");\n  SimplePrinter.printNotice(\"3. Text Only with types\");\n  SimplePrinter.printNotice(\"4. Text Only without types\");\n  SimplePrinter.printNotice(\"5. Unicode Cards\");\n  SimplePrinter.printNotice(\"Please select an option above (enter [BACK] to return to options list)\");\n  String line\u003dSimpleWriter.write(User.INSTANCE.getNickname(),\"setting\");\n  if (line.equalsIgnoreCase(\"BACK\")) {\n    get(ClientEventCode.CODE_SHOW_OPTIONS).call(channel,data);\n  }\n else {\n    int choose\u003dOptionsUtils.getOptions(line);\n    if (choose \u003e\u003d 1 \u0026\u0026 choose \u003c\u003d 5) {\n      PokerHelper.pokerPrinterType\u003dchoose - 1;\n      get(ClientEventCode.CODE_SHOW_OPTIONS).call(channel,data);\n    }\n else {\n      SimplePrinter.printNotice(\"Invalid setting, please choose again：\");\n      call(channel,data);\n    }\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_ROOM_CREATE_SUCCESS.java",
        "class": "ClientEventListener_CODE_ROOM_CREATE_SUCCESS",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(Channel channel,String data){\n  Room room\u003dNoson.convert(data,Room.class);\n  initLastSellInfo();\n  SimplePrinter.printNotice(\"You have created a room with id \" + room.getId());\n  SimplePrinter.printNotice(\"Please wait for other players to join !\");\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener.java",
        "class": "ClientEventListener",
        "name": "call",
        "return_type": "void",
        "modifiers": "public abstract",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "public abstract void call(Channel channel,String data);\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener.java",
        "class": "ClientEventListener",
        "name": "initLastSellInfo",
        "return_type": "void",
        "modifiers": "protected static",
        "parameters": [],
        "raw": "protected static void initLastSellInfo(){\n  lastPokers\u003dnull;\n  lastSellClientNickname\u003dnull;\n  lastSellClientType\u003dnull;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener.java",
        "class": "ClientEventListener",
        "name": "get",
        "return_type": "ClientEventListener",
        "modifiers": "@SuppressWarnings(\"unchecked\") public static",
        "parameters": [
            {
                "type": "ClientEventCode",
                "name": "code"
            }
        ],
        "raw": "@SuppressWarnings(\"unchecked\") public static ClientEventListener get(ClientEventCode code){\n  ClientEventListener listener;\n  try {\n    if (ClientEventListener.LISTENER_MAP.containsKey(code)) {\n      listener\u003dClientEventListener.LISTENER_MAP.get(code);\n    }\n else {\n      String eventListener\u003dLISTENER_PREFIX + code.name().toUpperCase(Locale.ROOT);\n      Class\u003cClientEventListener\u003e listenerClass\u003d(Class\u003cClientEventListener\u003e)Class.forName(eventListener);\n      listener\u003dlistenerClass.newInstance();\n      ClientEventListener.LISTENER_MAP.put(code,listener);\n    }\n    return listener;\n  }\n catch (  ClassNotFoundException|InstantiationException|IllegalAccessException e) {\n    e.printStackTrace();\n  }\n  return null;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener.java",
        "class": "ClientEventListener",
        "name": "pushToServer",
        "return_type": "ChannelFuture",
        "modifiers": "protected",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            },
            {
                "type": "ServerEventCode",
                "name": "code"
            },
            {
                "type": "String",
                "name": "datas"
            }
        ],
        "raw": "protected ChannelFuture pushToServer(Channel channel,ServerEventCode code,String datas){\n  return ChannelUtils.pushToServer(channel,code,datas);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener.java",
        "class": "ClientEventListener",
        "name": "pushToServer",
        "return_type": "ChannelFuture",
        "modifiers": "protected",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            },
            {
                "type": "ServerEventCode",
                "name": "code"
            }
        ],
        "raw": "protected ChannelFuture pushToServer(Channel channel,ServerEventCode code){\n  return pushToServer(channel,code,null);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_GAME_POKER_PLAY_INVALID.java",
        "class": "ClientEventListener_CODE_GAME_POKER_PLAY_INVALID",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(Channel channel,String data){\n  SimplePrinter.printNotice(\"This combination is invalid.\");\n  if (lastPokers !\u003d null) {\n    SimplePrinter.printNotice(lastSellClientNickname + \"[\" + lastSellClientType+ \"] played:\");\n    SimplePrinter.printPokers(lastPokers);\n  }\n  pushToServer(channel,ServerEventCode.CODE_GAME_POKER_PLAY_REDIRECT);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_GAME_POKER_PLAY_MISMATCH.java",
        "class": "ClientEventListener_CODE_GAME_POKER_PLAY_MISMATCH",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(Channel channel,String data){\n  Map\u003cString,Object\u003e map\u003dMapHelper.parser(data);\n  SimplePrinter.printNotice(\"Your combination is \" + map.get(\"playType\") + \" (\"+ map.get(\"playCount\")+ \"), but the previous combination is \"+ map.get(\"preType\")+ \" (\"+ map.get(\"preCount\")+ \"). Mismatch!\");\n  if (lastPokers !\u003d null) {\n    SimplePrinter.printNotice(lastSellClientNickname + \"[\" + lastSellClientType+ \"] played:\");\n    SimplePrinter.printPokers(lastPokers);\n  }\n  pushToServer(channel,ServerEventCode.CODE_GAME_POKER_PLAY_REDIRECT);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_SHOW_POKERS.java",
        "class": "ClientEventListener_CODE_SHOW_POKERS",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(Channel channel,String data){\n  Map\u003cString,Object\u003e map\u003dMapHelper.parser(data);\n  lastSellClientNickname\u003d(String)map.get(\"clientNickname\");\n  lastSellClientType\u003d(String)map.get(\"clientType\");\n  SimplePrinter.printNotice(lastSellClientNickname + \"[\" + lastSellClientType+ \"] played:\");\n  lastPokers\u003dNoson.convert(map.get(\"pokers\"),new NoType\u003cList\u003cPoker\u003e\u003e(){\n  }\n);\n  SimplePrinter.printPokers(lastPokers);\n  if (map.containsKey(\"sellClientNickname\")) {\n    SimplePrinter.printNotice(\"Next player is \" + map.get(\"sellClientNickname\") + \". Please wait for him to play his combination.\");\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_SHOW_OPTIONS_PVP.java",
        "class": "ClientEventListener_CODE_SHOW_OPTIONS_PVP",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(Channel channel,String data){\n  SimplePrinter.printNotice(\"PVP: \");\n  SimplePrinter.printNotice(\"1. Create Room\");\n  SimplePrinter.printNotice(\"2. Room List\");\n  SimplePrinter.printNotice(\"3. Join Room\");\n  SimplePrinter.printNotice(\"4. Spectate Game\");\n  SimplePrinter.printNotice(\"Please select an option above (enter [back|b] to return to options list)\");\n  String line\u003dSimpleWriter.write(User.INSTANCE.getNickname(),\"pvp\");\n  if (line \u003d\u003d null) {\n    SimplePrinter.printNotice(\"Invalid options, please choose again：\");\n    call(channel,data);\n    return;\n  }\n  if (line.equalsIgnoreCase(\"BACK\") || line.equalsIgnoreCase(\"b\")) {\n    get(ClientEventCode.CODE_SHOW_OPTIONS).call(channel,data);\n    return;\n  }\n  int choose\u003dOptionsUtils.getOptions(line);\nswitch (choose) {\ncase 1:\n    pushToServer(channel,ServerEventCode.CODE_ROOM_CREATE,null);\n  break;\ncase 2:\npushToServer(channel,ServerEventCode.CODE_GET_ROOMS,null);\nbreak;\ncase 3:\nhandleJoinRoom(channel,data);\nbreak;\ncase 4:\nhandleJoinRoom(channel,data,true);\nbreak;\ndefault :\nSimplePrinter.printNotice(\"Invalid option, please choose again：\");\ncall(channel,data);\n}\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_SHOW_OPTIONS_PVP.java",
        "class": "ClientEventListener_CODE_SHOW_OPTIONS_PVP",
        "name": "parseInvalid",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "private void parseInvalid(Channel channel,String data){\n  SimplePrinter.printNotice(\"Invalid options, please choose again：\");\n  call(channel,data);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_SHOW_OPTIONS_PVP.java",
        "class": "ClientEventListener_CODE_SHOW_OPTIONS_PVP",
        "name": "handleJoinRoom",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "private void handleJoinRoom(Channel channel,String data){\n  handleJoinRoom(channel,data,false);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-client/src/main/java/org/nico/ratel/landlords/client/event/ClientEventListener_CODE_SHOW_OPTIONS_PVP.java",
        "class": "ClientEventListener_CODE_SHOW_OPTIONS_PVP",
        "name": "handleJoinRoom",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            },
            {
                "type": "String",
                "name": "data"
            },
            {
                "type": "Boolean",
                "name": "watchMode"
            }
        ],
        "raw": "private void handleJoinRoom(Channel channel,String data,Boolean watchMode){\n  String notice\u003dString.format(\"Please enter the room id you want to %s (enter [back|b] return options list)\",watchMode ? \"spectate\" : \"join\");\n  SimplePrinter.printNotice(notice);\n  String line\u003dSimpleWriter.write(User.INSTANCE.getNickname(),\"roomid\");\n  if (line \u003d\u003d null) {\n    parseInvalid(channel,data);\n    return;\n  }\n  if (line.equalsIgnoreCase(\"BACK\") || line.equalsIgnoreCase(\"b\")) {\n    call(channel,data);\n    return;\n  }\n  int option\u003dOptionsUtils.getOptions(line);\n  if (option \u003c 1) {\n    parseInvalid(channel,data);\n    return;\n  }\n  pushToServer(channel,watchMode ? ServerEventCode.CODE_GAME_WATCH : ServerEventCode.CODE_ROOM_JOIN,String.valueOf(option));\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/evosuite-tests/org/nico/ratel/landlords/utils/ListUtils_ESTest_scaffolding.java",
        "class": "ListUtils_ESTest_scaffolding",
        "name": "initEvoSuiteFramework",
        "return_type": "void",
        "modifiers": "@BeforeClass public static",
        "parameters": [],
        "raw": "@BeforeClass public static void initEvoSuiteFramework(){\n  org.evosuite.runtime.RuntimeSettings.className\u003d\"org.nico.ratel.landlords.utils.ListUtils\";\n  org.evosuite.runtime.GuiSupport.initialize();\n  org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads\u003d100;\n  org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop\u003d10000;\n  org.evosuite.runtime.RuntimeSettings.mockSystemIn\u003dtrue;\n  org.evosuite.runtime.RuntimeSettings.sandboxMode\u003dorg.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED;\n  org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT();\n  org.evosuite.runtime.classhandling.JDKClassResetter.init();\n  setSystemProperties();\n  initializeClasses();\n  org.evosuite.runtime.Runtime.getInstance().resetRuntime();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/evosuite-tests/org/nico/ratel/landlords/utils/ListUtils_ESTest_scaffolding.java",
        "class": "ListUtils_ESTest_scaffolding",
        "name": "clearEvoSuiteFramework",
        "return_type": "void",
        "modifiers": "@AfterClass public static",
        "parameters": [],
        "raw": "@AfterClass public static void clearEvoSuiteFramework(){\n  Sandbox.resetDefaultSecurityManager();\n  java.lang.System.setProperties((java.util.Properties)defaultProperties.clone());\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/evosuite-tests/org/nico/ratel/landlords/utils/ListUtils_ESTest_scaffolding.java",
        "class": "ListUtils_ESTest_scaffolding",
        "name": "initTestCase",
        "return_type": "void",
        "modifiers": "@Before public",
        "parameters": [],
        "raw": "@Before public void initTestCase(){\n  threadStopper.storeCurrentThreads();\n  threadStopper.startRecordingTime();\n  org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler();\n  org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode();\n  setSystemProperties();\n  org.evosuite.runtime.GuiSupport.setHeadless();\n  org.evosuite.runtime.Runtime.getInstance().resetRuntime();\n  org.evosuite.runtime.agent.InstrumentingAgent.activate();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/evosuite-tests/org/nico/ratel/landlords/utils/ListUtils_ESTest_scaffolding.java",
        "class": "ListUtils_ESTest_scaffolding",
        "name": "doneWithTestCase",
        "return_type": "void",
        "modifiers": "@After public",
        "parameters": [],
        "raw": "@After public void doneWithTestCase(){\n  threadStopper.killAndJoinClientThreads();\n  org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks();\n  org.evosuite.runtime.classhandling.JDKClassResetter.reset();\n  resetClasses();\n  org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode();\n  org.evosuite.runtime.agent.InstrumentingAgent.deactivate();\n  org.evosuite.runtime.GuiSupport.restoreHeadlessMode();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/evosuite-tests/org/nico/ratel/landlords/utils/ListUtils_ESTest_scaffolding.java",
        "class": "ListUtils_ESTest_scaffolding",
        "name": "setSystemProperties",
        "return_type": "void",
        "modifiers": "public static",
        "parameters": [],
        "raw": "public static void setSystemProperties(){\n  java.lang.System.setProperties((java.util.Properties)defaultProperties.clone());\n  java.lang.System.setProperty(\"file.encoding\",\"UTF-8\");\n  java.lang.System.setProperty(\"java.awt.headless\",\"true\");\n  java.lang.System.setProperty(\"java.io.tmpdir\",\"/tmp\");\n  java.lang.System.setProperty(\"user.country\",\"US\");\n  java.lang.System.setProperty(\"user.dir\",\"/home/lvdthieu/code-gen/ratel/landlords-common\");\n  java.lang.System.setProperty(\"user.home\",\"/home/lvdthieu\");\n  java.lang.System.setProperty(\"user.language\",\"en\");\n  java.lang.System.setProperty(\"user.name\",\"lvdthieu\");\n  java.lang.System.setProperty(\"user.timezone\",\"Asia/Ho_Chi_Minh\");\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/evosuite-tests/org/nico/ratel/landlords/utils/ListUtils_ESTest_scaffolding.java",
        "class": "ListUtils_ESTest_scaffolding",
        "name": "initializeClasses",
        "return_type": "void",
        "modifiers": "private static",
        "parameters": [],
        "raw": "private static void initializeClasses(){\n  org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ListUtils_ESTest_scaffolding.class.getClassLoader(),\"org.nico.ratel.landlords.utils.ListUtils\");\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/evosuite-tests/org/nico/ratel/landlords/utils/ListUtils_ESTest_scaffolding.java",
        "class": "ListUtils_ESTest_scaffolding",
        "name": "resetClasses",
        "return_type": "void",
        "modifiers": "private static",
        "parameters": [],
        "raw": "private static void resetClasses(){\n  org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ListUtils_ESTest_scaffolding.class.getClassLoader());\n  org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(\"org.nico.ratel.landlords.utils.ListUtils\");\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/evosuite-tests/org/nico/ratel/landlords/utils/ListUtils_ESTest.java",
        "class": "ListUtils_ESTest",
        "name": "test0",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test0() throws Throwable {\n  List\u003cString\u003e[] listArray0\u003d(List\u003cString\u003e[])Array.newInstance(List.class,1);\n  LinkedList\u003cString\u003e linkedList0\u003dnew LinkedList\u003cString\u003e();\n  listArray0[0]\u003d(List\u003cString\u003e)linkedList0;\n  List\u003cString\u003e list0\u003dListUtils.getList(listArray0);\n  assertEquals(0,list0.size());\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/evosuite-tests/org/nico/ratel/landlords/utils/ListUtils_ESTest.java",
        "class": "ListUtils_ESTest",
        "name": "test1",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test1() throws Throwable {\n  Object[] objectArray0\u003dnew Object[0];\n  List\u003cObject\u003e list0\u003dListUtils.getList(objectArray0);\n  assertTrue(list0.isEmpty());\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/evosuite-tests/org/nico/ratel/landlords/utils/ListUtils_ESTest.java",
        "class": "ListUtils_ESTest",
        "name": "test2",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test2() throws Throwable {\n  LinkedList\u003cString\u003e linkedList0\u003dnew LinkedList\u003cString\u003e();\n  List\u003cString\u003e list0\u003dListUtils.getList((List\u003cString\u003e)linkedList0);\n  assertTrue(list0.isEmpty());\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/evosuite-tests/org/nico/ratel/landlords/utils/ListUtils_ESTest.java",
        "class": "ListUtils_ESTest",
        "name": "test3",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test3() throws Throwable {\n  Object[] objectArray0\u003dnew Object[4];\n  List\u003cObject\u003e list0\u003dListUtils.getList(objectArray0);\n  List\u003cObject\u003e list1\u003dListUtils.getList(list0);\n  assertNotSame(list1,list0);\n  assertEquals(4,list1.size());\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/evosuite-tests/org/nico/ratel/landlords/utils/ListUtils_ESTest.java",
        "class": "ListUtils_ESTest",
        "name": "test4",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test4() throws Throwable {\n  try {\n    ListUtils.getList((List\u003cObject\u003e[])null);\n    fail(\"Expecting exception: NullPointerException\");\n  }\n catch (  NullPointerException e) {\n    verifyException(\"org.nico.ratel.landlords.utils.ListUtils\",e);\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/evosuite-tests/org/nico/ratel/landlords/utils/ListUtils_ESTest.java",
        "class": "ListUtils_ESTest",
        "name": "test5",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test5() throws Throwable {\n  try {\n    ListUtils.getList((String[])null);\n    fail(\"Expecting exception: NullPointerException\");\n  }\n catch (  NullPointerException e) {\n    verifyException(\"org.nico.ratel.landlords.utils.ListUtils\",e);\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/evosuite-tests/org/nico/ratel/landlords/utils/ListUtils_ESTest.java",
        "class": "ListUtils_ESTest",
        "name": "test6",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test6() throws Throwable {\n  ListUtils listUtils0\u003dnew ListUtils();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/evosuite-tests/org/nico/ratel/landlords/utils/ListUtils_ESTest.java",
        "class": "ListUtils_ESTest",
        "name": "test7",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test7() throws Throwable {\n  Object[] objectArray0\u003dnew Object[4];\n  List\u003cObject\u003e list0\u003dListUtils.getList(objectArray0);\n  List\u003cObject\u003e[] listArray0\u003d(List\u003cObject\u003e[])Array.newInstance(List.class,1);\n  listArray0[0]\u003dlist0;\n  List\u003cObject\u003e list1\u003dListUtils.getList(listArray0);\n  assertFalse(list1.isEmpty());\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/evosuite-tests/org/nico/ratel/landlords/utils/ListUtils_ESTest.java",
        "class": "ListUtils_ESTest",
        "name": "test8",
        "return_type": "void",
        "modifiers": "@Test(timeout\u003d4000) public",
        "parameters": [],
        "raw": "@Test(timeout\u003d4000) public void test8() throws Throwable {\n  try {\n    ListUtils.getList((List\u003cObject\u003e)null);\n    fail(\"Expecting exception: NullPointerException\");\n  }\n catch (  NullPointerException e) {\n    verifyException(\"org.nico.ratel.landlords.utils.ListUtils\",e);\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/utils/ListUtils.java",
        "class": "ListUtils",
        "name": "getList",
        "return_type": "List\u003cT\u003e",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "T[]",
                "name": "array"
            }
        ],
        "raw": "public static \u003cT\u003eList\u003cT\u003e getList(T[] array){\n  List\u003cT\u003e list\u003dnew ArrayList\u003c\u003e(array.length);\n  Collections.addAll(list,array);\n  return list;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/utils/ListUtils.java",
        "class": "ListUtils",
        "name": "getList",
        "return_type": "List\u003cT\u003e",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "List\u003cT\u003e[]",
                "name": "array"
            }
        ],
        "raw": "public static \u003cT\u003eList\u003cT\u003e getList(List\u003cT\u003e[] array){\n  List\u003cT\u003e list\u003dnew ArrayList\u003c\u003e(array.length);\n  for (  List\u003cT\u003e t : array) {\n    list.addAll(t);\n  }\n  return list;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/utils/ListUtils.java",
        "class": "ListUtils",
        "name": "getList",
        "return_type": "List\u003cT\u003e",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "List\u003cT\u003e",
                "name": "source"
            }
        ],
        "raw": "public static \u003cT\u003eList\u003cT\u003e getList(List\u003cT\u003e source){\n  List\u003cT\u003e list\u003dnew ArrayList\u003c\u003e(source.size());\n  list.addAll(source);\n  return list;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/utils/LastCardsUtils.java",
        "class": "LastCardsUtils",
        "name": "getLastCards",
        "return_type": "String",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "List\u003cList\u003cPoker\u003e\u003e",
                "name": "pokers"
            }
        ],
        "raw": "public static String getLastCards(List\u003cList\u003cPoker\u003e\u003e pokers){\n  StringBuffer lastCards\u003dnew StringBuffer();\n  Map\u003cString,Integer\u003e lastCardMap\u003dinitLastCards();\n  for (int i\u003d0; i \u003c pokers.size(); i++) {\n    List\u003cPoker\u003e pokerList\u003dpokers.get(i);\n    for (int a\u003d0; a \u003c pokerList.size(); a++) {\n      Poker poker\u003dpokerList.get(a);\n      lastCardMap.put(poker.getLevel().getName(),(lastCardMap.get(poker.getLevel().getName()) + 1));\n    }\n  }\n  for (int i\u003d0; i \u003c defSort.size(); i++) {\n    String key\u003ddefSort.get(i);\n    lastCards.append(key + \"[\" + lastCardMap.get(key)+ \"] \");\n  }\n  return lastCards.toString();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/utils/LastCardsUtils.java",
        "class": "LastCardsUtils",
        "name": "initLastCards",
        "return_type": "Map\u003cString,Integer\u003e",
        "modifiers": "private static",
        "parameters": [],
        "raw": "private static Map\u003cString,Integer\u003e initLastCards(){\n  Map\u003cString,Integer\u003e lastCardMap\u003dnew HashMap\u003c\u003e();\n  lastCardMap.put(\"A\",0);\n  lastCardMap.put(\"2\",0);\n  lastCardMap.put(\"3\",0);\n  lastCardMap.put(\"4\",0);\n  lastCardMap.put(\"5\",0);\n  lastCardMap.put(\"6\",0);\n  lastCardMap.put(\"7\",0);\n  lastCardMap.put(\"8\",0);\n  lastCardMap.put(\"9\",0);\n  lastCardMap.put(\"10\",0);\n  lastCardMap.put(\"J\",0);\n  lastCardMap.put(\"Q\",0);\n  lastCardMap.put(\"K\",0);\n  lastCardMap.put(\"S\",0);\n  lastCardMap.put(\"X\",0);\n  return lastCardMap;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/utils/StreamUtils.java",
        "class": "StreamUtils",
        "name": "convertToString",
        "return_type": "String",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "InputStream",
                "name": "inStream"
            }
        ],
        "raw": "/** \n * Convert input stream to string\n * @param inStream Input stream\n * @return {@link String}\n */\npublic static String convertToString(InputStream inStream){\n  BufferedReader br\u003dnew BufferedReader(new InputStreamReader(inStream));\n  StringBuilder reqStr\u003dnew StringBuilder();\n  char[] buf\u003dnew char[2048];\n  int len;\n  try {\n    while ((len\u003dbr.read(buf)) !\u003d -1) {\n      reqStr.append(new String(buf,0,len));\n    }\n    br.close();\n  }\n catch (  IOException e) {\n    return null;\n  }\n finally {\n    try {\n      br.close();\n    }\n catch (    IOException e) {\n      e.printStackTrace();\n    }\n  }\n  return reqStr.toString();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/utils/StreamUtils.java",
        "class": "StreamUtils",
        "name": "convertToString",
        "return_type": "String",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "URL",
                "name": "url"
            }
        ],
        "raw": "public static String convertToString(URL url) throws IOException {\n  URLConnection con\u003durl.openConnection();\n  con.setUseCaches(false);\n  con.setRequestProperty(\"User-Agent\",\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.193 Safari/537.36\");\n  return convertToString(con.getInputStream());\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/utils/JsonUtils.java",
        "class": "JsonUtils",
        "name": "toJson",
        "return_type": "String",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "Object",
                "name": "o"
            }
        ],
        "raw": "public static String toJson(Object o){\n  return GSON.toJson(o);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/utils/JsonUtils.java",
        "class": "JsonUtils",
        "name": "fromJson",
        "return_type": "T",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "String",
                "name": "json"
            },
            {
                "type": "Class\u003cT\u003e",
                "name": "clazz"
            }
        ],
        "raw": "public static \u003cT\u003eT fromJson(String json,Class\u003cT\u003e clazz){\n  return GSON.fromJson(json,clazz);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/utils/OptionsUtils.java",
        "class": "OptionsUtils",
        "name": "getOptions",
        "return_type": "int",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "String",
                "name": "line"
            }
        ],
        "raw": "public static int getOptions(String line){\n  int option\u003d-1;\n  try {\n    option\u003dInteger.parseInt(line);\n  }\n catch (  Exception ignored) {\n  }\n  return option;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Poker.java",
        "class": "Poker",
        "name": "Poker",
        "return_type": "void",
        "modifiers": "public",
        "parameters": [],
        "raw": "public Poker(){\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Poker.java",
        "class": "Poker",
        "name": "Poker",
        "return_type": "void",
        "modifiers": "public",
        "parameters": [
            {
                "type": "PokerLevel",
                "name": "level"
            },
            {
                "type": "PokerType",
                "name": "type"
            }
        ],
        "raw": "public Poker(PokerLevel level,PokerType type){\n  this.level\u003dlevel;\n  this.type\u003dtype;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Poker.java",
        "class": "Poker",
        "name": "getLevel",
        "return_type": "PokerLevel",
        "modifiers": "public final",
        "parameters": [],
        "raw": "public final PokerLevel getLevel(){\n  return level;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Poker.java",
        "class": "Poker",
        "name": "setLevel",
        "return_type": "void",
        "modifiers": "public final",
        "parameters": [
            {
                "type": "PokerLevel",
                "name": "level"
            }
        ],
        "raw": "public final void setLevel(PokerLevel level){\n  this.level\u003dlevel;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Poker.java",
        "class": "Poker",
        "name": "getType",
        "return_type": "PokerType",
        "modifiers": "public final",
        "parameters": [],
        "raw": "public final PokerType getType(){\n  return type;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Poker.java",
        "class": "Poker",
        "name": "setType",
        "return_type": "void",
        "modifiers": "public final",
        "parameters": [
            {
                "type": "PokerType",
                "name": "type"
            }
        ],
        "raw": "public final void setType(PokerType type){\n  this.type\u003dtype;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Poker.java",
        "class": "Poker",
        "name": "hashCode",
        "return_type": "int",
        "modifiers": "@Override public",
        "parameters": [],
        "raw": "@Override public int hashCode(){\n  final int prime\u003d31;\n  int result\u003d1;\n  result\u003dprime * result + ((level \u003d\u003d null) ? 0 : level.hashCode());\n  result\u003dprime * result + ((type \u003d\u003d null) ? 0 : type.hashCode());\n  return result;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Poker.java",
        "class": "Poker",
        "name": "equals",
        "return_type": "boolean",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "Object",
                "name": "obj"
            }
        ],
        "raw": "@Override public boolean equals(Object obj){\n  if (this \u003d\u003d obj)   return true;\n  if (obj \u003d\u003d null)   return false;\n  if (getClass() !\u003d obj.getClass())   return false;\n  Poker other\u003d(Poker)obj;\n  if (level !\u003d other.level)   return false;\n  return type \u003d\u003d other.type;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Poker.java",
        "class": "Poker",
        "name": "toString",
        "return_type": "String",
        "modifiers": "@Override public",
        "parameters": [],
        "raw": "@Override public String toString(){\n  return level.getLevel() + \" \";\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Msg.java",
        "class": "Msg",
        "name": "getCode",
        "return_type": "String",
        "modifiers": "public",
        "parameters": [],
        "raw": "public String getCode(){\n  return code;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Msg.java",
        "class": "Msg",
        "name": "setCode",
        "return_type": "void",
        "modifiers": "public",
        "parameters": [
            {
                "type": "String",
                "name": "code"
            }
        ],
        "raw": "public void setCode(String code){\n  this.code\u003dcode;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Msg.java",
        "class": "Msg",
        "name": "getData",
        "return_type": "String",
        "modifiers": "public",
        "parameters": [],
        "raw": "public String getData(){\n  return data;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Msg.java",
        "class": "Msg",
        "name": "setData",
        "return_type": "void",
        "modifiers": "public",
        "parameters": [
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "public void setData(String data){\n  this.data\u003ddata;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Msg.java",
        "class": "Msg",
        "name": "getInfo",
        "return_type": "String",
        "modifiers": "public",
        "parameters": [],
        "raw": "public String getInfo(){\n  return info;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Msg.java",
        "class": "Msg",
        "name": "setInfo",
        "return_type": "void",
        "modifiers": "public",
        "parameters": [
            {
                "type": "String",
                "name": "info"
            }
        ],
        "raw": "public void setInfo(String info){\n  this.info\u003dinfo;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Room.java",
        "class": "Room",
        "name": "Room",
        "return_type": "void",
        "modifiers": "public",
        "parameters": [],
        "raw": "public Room(){\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Room.java",
        "class": "Room",
        "name": "Room",
        "return_type": "void",
        "modifiers": "public",
        "parameters": [
            {
                "type": "int",
                "name": "id"
            }
        ],
        "raw": "public Room(int id){\n  this.id\u003did;\n  this.clientSideMap\u003dnew ConcurrentSkipListMap\u003c\u003e();\n  this.clientSideList\u003dnew LinkedList\u003c\u003e();\n  this.status\u003dRoomStatus.WAIT;\n  this.createTime\u003dSystem.currentTimeMillis();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Room.java",
        "class": "Room",
        "name": "getScore",
        "return_type": "int",
        "modifiers": "public",
        "parameters": [],
        "raw": "public int getScore(){\n  return this.baseScore * this.scoreRate;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Room.java",
        "class": "Room",
        "name": "getBaseScore",
        "return_type": "int",
        "modifiers": "public",
        "parameters": [],
        "raw": "public int getBaseScore(){\n  return this.baseScore;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Room.java",
        "class": "Room",
        "name": "setBaseScore",
        "return_type": "void",
        "modifiers": "public",
        "parameters": [
            {
                "type": "int",
                "name": "baseScore"
            }
        ],
        "raw": "public void setBaseScore(int baseScore){\n  this.baseScore\u003dbaseScore;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Room.java",
        "class": "Room",
        "name": "getScoreRate",
        "return_type": "int",
        "modifiers": "public",
        "parameters": [],
        "raw": "public int getScoreRate(){\n  return this.scoreRate;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Room.java",
        "class": "Room",
        "name": "setScoreRate",
        "return_type": "void",
        "modifiers": "public",
        "parameters": [
            {
                "type": "int",
                "name": "scoreRate"
            }
        ],
        "raw": "public void setScoreRate(int scoreRate){\n  this.scoreRate\u003dscoreRate;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Room.java",
        "class": "Room",
        "name": "initScoreRate",
        "return_type": "void",
        "modifiers": "public",
        "parameters": [],
        "raw": "public void initScoreRate(){\n  this.scoreRate\u003d1;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Room.java",
        "class": "Room",
        "name": "increaseRate",
        "return_type": "void",
        "modifiers": "public",
        "parameters": [],
        "raw": "public void increaseRate(){\n  this.scoreRate*\u003d2;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Room.java",
        "class": "Room",
        "name": "getCreateTime",
        "return_type": "long",
        "modifiers": "public final",
        "parameters": [],
        "raw": "public final long getCreateTime(){\n  return createTime;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Room.java",
        "class": "Room",
        "name": "setCreateTime",
        "return_type": "void",
        "modifiers": "public final",
        "parameters": [
            {
                "type": "long",
                "name": "createTime"
            }
        ],
        "raw": "public final void setCreateTime(long createTime){\n  this.createTime\u003dcreateTime;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Room.java",
        "class": "Room",
        "name": "getDifficultyCoefficient",
        "return_type": "int",
        "modifiers": "public final",
        "parameters": [],
        "raw": "public final int getDifficultyCoefficient(){\n  return difficultyCoefficient;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Room.java",
        "class": "Room",
        "name": "setDifficultyCoefficient",
        "return_type": "void",
        "modifiers": "public final",
        "parameters": [
            {
                "type": "int",
                "name": "difficultyCoefficient"
            }
        ],
        "raw": "public final void setDifficultyCoefficient(int difficultyCoefficient){\n  this.difficultyCoefficient\u003ddifficultyCoefficient;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Room.java",
        "class": "Room",
        "name": "getType",
        "return_type": "RoomType",
        "modifiers": "public final",
        "parameters": [],
        "raw": "public final RoomType getType(){\n  return type;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Room.java",
        "class": "Room",
        "name": "setType",
        "return_type": "void",
        "modifiers": "public final",
        "parameters": [
            {
                "type": "RoomType",
                "name": "type"
            }
        ],
        "raw": "public final void setType(RoomType type){\n  this.type\u003dtype;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Room.java",
        "class": "Room",
        "name": "getLastPokerShell",
        "return_type": "PokerSell",
        "modifiers": "public final",
        "parameters": [],
        "raw": "public final PokerSell getLastPokerShell(){\n  return lastPokerShell;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Room.java",
        "class": "Room",
        "name": "setLastPokerShell",
        "return_type": "void",
        "modifiers": "public final",
        "parameters": [
            {
                "type": "PokerSell",
                "name": "lastPokerShell"
            }
        ],
        "raw": "public final void setLastPokerShell(PokerSell lastPokerShell){\n  this.lastPokerShell\u003dlastPokerShell;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Room.java",
        "class": "Room",
        "name": "getCurrentSellClient",
        "return_type": "int",
        "modifiers": "public final",
        "parameters": [],
        "raw": "public final int getCurrentSellClient(){\n  return currentSellClient;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Room.java",
        "class": "Room",
        "name": "setCurrentSellClient",
        "return_type": "void",
        "modifiers": "public final",
        "parameters": [
            {
                "type": "int",
                "name": "currentSellClient"
            }
        ],
        "raw": "public final void setCurrentSellClient(int currentSellClient){\n  this.currentSellClient\u003dcurrentSellClient;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Room.java",
        "class": "Room",
        "name": "getLastFlushTime",
        "return_type": "long",
        "modifiers": "public",
        "parameters": [],
        "raw": "public long getLastFlushTime(){\n  return lastFlushTime;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Room.java",
        "class": "Room",
        "name": "setLastFlushTime",
        "return_type": "void",
        "modifiers": "public",
        "parameters": [
            {
                "type": "long",
                "name": "lastFlushTime"
            }
        ],
        "raw": "public void setLastFlushTime(long lastFlushTime){\n  this.lastFlushTime\u003dlastFlushTime;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Room.java",
        "class": "Room",
        "name": "getLastSellClient",
        "return_type": "int",
        "modifiers": "public",
        "parameters": [],
        "raw": "public int getLastSellClient(){\n  return lastSellClient;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Room.java",
        "class": "Room",
        "name": "setLastSellClient",
        "return_type": "void",
        "modifiers": "public",
        "parameters": [
            {
                "type": "int",
                "name": "lastSellClient"
            }
        ],
        "raw": "public void setLastSellClient(int lastSellClient){\n  this.lastSellClient\u003dlastSellClient;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Room.java",
        "class": "Room",
        "name": "getLandlordId",
        "return_type": "int",
        "modifiers": "public",
        "parameters": [],
        "raw": "public int getLandlordId(){\n  return landlordId;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Room.java",
        "class": "Room",
        "name": "setLandlordId",
        "return_type": "void",
        "modifiers": "public",
        "parameters": [
            {
                "type": "int",
                "name": "landlordId"
            }
        ],
        "raw": "public void setLandlordId(int landlordId){\n  this.landlordId\u003dlandlordId;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Room.java",
        "class": "Room",
        "name": "getClientSideList",
        "return_type": "LinkedList\u003cClientSide\u003e",
        "modifiers": "public",
        "parameters": [],
        "raw": "public LinkedList\u003cClientSide\u003e getClientSideList(){\n  return clientSideList;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Room.java",
        "class": "Room",
        "name": "setClientSideList",
        "return_type": "void",
        "modifiers": "public",
        "parameters": [
            {
                "type": "LinkedList\u003cClientSide\u003e",
                "name": "clientSideList"
            }
        ],
        "raw": "public void setClientSideList(LinkedList\u003cClientSide\u003e clientSideList){\n  this.clientSideList\u003dclientSideList;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Room.java",
        "class": "Room",
        "name": "getLandlordPokers",
        "return_type": "List\u003cPoker\u003e",
        "modifiers": "public",
        "parameters": [],
        "raw": "public List\u003cPoker\u003e getLandlordPokers(){\n  return landlordPokers;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Room.java",
        "class": "Room",
        "name": "setLandlordPokers",
        "return_type": "void",
        "modifiers": "public",
        "parameters": [
            {
                "type": "List\u003cPoker\u003e",
                "name": "landlordPokers"
            }
        ],
        "raw": "public void setLandlordPokers(List\u003cPoker\u003e landlordPokers){\n  this.landlordPokers\u003dlandlordPokers;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Room.java",
        "class": "Room",
        "name": "getRoomOwner",
        "return_type": "String",
        "modifiers": "public final",
        "parameters": [],
        "raw": "public final String getRoomOwner(){\n  return roomOwner;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Room.java",
        "class": "Room",
        "name": "setRoomOwner",
        "return_type": "void",
        "modifiers": "public final",
        "parameters": [
            {
                "type": "String",
                "name": "roomOwner"
            }
        ],
        "raw": "public final void setRoomOwner(String roomOwner){\n  this.roomOwner\u003droomOwner;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Room.java",
        "class": "Room",
        "name": "getId",
        "return_type": "int",
        "modifiers": "public final",
        "parameters": [],
        "raw": "public final int getId(){\n  return id;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Room.java",
        "class": "Room",
        "name": "setId",
        "return_type": "void",
        "modifiers": "public final",
        "parameters": [
            {
                "type": "int",
                "name": "id"
            }
        ],
        "raw": "public final void setId(int id){\n  this.id\u003did;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Room.java",
        "class": "Room",
        "name": "getStatus",
        "return_type": "RoomStatus",
        "modifiers": "public final",
        "parameters": [],
        "raw": "public final RoomStatus getStatus(){\n  return status;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Room.java",
        "class": "Room",
        "name": "setStatus",
        "return_type": "void",
        "modifiers": "public final",
        "parameters": [
            {
                "type": "RoomStatus",
                "name": "status"
            }
        ],
        "raw": "public final void setStatus(RoomStatus status){\n  this.status\u003dstatus;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Room.java",
        "class": "Room",
        "name": "getClientSideMap",
        "return_type": "Map\u003cInteger,ClientSide\u003e",
        "modifiers": "public final",
        "parameters": [],
        "raw": "public final Map\u003cInteger,ClientSide\u003e getClientSideMap(){\n  return clientSideMap;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Room.java",
        "class": "Room",
        "name": "setClientSideMap",
        "return_type": "void",
        "modifiers": "public final",
        "parameters": [
            {
                "type": "Map\u003cInteger,ClientSide\u003e",
                "name": "clientSideMap"
            }
        ],
        "raw": "public final void setClientSideMap(Map\u003cInteger,ClientSide\u003e clientSideMap){\n  this.clientSideMap\u003dclientSideMap;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Room.java",
        "class": "Room",
        "name": "getFirstSellClient",
        "return_type": "int",
        "modifiers": "public",
        "parameters": [],
        "raw": "public int getFirstSellClient(){\n  return firstSellClient;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Room.java",
        "class": "Room",
        "name": "setFirstSellClient",
        "return_type": "void",
        "modifiers": "public",
        "parameters": [
            {
                "type": "int",
                "name": "firstSellClient"
            }
        ],
        "raw": "public void setFirstSellClient(int firstSellClient){\n  this.firstSellClient\u003dfirstSellClient;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/Room.java",
        "class": "Room",
        "name": "getWatcherList",
        "return_type": "List\u003cClientSide\u003e",
        "modifiers": "public",
        "parameters": [],
        "raw": "public List\u003cClientSide\u003e getWatcherList(){\n  return watcherList;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/PokerSell.java",
        "class": "PokerSell",
        "name": "PokerSell",
        "return_type": "void",
        "modifiers": "public",
        "parameters": [
            {
                "type": "SellType",
                "name": "sellType"
            },
            {
                "type": "List\u003cPoker\u003e",
                "name": "sellPokers"
            },
            {
                "type": "int",
                "name": "coreLevel"
            }
        ],
        "raw": "public PokerSell(SellType sellType,List\u003cPoker\u003e sellPokers,int coreLevel){\n  this.score\u003dPokerHelper.parseScore(sellType,coreLevel);\n  this.sellType\u003dsellType;\n  this.sellPokers\u003dsellPokers;\n  this.coreLevel\u003dcoreLevel;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/PokerSell.java",
        "class": "PokerSell",
        "name": "getCoreLevel",
        "return_type": "int",
        "modifiers": "public final",
        "parameters": [],
        "raw": "public final int getCoreLevel(){\n  return coreLevel;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/PokerSell.java",
        "class": "PokerSell",
        "name": "setCoreLevel",
        "return_type": "void",
        "modifiers": "public final",
        "parameters": [
            {
                "type": "int",
                "name": "coreLevel"
            }
        ],
        "raw": "public final void setCoreLevel(int coreLevel){\n  this.coreLevel\u003dcoreLevel;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/PokerSell.java",
        "class": "PokerSell",
        "name": "getScore",
        "return_type": "int",
        "modifiers": "public final",
        "parameters": [],
        "raw": "public final int getScore(){\n  return score;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/PokerSell.java",
        "class": "PokerSell",
        "name": "setScore",
        "return_type": "void",
        "modifiers": "public final",
        "parameters": [
            {
                "type": "int",
                "name": "score"
            }
        ],
        "raw": "public final void setScore(int score){\n  this.score\u003dscore;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/PokerSell.java",
        "class": "PokerSell",
        "name": "getSellType",
        "return_type": "SellType",
        "modifiers": "public final",
        "parameters": [],
        "raw": "public final SellType getSellType(){\n  return sellType;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/PokerSell.java",
        "class": "PokerSell",
        "name": "setSellType",
        "return_type": "void",
        "modifiers": "public final",
        "parameters": [
            {
                "type": "SellType",
                "name": "sellType"
            }
        ],
        "raw": "public final void setSellType(SellType sellType){\n  this.sellType\u003dsellType;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/PokerSell.java",
        "class": "PokerSell",
        "name": "getSellPokers",
        "return_type": "List\u003cPoker\u003e",
        "modifiers": "public final",
        "parameters": [],
        "raw": "public final List\u003cPoker\u003e getSellPokers(){\n  return sellPokers;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/PokerSell.java",
        "class": "PokerSell",
        "name": "setSellPokers",
        "return_type": "void",
        "modifiers": "public final",
        "parameters": [
            {
                "type": "List\u003cPoker\u003e",
                "name": "sellPokers"
            }
        ],
        "raw": "public final void setSellPokers(List\u003cPoker\u003e sellPokers){\n  this.sellPokers\u003dsellPokers;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/PokerSell.java",
        "class": "PokerSell",
        "name": "toString",
        "return_type": "String",
        "modifiers": "@Override public",
        "parameters": [],
        "raw": "@Override public String toString(){\n  return sellType + \"\\t| \" + score+ \"\\t|\"+ sellPokers;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "ServerTransferData",
        "name": "ServerTransferData",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [],
        "raw": "private ServerTransferData(){\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "ServerTransferData",
        "name": "registerAllExtensions",
        "return_type": "void",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "com.google.protobuf.ExtensionRegistryLite",
                "name": "registry"
            }
        ],
        "raw": "public static void registerAllExtensions(com.google.protobuf.ExtensionRegistryLite registry){\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "ServerTransferData",
        "name": "registerAllExtensions",
        "return_type": "void",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "com.google.protobuf.ExtensionRegistry",
                "name": "registry"
            }
        ],
        "raw": "public static void registerAllExtensions(com.google.protobuf.ExtensionRegistry registry){\n  registerAllExtensions((com.google.protobuf.ExtensionRegistryLite)registry);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "ServerTransferDataProtocOrBuilder",
        "name": "getCode",
        "return_type": "java.lang.String",
        "modifiers": "",
        "parameters": [],
        "raw": "/** \n * \u003ccode\u003estring code \u003d 1;\u003c/code\u003e\n */\njava.lang.String getCode();\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "ServerTransferDataProtocOrBuilder",
        "name": "getCodeBytes",
        "return_type": "com.google.protobuf.ByteString",
        "modifiers": "",
        "parameters": [],
        "raw": "/** \n * \u003ccode\u003estring code \u003d 1;\u003c/code\u003e\n */\ncom.google.protobuf.ByteString getCodeBytes();\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "ServerTransferDataProtocOrBuilder",
        "name": "getData",
        "return_type": "java.lang.String",
        "modifiers": "",
        "parameters": [],
        "raw": "/** \n * \u003ccode\u003estring data \u003d 2;\u003c/code\u003e\n */\njava.lang.String getData();\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "ServerTransferDataProtocOrBuilder",
        "name": "getDataBytes",
        "return_type": "com.google.protobuf.ByteString",
        "modifiers": "",
        "parameters": [],
        "raw": "/** \n * \u003ccode\u003estring data \u003d 2;\u003c/code\u003e\n */\ncom.google.protobuf.ByteString getDataBytes();\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "ServerTransferDataProtocOrBuilder",
        "name": "getInfo",
        "return_type": "java.lang.String",
        "modifiers": "",
        "parameters": [],
        "raw": "/** \n * \u003ccode\u003estring info \u003d 3;\u003c/code\u003e\n */\njava.lang.String getInfo();\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "ServerTransferDataProtocOrBuilder",
        "name": "getInfoBytes",
        "return_type": "com.google.protobuf.ByteString",
        "modifiers": "",
        "parameters": [],
        "raw": "/** \n * \u003ccode\u003estring info \u003d 3;\u003c/code\u003e\n */\ncom.google.protobuf.ByteString getInfoBytes();\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "ServerTransferDataProtoc",
        "name": "ServerTransferDataProtoc",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [
            {
                "type": "com.google.protobuf.GeneratedMessageV3.Builder\u003c?\u003e",
                "name": "builder"
            }
        ],
        "raw": "private ServerTransferDataProtoc(com.google.protobuf.GeneratedMessageV3.Builder\u003c?\u003e builder){\n  super(builder);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "ServerTransferDataProtoc",
        "name": "ServerTransferDataProtoc",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [],
        "raw": "private ServerTransferDataProtoc(){\n  code_\u003d\"\";\n  data_\u003d\"\";\n  info_\u003d\"\";\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "ServerTransferDataProtoc",
        "name": "getUnknownFields",
        "return_type": "com.google.protobuf.UnknownFieldSet",
        "modifiers": "@java.lang.Override public final",
        "parameters": [],
        "raw": "@java.lang.Override public final com.google.protobuf.UnknownFieldSet getUnknownFields(){\n  return this.unknownFields;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "ServerTransferDataProtoc",
        "name": "ServerTransferDataProtoc",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [
            {
                "type": "com.google.protobuf.CodedInputStream",
                "name": "input"
            },
            {
                "type": "com.google.protobuf.ExtensionRegistryLite",
                "name": "extensionRegistry"
            }
        ],
        "raw": "private ServerTransferDataProtoc(com.google.protobuf.CodedInputStream input,com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {\n  this();\n  if (extensionRegistry \u003d\u003d null) {\n    throw new java.lang.NullPointerException();\n  }\n  int mutable_bitField0_\u003d0;\n  com.google.protobuf.UnknownFieldSet.Builder unknownFields\u003dcom.google.protobuf.UnknownFieldSet.newBuilder();\n  try {\n    boolean done\u003dfalse;\n    while (!done) {\n      int tag\u003dinput.readTag();\nswitch (tag) {\ncase 0:\n        done\u003dtrue;\n      break;\ncase 10:\n{\n      java.lang.String s\u003dinput.readStringRequireUtf8();\n      code_\u003ds;\n      break;\n    }\ncase 18:\n{\n    java.lang.String s\u003dinput.readStringRequireUtf8();\n    data_\u003ds;\n    break;\n  }\ncase 26:\n{\n  java.lang.String s\u003dinput.readStringRequireUtf8();\n  info_\u003ds;\n  break;\n}\ndefault :\n{\nif (!parseUnknownFieldProto3(input,unknownFields,extensionRegistry,tag)) {\n  done\u003dtrue;\n}\nbreak;\n}\n}\n}\n}\n catch (com.google.protobuf.InvalidProtocolBufferException e) {\nthrow e.setUnfinishedMessage(this);\n}\ncatch (java.io.IOException e) {\nthrow new com.google.protobuf.InvalidProtocolBufferException(e).setUnfinishedMessage(this);\n}\n finally {\nthis.unknownFields\u003dunknownFields.build();\nmakeExtensionsImmutable();\n}\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "ServerTransferDataProtoc",
        "name": "getDescriptor",
        "return_type": "com.google.protobuf.Descriptors.Descriptor",
        "modifiers": "public static final",
        "parameters": [],
        "raw": "public static final com.google.protobuf.Descriptors.Descriptor getDescriptor(){\n  return org.nico.ratel.landlords.entity.ServerTransferData.internal_static_org_nico_ratel_landlords_entity_ServerTransferDataProtoc_descriptor;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "ServerTransferDataProtoc",
        "name": "internalGetFieldAccessorTable",
        "return_type": "com.google.protobuf.GeneratedMessageV3.FieldAccessorTable",
        "modifiers": "@java.lang.Override protected",
        "parameters": [],
        "raw": "@java.lang.Override protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable(){\n  return org.nico.ratel.landlords.entity.ServerTransferData.internal_static_org_nico_ratel_landlords_entity_ServerTransferDataProtoc_fieldAccessorTable.ensureFieldAccessorsInitialized(org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc.class,org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc.Builder.class);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "ServerTransferDataProtoc",
        "name": "getCode",
        "return_type": "java.lang.String",
        "modifiers": "public",
        "parameters": [],
        "raw": "/** \n * \u003ccode\u003estring code \u003d 1;\u003c/code\u003e\n */\npublic java.lang.String getCode(){\n  java.lang.Object ref\u003dcode_;\n  if (ref instanceof java.lang.String) {\n    return (java.lang.String)ref;\n  }\n else {\n    com.google.protobuf.ByteString bs\u003d(com.google.protobuf.ByteString)ref;\n    java.lang.String s\u003dbs.toStringUtf8();\n    code_\u003ds;\n    return s;\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "ServerTransferDataProtoc",
        "name": "getCodeBytes",
        "return_type": "com.google.protobuf.ByteString",
        "modifiers": "public",
        "parameters": [],
        "raw": "/** \n * \u003ccode\u003estring code \u003d 1;\u003c/code\u003e\n */\npublic com.google.protobuf.ByteString getCodeBytes(){\n  java.lang.Object ref\u003dcode_;\n  if (ref instanceof java.lang.String) {\n    com.google.protobuf.ByteString b\u003dcom.google.protobuf.ByteString.copyFromUtf8((java.lang.String)ref);\n    code_\u003db;\n    return b;\n  }\n else {\n    return (com.google.protobuf.ByteString)ref;\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "ServerTransferDataProtoc",
        "name": "getData",
        "return_type": "java.lang.String",
        "modifiers": "public",
        "parameters": [],
        "raw": "/** \n * \u003ccode\u003estring data \u003d 2;\u003c/code\u003e\n */\npublic java.lang.String getData(){\n  java.lang.Object ref\u003ddata_;\n  if (ref instanceof java.lang.String) {\n    return (java.lang.String)ref;\n  }\n else {\n    com.google.protobuf.ByteString bs\u003d(com.google.protobuf.ByteString)ref;\n    java.lang.String s\u003dbs.toStringUtf8();\n    data_\u003ds;\n    return s;\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "ServerTransferDataProtoc",
        "name": "getDataBytes",
        "return_type": "com.google.protobuf.ByteString",
        "modifiers": "public",
        "parameters": [],
        "raw": "/** \n * \u003ccode\u003estring data \u003d 2;\u003c/code\u003e\n */\npublic com.google.protobuf.ByteString getDataBytes(){\n  java.lang.Object ref\u003ddata_;\n  if (ref instanceof java.lang.String) {\n    com.google.protobuf.ByteString b\u003dcom.google.protobuf.ByteString.copyFromUtf8((java.lang.String)ref);\n    data_\u003db;\n    return b;\n  }\n else {\n    return (com.google.protobuf.ByteString)ref;\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "ServerTransferDataProtoc",
        "name": "getInfo",
        "return_type": "java.lang.String",
        "modifiers": "public",
        "parameters": [],
        "raw": "/** \n * \u003ccode\u003estring info \u003d 3;\u003c/code\u003e\n */\npublic java.lang.String getInfo(){\n  java.lang.Object ref\u003dinfo_;\n  if (ref instanceof java.lang.String) {\n    return (java.lang.String)ref;\n  }\n else {\n    com.google.protobuf.ByteString bs\u003d(com.google.protobuf.ByteString)ref;\n    java.lang.String s\u003dbs.toStringUtf8();\n    info_\u003ds;\n    return s;\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "ServerTransferDataProtoc",
        "name": "getInfoBytes",
        "return_type": "com.google.protobuf.ByteString",
        "modifiers": "public",
        "parameters": [],
        "raw": "/** \n * \u003ccode\u003estring info \u003d 3;\u003c/code\u003e\n */\npublic com.google.protobuf.ByteString getInfoBytes(){\n  java.lang.Object ref\u003dinfo_;\n  if (ref instanceof java.lang.String) {\n    com.google.protobuf.ByteString b\u003dcom.google.protobuf.ByteString.copyFromUtf8((java.lang.String)ref);\n    info_\u003db;\n    return b;\n  }\n else {\n    return (com.google.protobuf.ByteString)ref;\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "ServerTransferDataProtoc",
        "name": "isInitialized",
        "return_type": "boolean",
        "modifiers": "@java.lang.Override public final",
        "parameters": [],
        "raw": "@java.lang.Override public final boolean isInitialized(){\n  byte isInitialized\u003dmemoizedIsInitialized;\n  if (isInitialized \u003d\u003d 1)   return true;\n  if (isInitialized \u003d\u003d 0)   return false;\n  memoizedIsInitialized\u003d1;\n  return true;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "ServerTransferDataProtoc",
        "name": "writeTo",
        "return_type": "void",
        "modifiers": "@java.lang.Override public",
        "parameters": [
            {
                "type": "com.google.protobuf.CodedOutputStream",
                "name": "output"
            }
        ],
        "raw": "@java.lang.Override public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {\n  if (!getCodeBytes().isEmpty()) {\n    com.google.protobuf.GeneratedMessageV3.writeString(output,1,code_);\n  }\n  if (!getDataBytes().isEmpty()) {\n    com.google.protobuf.GeneratedMessageV3.writeString(output,2,data_);\n  }\n  if (!getInfoBytes().isEmpty()) {\n    com.google.protobuf.GeneratedMessageV3.writeString(output,3,info_);\n  }\n  unknownFields.writeTo(output);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "ServerTransferDataProtoc",
        "name": "getSerializedSize",
        "return_type": "int",
        "modifiers": "@java.lang.Override public",
        "parameters": [],
        "raw": "@java.lang.Override public int getSerializedSize(){\n  int size\u003dmemoizedSize;\n  if (size !\u003d -1)   return size;\n  size\u003d0;\n  if (!getCodeBytes().isEmpty()) {\n    size+\u003dcom.google.protobuf.GeneratedMessageV3.computeStringSize(1,code_);\n  }\n  if (!getDataBytes().isEmpty()) {\n    size+\u003dcom.google.protobuf.GeneratedMessageV3.computeStringSize(2,data_);\n  }\n  if (!getInfoBytes().isEmpty()) {\n    size+\u003dcom.google.protobuf.GeneratedMessageV3.computeStringSize(3,info_);\n  }\n  size+\u003dunknownFields.getSerializedSize();\n  memoizedSize\u003dsize;\n  return size;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "ServerTransferDataProtoc",
        "name": "equals",
        "return_type": "boolean",
        "modifiers": "@java.lang.Override public",
        "parameters": [
            {
                "type": "java.lang.Object",
                "name": "obj"
            }
        ],
        "raw": "@java.lang.Override public boolean equals(final java.lang.Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc)) {\n    return super.equals(obj);\n  }\n  org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc other\u003d(org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc)obj;\n  boolean result\u003dtrue;\n  result\u003dresult \u0026\u0026 getCode().equals(other.getCode());\n  result\u003dresult \u0026\u0026 getData().equals(other.getData());\n  result\u003dresult \u0026\u0026 getInfo().equals(other.getInfo());\n  result\u003dresult \u0026\u0026 unknownFields.equals(other.unknownFields);\n  return result;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "ServerTransferDataProtoc",
        "name": "hashCode",
        "return_type": "int",
        "modifiers": "@java.lang.Override public",
        "parameters": [],
        "raw": "@java.lang.Override public int hashCode(){\n  if (memoizedHashCode !\u003d 0) {\n    return memoizedHashCode;\n  }\n  int hash\u003d41;\n  hash\u003d(19 * hash) + getDescriptor().hashCode();\n  hash\u003d(37 * hash) + CODE_FIELD_NUMBER;\n  hash\u003d(53 * hash) + getCode().hashCode();\n  hash\u003d(37 * hash) + DATA_FIELD_NUMBER;\n  hash\u003d(53 * hash) + getData().hashCode();\n  hash\u003d(37 * hash) + INFO_FIELD_NUMBER;\n  hash\u003d(53 * hash) + getInfo().hashCode();\n  hash\u003d(29 * hash) + unknownFields.hashCode();\n  memoizedHashCode\u003dhash;\n  return hash;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "ServerTransferDataProtoc",
        "name": "parseFrom",
        "return_type": "org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "java.nio.ByteBuffer",
                "name": "data"
            }
        ],
        "raw": "public static org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc parseFrom(java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {\n  return PARSER.parseFrom(data);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "ServerTransferDataProtoc",
        "name": "parseFrom",
        "return_type": "org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "java.nio.ByteBuffer",
                "name": "data"
            },
            {
                "type": "com.google.protobuf.ExtensionRegistryLite",
                "name": "extensionRegistry"
            }
        ],
        "raw": "public static org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc parseFrom(java.nio.ByteBuffer data,com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {\n  return PARSER.parseFrom(data,extensionRegistry);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "ServerTransferDataProtoc",
        "name": "parseFrom",
        "return_type": "org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "com.google.protobuf.ByteString",
                "name": "data"
            }
        ],
        "raw": "public static org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc parseFrom(com.google.protobuf.ByteString data) throws com.google.protobuf.InvalidProtocolBufferException {\n  return PARSER.parseFrom(data);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "ServerTransferDataProtoc",
        "name": "parseFrom",
        "return_type": "org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "com.google.protobuf.ByteString",
                "name": "data"
            },
            {
                "type": "com.google.protobuf.ExtensionRegistryLite",
                "name": "extensionRegistry"
            }
        ],
        "raw": "public static org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc parseFrom(com.google.protobuf.ByteString data,com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {\n  return PARSER.parseFrom(data,extensionRegistry);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "ServerTransferDataProtoc",
        "name": "parseFrom",
        "return_type": "org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "byte[]",
                "name": "data"
            }
        ],
        "raw": "public static org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc parseFrom(byte[] data) throws com.google.protobuf.InvalidProtocolBufferException {\n  return PARSER.parseFrom(data);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "ServerTransferDataProtoc",
        "name": "parseFrom",
        "return_type": "org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "byte[]",
                "name": "data"
            },
            {
                "type": "com.google.protobuf.ExtensionRegistryLite",
                "name": "extensionRegistry"
            }
        ],
        "raw": "public static org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc parseFrom(byte[] data,com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {\n  return PARSER.parseFrom(data,extensionRegistry);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "ServerTransferDataProtoc",
        "name": "parseFrom",
        "return_type": "org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "java.io.InputStream",
                "name": "input"
            }
        ],
        "raw": "public static org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc parseFrom(java.io.InputStream input) throws java.io.IOException {\n  return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER,input);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "ServerTransferDataProtoc",
        "name": "parseFrom",
        "return_type": "org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "java.io.InputStream",
                "name": "input"
            },
            {
                "type": "com.google.protobuf.ExtensionRegistryLite",
                "name": "extensionRegistry"
            }
        ],
        "raw": "public static org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc parseFrom(java.io.InputStream input,com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {\n  return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER,input,extensionRegistry);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "ServerTransferDataProtoc",
        "name": "parseDelimitedFrom",
        "return_type": "org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "java.io.InputStream",
                "name": "input"
            }
        ],
        "raw": "public static org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {\n  return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER,input);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "ServerTransferDataProtoc",
        "name": "parseDelimitedFrom",
        "return_type": "org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "java.io.InputStream",
                "name": "input"
            },
            {
                "type": "com.google.protobuf.ExtensionRegistryLite",
                "name": "extensionRegistry"
            }
        ],
        "raw": "public static org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc parseDelimitedFrom(java.io.InputStream input,com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {\n  return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER,input,extensionRegistry);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "ServerTransferDataProtoc",
        "name": "parseFrom",
        "return_type": "org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "com.google.protobuf.CodedInputStream",
                "name": "input"
            }
        ],
        "raw": "public static org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc parseFrom(com.google.protobuf.CodedInputStream input) throws java.io.IOException {\n  return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER,input);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "ServerTransferDataProtoc",
        "name": "parseFrom",
        "return_type": "org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "com.google.protobuf.CodedInputStream",
                "name": "input"
            },
            {
                "type": "com.google.protobuf.ExtensionRegistryLite",
                "name": "extensionRegistry"
            }
        ],
        "raw": "public static org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc parseFrom(com.google.protobuf.CodedInputStream input,com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {\n  return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER,input,extensionRegistry);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "ServerTransferDataProtoc",
        "name": "newBuilderForType",
        "return_type": "Builder",
        "modifiers": "@java.lang.Override public",
        "parameters": [],
        "raw": "@java.lang.Override public Builder newBuilderForType(){\n  return newBuilder();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "ServerTransferDataProtoc",
        "name": "newBuilder",
        "return_type": "Builder",
        "modifiers": "public static",
        "parameters": [],
        "raw": "public static Builder newBuilder(){\n  return DEFAULT_INSTANCE.toBuilder();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "ServerTransferDataProtoc",
        "name": "newBuilder",
        "return_type": "Builder",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc",
                "name": "prototype"
            }
        ],
        "raw": "public static Builder newBuilder(org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc prototype){\n  return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "ServerTransferDataProtoc",
        "name": "toBuilder",
        "return_type": "Builder",
        "modifiers": "@java.lang.Override public",
        "parameters": [],
        "raw": "@java.lang.Override public Builder toBuilder(){\n  return this \u003d\u003d DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "ServerTransferDataProtoc",
        "name": "newBuilderForType",
        "return_type": "Builder",
        "modifiers": "@java.lang.Override protected",
        "parameters": [
            {
                "type": "com.google.protobuf.GeneratedMessageV3.BuilderParent",
                "name": "parent"
            }
        ],
        "raw": "@java.lang.Override protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent){\n  Builder builder\u003dnew Builder(parent);\n  return builder;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "Builder",
        "name": "getDescriptor",
        "return_type": "com.google.protobuf.Descriptors.Descriptor",
        "modifiers": "public static final",
        "parameters": [],
        "raw": "public static final com.google.protobuf.Descriptors.Descriptor getDescriptor(){\n  return org.nico.ratel.landlords.entity.ServerTransferData.internal_static_org_nico_ratel_landlords_entity_ServerTransferDataProtoc_descriptor;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "Builder",
        "name": "internalGetFieldAccessorTable",
        "return_type": "com.google.protobuf.GeneratedMessageV3.FieldAccessorTable",
        "modifiers": "@java.lang.Override protected",
        "parameters": [],
        "raw": "@java.lang.Override protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable(){\n  return org.nico.ratel.landlords.entity.ServerTransferData.internal_static_org_nico_ratel_landlords_entity_ServerTransferDataProtoc_fieldAccessorTable.ensureFieldAccessorsInitialized(org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc.class,org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc.Builder.class);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "Builder",
        "name": "Builder",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [],
        "raw": "private Builder(){\n  maybeForceBuilderInitialization();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "Builder",
        "name": "Builder",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [
            {
                "type": "com.google.protobuf.GeneratedMessageV3.BuilderParent",
                "name": "parent"
            }
        ],
        "raw": "private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent){\n  super(parent);\n  maybeForceBuilderInitialization();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "Builder",
        "name": "maybeForceBuilderInitialization",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [],
        "raw": "private void maybeForceBuilderInitialization(){\n  if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "Builder",
        "name": "clear",
        "return_type": "Builder",
        "modifiers": "@java.lang.Override public",
        "parameters": [],
        "raw": "@java.lang.Override public Builder clear(){\n  super.clear();\n  code_\u003d\"\";\n  data_\u003d\"\";\n  info_\u003d\"\";\n  return this;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "Builder",
        "name": "getDescriptorForType",
        "return_type": "com.google.protobuf.Descriptors.Descriptor",
        "modifiers": "@java.lang.Override public",
        "parameters": [],
        "raw": "@java.lang.Override public com.google.protobuf.Descriptors.Descriptor getDescriptorForType(){\n  return org.nico.ratel.landlords.entity.ServerTransferData.internal_static_org_nico_ratel_landlords_entity_ServerTransferDataProtoc_descriptor;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "Builder",
        "name": "getDefaultInstanceForType",
        "return_type": "org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc",
        "modifiers": "@java.lang.Override public",
        "parameters": [],
        "raw": "@java.lang.Override public org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc getDefaultInstanceForType(){\n  return org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc.getDefaultInstance();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "Builder",
        "name": "build",
        "return_type": "org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc",
        "modifiers": "@java.lang.Override public",
        "parameters": [],
        "raw": "@java.lang.Override public org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc build(){\n  org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc result\u003dbuildPartial();\n  if (!result.isInitialized()) {\n    throw newUninitializedMessageException(result);\n  }\n  return result;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "Builder",
        "name": "buildPartial",
        "return_type": "org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc",
        "modifiers": "@java.lang.Override public",
        "parameters": [],
        "raw": "@java.lang.Override public org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc buildPartial(){\n  org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc result\u003dnew org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc(this);\n  result.code_\u003dcode_;\n  result.data_\u003ddata_;\n  result.info_\u003dinfo_;\n  onBuilt();\n  return result;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "Builder",
        "name": "clone",
        "return_type": "Builder",
        "modifiers": "@java.lang.Override public",
        "parameters": [],
        "raw": "@java.lang.Override public Builder clone(){\n  return (Builder)super.clone();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "Builder",
        "name": "setField",
        "return_type": "Builder",
        "modifiers": "@java.lang.Override public",
        "parameters": [
            {
                "type": "com.google.protobuf.Descriptors.FieldDescriptor",
                "name": "field"
            },
            {
                "type": "java.lang.Object",
                "name": "value"
            }
        ],
        "raw": "@java.lang.Override public Builder setField(com.google.protobuf.Descriptors.FieldDescriptor field,java.lang.Object value){\n  return (Builder)super.setField(field,value);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "Builder",
        "name": "clearField",
        "return_type": "Builder",
        "modifiers": "@java.lang.Override public",
        "parameters": [
            {
                "type": "com.google.protobuf.Descriptors.FieldDescriptor",
                "name": "field"
            }
        ],
        "raw": "@java.lang.Override public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field){\n  return (Builder)super.clearField(field);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "Builder",
        "name": "clearOneof",
        "return_type": "Builder",
        "modifiers": "@java.lang.Override public",
        "parameters": [
            {
                "type": "com.google.protobuf.Descriptors.OneofDescriptor",
                "name": "oneof"
            }
        ],
        "raw": "@java.lang.Override public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof){\n  return (Builder)super.clearOneof(oneof);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "Builder",
        "name": "setRepeatedField",
        "return_type": "Builder",
        "modifiers": "@java.lang.Override public",
        "parameters": [
            {
                "type": "com.google.protobuf.Descriptors.FieldDescriptor",
                "name": "field"
            },
            {
                "type": "int",
                "name": "index"
            },
            {
                "type": "java.lang.Object",
                "name": "value"
            }
        ],
        "raw": "@java.lang.Override public Builder setRepeatedField(com.google.protobuf.Descriptors.FieldDescriptor field,int index,java.lang.Object value){\n  return (Builder)super.setRepeatedField(field,index,value);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "Builder",
        "name": "addRepeatedField",
        "return_type": "Builder",
        "modifiers": "@java.lang.Override public",
        "parameters": [
            {
                "type": "com.google.protobuf.Descriptors.FieldDescriptor",
                "name": "field"
            },
            {
                "type": "java.lang.Object",
                "name": "value"
            }
        ],
        "raw": "@java.lang.Override public Builder addRepeatedField(com.google.protobuf.Descriptors.FieldDescriptor field,java.lang.Object value){\n  return (Builder)super.addRepeatedField(field,value);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "Builder",
        "name": "mergeFrom",
        "return_type": "Builder",
        "modifiers": "@java.lang.Override public",
        "parameters": [
            {
                "type": "com.google.protobuf.Message",
                "name": "other"
            }
        ],
        "raw": "@java.lang.Override public Builder mergeFrom(com.google.protobuf.Message other){\n  if (other instanceof org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc) {\n    return mergeFrom((org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc)other);\n  }\n else {\n    super.mergeFrom(other);\n    return this;\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "Builder",
        "name": "mergeFrom",
        "return_type": "Builder",
        "modifiers": "public",
        "parameters": [
            {
                "type": "org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc",
                "name": "other"
            }
        ],
        "raw": "public Builder mergeFrom(org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc other){\n  if (other \u003d\u003d org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc.getDefaultInstance())   return this;\n  if (!other.getCode().isEmpty()) {\n    code_\u003dother.code_;\n    onChanged();\n  }\n  if (!other.getData().isEmpty()) {\n    data_\u003dother.data_;\n    onChanged();\n  }\n  if (!other.getInfo().isEmpty()) {\n    info_\u003dother.info_;\n    onChanged();\n  }\n  this.mergeUnknownFields(other.unknownFields);\n  onChanged();\n  return this;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "Builder",
        "name": "isInitialized",
        "return_type": "boolean",
        "modifiers": "@java.lang.Override public final",
        "parameters": [],
        "raw": "@java.lang.Override public final boolean isInitialized(){\n  return true;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "Builder",
        "name": "mergeFrom",
        "return_type": "Builder",
        "modifiers": "@java.lang.Override public",
        "parameters": [
            {
                "type": "com.google.protobuf.CodedInputStream",
                "name": "input"
            },
            {
                "type": "com.google.protobuf.ExtensionRegistryLite",
                "name": "extensionRegistry"
            }
        ],
        "raw": "@java.lang.Override public Builder mergeFrom(com.google.protobuf.CodedInputStream input,com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {\n  org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc parsedMessage\u003dnull;\n  try {\n    parsedMessage\u003dPARSER.parsePartialFrom(input,extensionRegistry);\n  }\n catch (  com.google.protobuf.InvalidProtocolBufferException e) {\n    parsedMessage\u003d(org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc)e.getUnfinishedMessage();\n    throw e.unwrapIOException();\n  }\n finally {\n    if (parsedMessage !\u003d null) {\n      mergeFrom(parsedMessage);\n    }\n  }\n  return this;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "Builder",
        "name": "getCode",
        "return_type": "java.lang.String",
        "modifiers": "public",
        "parameters": [],
        "raw": "/** \n * \u003ccode\u003estring code \u003d 1;\u003c/code\u003e\n */\npublic java.lang.String getCode(){\n  java.lang.Object ref\u003dcode_;\n  if (!(ref instanceof java.lang.String)) {\n    com.google.protobuf.ByteString bs\u003d(com.google.protobuf.ByteString)ref;\n    java.lang.String s\u003dbs.toStringUtf8();\n    code_\u003ds;\n    return s;\n  }\n else {\n    return (java.lang.String)ref;\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "Builder",
        "name": "getCodeBytes",
        "return_type": "com.google.protobuf.ByteString",
        "modifiers": "public",
        "parameters": [],
        "raw": "/** \n * \u003ccode\u003estring code \u003d 1;\u003c/code\u003e\n */\npublic com.google.protobuf.ByteString getCodeBytes(){\n  java.lang.Object ref\u003dcode_;\n  if (ref instanceof String) {\n    com.google.protobuf.ByteString b\u003dcom.google.protobuf.ByteString.copyFromUtf8((java.lang.String)ref);\n    code_\u003db;\n    return b;\n  }\n else {\n    return (com.google.protobuf.ByteString)ref;\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "Builder",
        "name": "setCode",
        "return_type": "Builder",
        "modifiers": "public",
        "parameters": [
            {
                "type": "java.lang.String",
                "name": "value"
            }
        ],
        "raw": "/** \n * \u003ccode\u003estring code \u003d 1;\u003c/code\u003e\n */\npublic Builder setCode(java.lang.String value){\n  if (value \u003d\u003d null) {\n    throw new NullPointerException();\n  }\n  code_\u003dvalue;\n  onChanged();\n  return this;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "Builder",
        "name": "clearCode",
        "return_type": "Builder",
        "modifiers": "public",
        "parameters": [],
        "raw": "/** \n * \u003ccode\u003estring code \u003d 1;\u003c/code\u003e\n */\npublic Builder clearCode(){\n  code_\u003dgetDefaultInstance().getCode();\n  onChanged();\n  return this;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "Builder",
        "name": "setCodeBytes",
        "return_type": "Builder",
        "modifiers": "public",
        "parameters": [
            {
                "type": "com.google.protobuf.ByteString",
                "name": "value"
            }
        ],
        "raw": "/** \n * \u003ccode\u003estring code \u003d 1;\u003c/code\u003e\n */\npublic Builder setCodeBytes(com.google.protobuf.ByteString value){\n  if (value \u003d\u003d null) {\n    throw new NullPointerException();\n  }\n  checkByteStringIsUtf8(value);\n  code_\u003dvalue;\n  onChanged();\n  return this;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "Builder",
        "name": "getData",
        "return_type": "java.lang.String",
        "modifiers": "public",
        "parameters": [],
        "raw": "/** \n * \u003ccode\u003estring data \u003d 2;\u003c/code\u003e\n */\npublic java.lang.String getData(){\n  java.lang.Object ref\u003ddata_;\n  if (!(ref instanceof java.lang.String)) {\n    com.google.protobuf.ByteString bs\u003d(com.google.protobuf.ByteString)ref;\n    java.lang.String s\u003dbs.toStringUtf8();\n    data_\u003ds;\n    return s;\n  }\n else {\n    return (java.lang.String)ref;\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "Builder",
        "name": "getDataBytes",
        "return_type": "com.google.protobuf.ByteString",
        "modifiers": "public",
        "parameters": [],
        "raw": "/** \n * \u003ccode\u003estring data \u003d 2;\u003c/code\u003e\n */\npublic com.google.protobuf.ByteString getDataBytes(){\n  java.lang.Object ref\u003ddata_;\n  if (ref instanceof String) {\n    com.google.protobuf.ByteString b\u003dcom.google.protobuf.ByteString.copyFromUtf8((java.lang.String)ref);\n    data_\u003db;\n    return b;\n  }\n else {\n    return (com.google.protobuf.ByteString)ref;\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "Builder",
        "name": "setData",
        "return_type": "Builder",
        "modifiers": "public",
        "parameters": [
            {
                "type": "java.lang.String",
                "name": "value"
            }
        ],
        "raw": "/** \n * \u003ccode\u003estring data \u003d 2;\u003c/code\u003e\n */\npublic Builder setData(java.lang.String value){\n  if (value \u003d\u003d null) {\n    throw new NullPointerException();\n  }\n  data_\u003dvalue;\n  onChanged();\n  return this;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "Builder",
        "name": "clearData",
        "return_type": "Builder",
        "modifiers": "public",
        "parameters": [],
        "raw": "/** \n * \u003ccode\u003estring data \u003d 2;\u003c/code\u003e\n */\npublic Builder clearData(){\n  data_\u003dgetDefaultInstance().getData();\n  onChanged();\n  return this;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "Builder",
        "name": "setDataBytes",
        "return_type": "Builder",
        "modifiers": "public",
        "parameters": [
            {
                "type": "com.google.protobuf.ByteString",
                "name": "value"
            }
        ],
        "raw": "/** \n * \u003ccode\u003estring data \u003d 2;\u003c/code\u003e\n */\npublic Builder setDataBytes(com.google.protobuf.ByteString value){\n  if (value \u003d\u003d null) {\n    throw new NullPointerException();\n  }\n  checkByteStringIsUtf8(value);\n  data_\u003dvalue;\n  onChanged();\n  return this;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "Builder",
        "name": "getInfo",
        "return_type": "java.lang.String",
        "modifiers": "public",
        "parameters": [],
        "raw": "/** \n * \u003ccode\u003estring info \u003d 3;\u003c/code\u003e\n */\npublic java.lang.String getInfo(){\n  java.lang.Object ref\u003dinfo_;\n  if (!(ref instanceof java.lang.String)) {\n    com.google.protobuf.ByteString bs\u003d(com.google.protobuf.ByteString)ref;\n    java.lang.String s\u003dbs.toStringUtf8();\n    info_\u003ds;\n    return s;\n  }\n else {\n    return (java.lang.String)ref;\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "Builder",
        "name": "getInfoBytes",
        "return_type": "com.google.protobuf.ByteString",
        "modifiers": "public",
        "parameters": [],
        "raw": "/** \n * \u003ccode\u003estring info \u003d 3;\u003c/code\u003e\n */\npublic com.google.protobuf.ByteString getInfoBytes(){\n  java.lang.Object ref\u003dinfo_;\n  if (ref instanceof String) {\n    com.google.protobuf.ByteString b\u003dcom.google.protobuf.ByteString.copyFromUtf8((java.lang.String)ref);\n    info_\u003db;\n    return b;\n  }\n else {\n    return (com.google.protobuf.ByteString)ref;\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "Builder",
        "name": "setInfo",
        "return_type": "Builder",
        "modifiers": "public",
        "parameters": [
            {
                "type": "java.lang.String",
                "name": "value"
            }
        ],
        "raw": "/** \n * \u003ccode\u003estring info \u003d 3;\u003c/code\u003e\n */\npublic Builder setInfo(java.lang.String value){\n  if (value \u003d\u003d null) {\n    throw new NullPointerException();\n  }\n  info_\u003dvalue;\n  onChanged();\n  return this;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "Builder",
        "name": "clearInfo",
        "return_type": "Builder",
        "modifiers": "public",
        "parameters": [],
        "raw": "/** \n * \u003ccode\u003estring info \u003d 3;\u003c/code\u003e\n */\npublic Builder clearInfo(){\n  info_\u003dgetDefaultInstance().getInfo();\n  onChanged();\n  return this;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "Builder",
        "name": "setInfoBytes",
        "return_type": "Builder",
        "modifiers": "public",
        "parameters": [
            {
                "type": "com.google.protobuf.ByteString",
                "name": "value"
            }
        ],
        "raw": "/** \n * \u003ccode\u003estring info \u003d 3;\u003c/code\u003e\n */\npublic Builder setInfoBytes(com.google.protobuf.ByteString value){\n  if (value \u003d\u003d null) {\n    throw new NullPointerException();\n  }\n  checkByteStringIsUtf8(value);\n  info_\u003dvalue;\n  onChanged();\n  return this;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "Builder",
        "name": "setUnknownFields",
        "return_type": "Builder",
        "modifiers": "@java.lang.Override public final",
        "parameters": [
            {
                "type": "com.google.protobuf.UnknownFieldSet",
                "name": "unknownFields"
            }
        ],
        "raw": "@java.lang.Override public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields){\n  return super.setUnknownFieldsProto3(unknownFields);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "class": "Builder",
        "name": "mergeUnknownFields",
        "return_type": "Builder",
        "modifiers": "@java.lang.Override public final",
        "parameters": [
            {
                "type": "com.google.protobuf.UnknownFieldSet",
                "name": "unknownFields"
            }
        ],
        "raw": "@java.lang.Override public final Builder mergeUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields){\n  return super.mergeUnknownFields(unknownFields);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "name": "getDefaultInstance",
        "return_type": "org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc",
        "modifiers": "public static",
        "parameters": [],
        "raw": "public static org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc getDefaultInstance(){\n  return DEFAULT_INSTANCE;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "name": "parsePartialFrom",
        "return_type": "ServerTransferDataProtoc",
        "modifiers": "@java.lang.Override public",
        "parameters": [
            {
                "type": "com.google.protobuf.CodedInputStream",
                "name": "input"
            },
            {
                "type": "com.google.protobuf.ExtensionRegistryLite",
                "name": "extensionRegistry"
            }
        ],
        "raw": "@java.lang.Override public ServerTransferDataProtoc parsePartialFrom(com.google.protobuf.CodedInputStream input,com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {\n  return new ServerTransferDataProtoc(input,extensionRegistry);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "name": "parser",
        "return_type": "com.google.protobuf.Parser\u003cServerTransferDataProtoc\u003e",
        "modifiers": "public static",
        "parameters": [],
        "raw": "public static com.google.protobuf.Parser\u003cServerTransferDataProtoc\u003e parser(){\n  return PARSER;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "name": "getParserForType",
        "return_type": "com.google.protobuf.Parser\u003cServerTransferDataProtoc\u003e",
        "modifiers": "@java.lang.Override public",
        "parameters": [],
        "raw": "@java.lang.Override public com.google.protobuf.Parser\u003cServerTransferDataProtoc\u003e getParserForType(){\n  return PARSER;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "name": "getDefaultInstanceForType",
        "return_type": "org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc",
        "modifiers": "@java.lang.Override public",
        "parameters": [],
        "raw": "@java.lang.Override public org.nico.ratel.landlords.entity.ServerTransferData.ServerTransferDataProtoc getDefaultInstanceForType(){\n  return DEFAULT_INSTANCE;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "name": "getDescriptor",
        "return_type": "com.google.protobuf.Descriptors.FileDescriptor",
        "modifiers": "public static",
        "parameters": [],
        "raw": "public static com.google.protobuf.Descriptors.FileDescriptor getDescriptor(){\n  return descriptor;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ServerTransferData.java",
        "name": "assignDescriptors",
        "return_type": "com.google.protobuf.ExtensionRegistry",
        "modifiers": "public",
        "parameters": [
            {
                "type": "com.google.protobuf.Descriptors.FileDescriptor",
                "name": "root"
            }
        ],
        "raw": "public com.google.protobuf.ExtensionRegistry assignDescriptors(com.google.protobuf.Descriptors.FileDescriptor root){\n  descriptor\u003droot;\n  return null;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "ClientTransferData",
        "name": "ClientTransferData",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [],
        "raw": "private ClientTransferData(){\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "ClientTransferData",
        "name": "registerAllExtensions",
        "return_type": "void",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "com.google.protobuf.ExtensionRegistryLite",
                "name": "registry"
            }
        ],
        "raw": "public static void registerAllExtensions(com.google.protobuf.ExtensionRegistryLite registry){\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "ClientTransferData",
        "name": "registerAllExtensions",
        "return_type": "void",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "com.google.protobuf.ExtensionRegistry",
                "name": "registry"
            }
        ],
        "raw": "public static void registerAllExtensions(com.google.protobuf.ExtensionRegistry registry){\n  registerAllExtensions((com.google.protobuf.ExtensionRegistryLite)registry);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "ClientTransferDataProtocOrBuilder",
        "name": "getCode",
        "return_type": "java.lang.String",
        "modifiers": "",
        "parameters": [],
        "raw": "/** \n * \u003ccode\u003estring code \u003d 1;\u003c/code\u003e\n */\njava.lang.String getCode();\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "ClientTransferDataProtocOrBuilder",
        "name": "getCodeBytes",
        "return_type": "com.google.protobuf.ByteString",
        "modifiers": "",
        "parameters": [],
        "raw": "/** \n * \u003ccode\u003estring code \u003d 1;\u003c/code\u003e\n */\ncom.google.protobuf.ByteString getCodeBytes();\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "ClientTransferDataProtocOrBuilder",
        "name": "getData",
        "return_type": "java.lang.String",
        "modifiers": "",
        "parameters": [],
        "raw": "/** \n * \u003ccode\u003estring data \u003d 2;\u003c/code\u003e\n */\njava.lang.String getData();\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "ClientTransferDataProtocOrBuilder",
        "name": "getDataBytes",
        "return_type": "com.google.protobuf.ByteString",
        "modifiers": "",
        "parameters": [],
        "raw": "/** \n * \u003ccode\u003estring data \u003d 2;\u003c/code\u003e\n */\ncom.google.protobuf.ByteString getDataBytes();\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "ClientTransferDataProtocOrBuilder",
        "name": "getInfo",
        "return_type": "java.lang.String",
        "modifiers": "",
        "parameters": [],
        "raw": "/** \n * \u003ccode\u003estring info \u003d 3;\u003c/code\u003e\n */\njava.lang.String getInfo();\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "ClientTransferDataProtocOrBuilder",
        "name": "getInfoBytes",
        "return_type": "com.google.protobuf.ByteString",
        "modifiers": "",
        "parameters": [],
        "raw": "/** \n * \u003ccode\u003estring info \u003d 3;\u003c/code\u003e\n */\ncom.google.protobuf.ByteString getInfoBytes();\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "ClientTransferDataProtoc",
        "name": "ClientTransferDataProtoc",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [
            {
                "type": "com.google.protobuf.GeneratedMessageV3.Builder\u003c?\u003e",
                "name": "builder"
            }
        ],
        "raw": "private ClientTransferDataProtoc(com.google.protobuf.GeneratedMessageV3.Builder\u003c?\u003e builder){\n  super(builder);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "ClientTransferDataProtoc",
        "name": "ClientTransferDataProtoc",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [],
        "raw": "private ClientTransferDataProtoc(){\n  code_\u003d\"\";\n  data_\u003d\"\";\n  info_\u003d\"\";\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "ClientTransferDataProtoc",
        "name": "getUnknownFields",
        "return_type": "com.google.protobuf.UnknownFieldSet",
        "modifiers": "@java.lang.Override public final",
        "parameters": [],
        "raw": "@java.lang.Override public final com.google.protobuf.UnknownFieldSet getUnknownFields(){\n  return this.unknownFields;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "ClientTransferDataProtoc",
        "name": "ClientTransferDataProtoc",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [
            {
                "type": "com.google.protobuf.CodedInputStream",
                "name": "input"
            },
            {
                "type": "com.google.protobuf.ExtensionRegistryLite",
                "name": "extensionRegistry"
            }
        ],
        "raw": "private ClientTransferDataProtoc(com.google.protobuf.CodedInputStream input,com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {\n  this();\n  if (extensionRegistry \u003d\u003d null) {\n    throw new java.lang.NullPointerException();\n  }\n  int mutable_bitField0_\u003d0;\n  com.google.protobuf.UnknownFieldSet.Builder unknownFields\u003dcom.google.protobuf.UnknownFieldSet.newBuilder();\n  try {\n    boolean done\u003dfalse;\n    while (!done) {\n      int tag\u003dinput.readTag();\nswitch (tag) {\ncase 0:\n        done\u003dtrue;\n      break;\ncase 10:\n{\n      java.lang.String s\u003dinput.readStringRequireUtf8();\n      code_\u003ds;\n      break;\n    }\ncase 18:\n{\n    java.lang.String s\u003dinput.readStringRequireUtf8();\n    data_\u003ds;\n    break;\n  }\ncase 26:\n{\n  java.lang.String s\u003dinput.readStringRequireUtf8();\n  info_\u003ds;\n  break;\n}\ndefault :\n{\nif (!parseUnknownFieldProto3(input,unknownFields,extensionRegistry,tag)) {\n  done\u003dtrue;\n}\nbreak;\n}\n}\n}\n}\n catch (com.google.protobuf.InvalidProtocolBufferException e) {\nthrow e.setUnfinishedMessage(this);\n}\ncatch (java.io.IOException e) {\nthrow new com.google.protobuf.InvalidProtocolBufferException(e).setUnfinishedMessage(this);\n}\n finally {\nthis.unknownFields\u003dunknownFields.build();\nmakeExtensionsImmutable();\n}\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "ClientTransferDataProtoc",
        "name": "getDescriptor",
        "return_type": "com.google.protobuf.Descriptors.Descriptor",
        "modifiers": "public static final",
        "parameters": [],
        "raw": "public static final com.google.protobuf.Descriptors.Descriptor getDescriptor(){\n  return org.nico.ratel.landlords.entity.ClientTransferData.internal_static_org_nico_ratel_landlords_entity_ClientTransferDataProtoc_descriptor;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "ClientTransferDataProtoc",
        "name": "internalGetFieldAccessorTable",
        "return_type": "com.google.protobuf.GeneratedMessageV3.FieldAccessorTable",
        "modifiers": "@java.lang.Override protected",
        "parameters": [],
        "raw": "@java.lang.Override protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable(){\n  return org.nico.ratel.landlords.entity.ClientTransferData.internal_static_org_nico_ratel_landlords_entity_ClientTransferDataProtoc_fieldAccessorTable.ensureFieldAccessorsInitialized(org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc.class,org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc.Builder.class);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "ClientTransferDataProtoc",
        "name": "getCode",
        "return_type": "java.lang.String",
        "modifiers": "public",
        "parameters": [],
        "raw": "/** \n * \u003ccode\u003estring code \u003d 1;\u003c/code\u003e\n */\npublic java.lang.String getCode(){\n  java.lang.Object ref\u003dcode_;\n  if (ref instanceof java.lang.String) {\n    return (java.lang.String)ref;\n  }\n else {\n    com.google.protobuf.ByteString bs\u003d(com.google.protobuf.ByteString)ref;\n    java.lang.String s\u003dbs.toStringUtf8();\n    code_\u003ds;\n    return s;\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "ClientTransferDataProtoc",
        "name": "getCodeBytes",
        "return_type": "com.google.protobuf.ByteString",
        "modifiers": "public",
        "parameters": [],
        "raw": "/** \n * \u003ccode\u003estring code \u003d 1;\u003c/code\u003e\n */\npublic com.google.protobuf.ByteString getCodeBytes(){\n  java.lang.Object ref\u003dcode_;\n  if (ref instanceof java.lang.String) {\n    com.google.protobuf.ByteString b\u003dcom.google.protobuf.ByteString.copyFromUtf8((java.lang.String)ref);\n    code_\u003db;\n    return b;\n  }\n else {\n    return (com.google.protobuf.ByteString)ref;\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "ClientTransferDataProtoc",
        "name": "getData",
        "return_type": "java.lang.String",
        "modifiers": "public",
        "parameters": [],
        "raw": "/** \n * \u003ccode\u003estring data \u003d 2;\u003c/code\u003e\n */\npublic java.lang.String getData(){\n  java.lang.Object ref\u003ddata_;\n  if (ref instanceof java.lang.String) {\n    return (java.lang.String)ref;\n  }\n else {\n    com.google.protobuf.ByteString bs\u003d(com.google.protobuf.ByteString)ref;\n    java.lang.String s\u003dbs.toStringUtf8();\n    data_\u003ds;\n    return s;\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "ClientTransferDataProtoc",
        "name": "getDataBytes",
        "return_type": "com.google.protobuf.ByteString",
        "modifiers": "public",
        "parameters": [],
        "raw": "/** \n * \u003ccode\u003estring data \u003d 2;\u003c/code\u003e\n */\npublic com.google.protobuf.ByteString getDataBytes(){\n  java.lang.Object ref\u003ddata_;\n  if (ref instanceof java.lang.String) {\n    com.google.protobuf.ByteString b\u003dcom.google.protobuf.ByteString.copyFromUtf8((java.lang.String)ref);\n    data_\u003db;\n    return b;\n  }\n else {\n    return (com.google.protobuf.ByteString)ref;\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "ClientTransferDataProtoc",
        "name": "getInfo",
        "return_type": "java.lang.String",
        "modifiers": "public",
        "parameters": [],
        "raw": "/** \n * \u003ccode\u003estring info \u003d 3;\u003c/code\u003e\n */\npublic java.lang.String getInfo(){\n  java.lang.Object ref\u003dinfo_;\n  if (ref instanceof java.lang.String) {\n    return (java.lang.String)ref;\n  }\n else {\n    com.google.protobuf.ByteString bs\u003d(com.google.protobuf.ByteString)ref;\n    java.lang.String s\u003dbs.toStringUtf8();\n    info_\u003ds;\n    return s;\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "ClientTransferDataProtoc",
        "name": "getInfoBytes",
        "return_type": "com.google.protobuf.ByteString",
        "modifiers": "public",
        "parameters": [],
        "raw": "/** \n * \u003ccode\u003estring info \u003d 3;\u003c/code\u003e\n */\npublic com.google.protobuf.ByteString getInfoBytes(){\n  java.lang.Object ref\u003dinfo_;\n  if (ref instanceof java.lang.String) {\n    com.google.protobuf.ByteString b\u003dcom.google.protobuf.ByteString.copyFromUtf8((java.lang.String)ref);\n    info_\u003db;\n    return b;\n  }\n else {\n    return (com.google.protobuf.ByteString)ref;\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "ClientTransferDataProtoc",
        "name": "isInitialized",
        "return_type": "boolean",
        "modifiers": "@java.lang.Override public final",
        "parameters": [],
        "raw": "@java.lang.Override public final boolean isInitialized(){\n  byte isInitialized\u003dmemoizedIsInitialized;\n  if (isInitialized \u003d\u003d 1)   return true;\n  if (isInitialized \u003d\u003d 0)   return false;\n  memoizedIsInitialized\u003d1;\n  return true;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "ClientTransferDataProtoc",
        "name": "writeTo",
        "return_type": "void",
        "modifiers": "@java.lang.Override public",
        "parameters": [
            {
                "type": "com.google.protobuf.CodedOutputStream",
                "name": "output"
            }
        ],
        "raw": "@java.lang.Override public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {\n  if (!getCodeBytes().isEmpty()) {\n    com.google.protobuf.GeneratedMessageV3.writeString(output,1,code_);\n  }\n  if (!getDataBytes().isEmpty()) {\n    com.google.protobuf.GeneratedMessageV3.writeString(output,2,data_);\n  }\n  if (!getInfoBytes().isEmpty()) {\n    com.google.protobuf.GeneratedMessageV3.writeString(output,3,info_);\n  }\n  unknownFields.writeTo(output);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "ClientTransferDataProtoc",
        "name": "getSerializedSize",
        "return_type": "int",
        "modifiers": "@java.lang.Override public",
        "parameters": [],
        "raw": "@java.lang.Override public int getSerializedSize(){\n  int size\u003dmemoizedSize;\n  if (size !\u003d -1)   return size;\n  size\u003d0;\n  if (!getCodeBytes().isEmpty()) {\n    size+\u003dcom.google.protobuf.GeneratedMessageV3.computeStringSize(1,code_);\n  }\n  if (!getDataBytes().isEmpty()) {\n    size+\u003dcom.google.protobuf.GeneratedMessageV3.computeStringSize(2,data_);\n  }\n  if (!getInfoBytes().isEmpty()) {\n    size+\u003dcom.google.protobuf.GeneratedMessageV3.computeStringSize(3,info_);\n  }\n  size+\u003dunknownFields.getSerializedSize();\n  memoizedSize\u003dsize;\n  return size;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "ClientTransferDataProtoc",
        "name": "equals",
        "return_type": "boolean",
        "modifiers": "@java.lang.Override public",
        "parameters": [
            {
                "type": "java.lang.Object",
                "name": "obj"
            }
        ],
        "raw": "@java.lang.Override public boolean equals(final java.lang.Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc)) {\n    return super.equals(obj);\n  }\n  org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc other\u003d(org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc)obj;\n  boolean result\u003dtrue;\n  result\u003dresult \u0026\u0026 getCode().equals(other.getCode());\n  result\u003dresult \u0026\u0026 getData().equals(other.getData());\n  result\u003dresult \u0026\u0026 getInfo().equals(other.getInfo());\n  result\u003dresult \u0026\u0026 unknownFields.equals(other.unknownFields);\n  return result;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "ClientTransferDataProtoc",
        "name": "hashCode",
        "return_type": "int",
        "modifiers": "@java.lang.Override public",
        "parameters": [],
        "raw": "@java.lang.Override public int hashCode(){\n  if (memoizedHashCode !\u003d 0) {\n    return memoizedHashCode;\n  }\n  int hash\u003d41;\n  hash\u003d(19 * hash) + getDescriptor().hashCode();\n  hash\u003d(37 * hash) + CODE_FIELD_NUMBER;\n  hash\u003d(53 * hash) + getCode().hashCode();\n  hash\u003d(37 * hash) + DATA_FIELD_NUMBER;\n  hash\u003d(53 * hash) + getData().hashCode();\n  hash\u003d(37 * hash) + INFO_FIELD_NUMBER;\n  hash\u003d(53 * hash) + getInfo().hashCode();\n  hash\u003d(29 * hash) + unknownFields.hashCode();\n  memoizedHashCode\u003dhash;\n  return hash;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "ClientTransferDataProtoc",
        "name": "parseFrom",
        "return_type": "org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "java.nio.ByteBuffer",
                "name": "data"
            }
        ],
        "raw": "public static org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc parseFrom(java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {\n  return PARSER.parseFrom(data);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "ClientTransferDataProtoc",
        "name": "parseFrom",
        "return_type": "org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "java.nio.ByteBuffer",
                "name": "data"
            },
            {
                "type": "com.google.protobuf.ExtensionRegistryLite",
                "name": "extensionRegistry"
            }
        ],
        "raw": "public static org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc parseFrom(java.nio.ByteBuffer data,com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {\n  return PARSER.parseFrom(data,extensionRegistry);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "ClientTransferDataProtoc",
        "name": "parseFrom",
        "return_type": "org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "com.google.protobuf.ByteString",
                "name": "data"
            }
        ],
        "raw": "public static org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc parseFrom(com.google.protobuf.ByteString data) throws com.google.protobuf.InvalidProtocolBufferException {\n  return PARSER.parseFrom(data);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "ClientTransferDataProtoc",
        "name": "parseFrom",
        "return_type": "org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "com.google.protobuf.ByteString",
                "name": "data"
            },
            {
                "type": "com.google.protobuf.ExtensionRegistryLite",
                "name": "extensionRegistry"
            }
        ],
        "raw": "public static org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc parseFrom(com.google.protobuf.ByteString data,com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {\n  return PARSER.parseFrom(data,extensionRegistry);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "ClientTransferDataProtoc",
        "name": "parseFrom",
        "return_type": "org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "byte[]",
                "name": "data"
            }
        ],
        "raw": "public static org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc parseFrom(byte[] data) throws com.google.protobuf.InvalidProtocolBufferException {\n  return PARSER.parseFrom(data);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "ClientTransferDataProtoc",
        "name": "parseFrom",
        "return_type": "org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "byte[]",
                "name": "data"
            },
            {
                "type": "com.google.protobuf.ExtensionRegistryLite",
                "name": "extensionRegistry"
            }
        ],
        "raw": "public static org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc parseFrom(byte[] data,com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {\n  return PARSER.parseFrom(data,extensionRegistry);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "ClientTransferDataProtoc",
        "name": "parseFrom",
        "return_type": "org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "java.io.InputStream",
                "name": "input"
            }
        ],
        "raw": "public static org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc parseFrom(java.io.InputStream input) throws java.io.IOException {\n  return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER,input);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "ClientTransferDataProtoc",
        "name": "parseFrom",
        "return_type": "org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "java.io.InputStream",
                "name": "input"
            },
            {
                "type": "com.google.protobuf.ExtensionRegistryLite",
                "name": "extensionRegistry"
            }
        ],
        "raw": "public static org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc parseFrom(java.io.InputStream input,com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {\n  return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER,input,extensionRegistry);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "ClientTransferDataProtoc",
        "name": "parseDelimitedFrom",
        "return_type": "org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "java.io.InputStream",
                "name": "input"
            }
        ],
        "raw": "public static org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {\n  return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER,input);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "ClientTransferDataProtoc",
        "name": "parseDelimitedFrom",
        "return_type": "org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "java.io.InputStream",
                "name": "input"
            },
            {
                "type": "com.google.protobuf.ExtensionRegistryLite",
                "name": "extensionRegistry"
            }
        ],
        "raw": "public static org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc parseDelimitedFrom(java.io.InputStream input,com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {\n  return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER,input,extensionRegistry);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "ClientTransferDataProtoc",
        "name": "parseFrom",
        "return_type": "org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "com.google.protobuf.CodedInputStream",
                "name": "input"
            }
        ],
        "raw": "public static org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc parseFrom(com.google.protobuf.CodedInputStream input) throws java.io.IOException {\n  return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER,input);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "ClientTransferDataProtoc",
        "name": "parseFrom",
        "return_type": "org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "com.google.protobuf.CodedInputStream",
                "name": "input"
            },
            {
                "type": "com.google.protobuf.ExtensionRegistryLite",
                "name": "extensionRegistry"
            }
        ],
        "raw": "public static org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc parseFrom(com.google.protobuf.CodedInputStream input,com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {\n  return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER,input,extensionRegistry);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "ClientTransferDataProtoc",
        "name": "newBuilderForType",
        "return_type": "Builder",
        "modifiers": "@java.lang.Override public",
        "parameters": [],
        "raw": "@java.lang.Override public Builder newBuilderForType(){\n  return newBuilder();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "ClientTransferDataProtoc",
        "name": "newBuilder",
        "return_type": "Builder",
        "modifiers": "public static",
        "parameters": [],
        "raw": "public static Builder newBuilder(){\n  return DEFAULT_INSTANCE.toBuilder();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "ClientTransferDataProtoc",
        "name": "newBuilder",
        "return_type": "Builder",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc",
                "name": "prototype"
            }
        ],
        "raw": "public static Builder newBuilder(org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc prototype){\n  return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "ClientTransferDataProtoc",
        "name": "toBuilder",
        "return_type": "Builder",
        "modifiers": "@java.lang.Override public",
        "parameters": [],
        "raw": "@java.lang.Override public Builder toBuilder(){\n  return this \u003d\u003d DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "ClientTransferDataProtoc",
        "name": "newBuilderForType",
        "return_type": "Builder",
        "modifiers": "@java.lang.Override protected",
        "parameters": [
            {
                "type": "com.google.protobuf.GeneratedMessageV3.BuilderParent",
                "name": "parent"
            }
        ],
        "raw": "@java.lang.Override protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent){\n  Builder builder\u003dnew Builder(parent);\n  return builder;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "Builder",
        "name": "getDescriptor",
        "return_type": "com.google.protobuf.Descriptors.Descriptor",
        "modifiers": "public static final",
        "parameters": [],
        "raw": "public static final com.google.protobuf.Descriptors.Descriptor getDescriptor(){\n  return org.nico.ratel.landlords.entity.ClientTransferData.internal_static_org_nico_ratel_landlords_entity_ClientTransferDataProtoc_descriptor;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "Builder",
        "name": "internalGetFieldAccessorTable",
        "return_type": "com.google.protobuf.GeneratedMessageV3.FieldAccessorTable",
        "modifiers": "@java.lang.Override protected",
        "parameters": [],
        "raw": "@java.lang.Override protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable(){\n  return org.nico.ratel.landlords.entity.ClientTransferData.internal_static_org_nico_ratel_landlords_entity_ClientTransferDataProtoc_fieldAccessorTable.ensureFieldAccessorsInitialized(org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc.class,org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc.Builder.class);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "Builder",
        "name": "Builder",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [],
        "raw": "private Builder(){\n  maybeForceBuilderInitialization();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "Builder",
        "name": "Builder",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [
            {
                "type": "com.google.protobuf.GeneratedMessageV3.BuilderParent",
                "name": "parent"
            }
        ],
        "raw": "private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent){\n  super(parent);\n  maybeForceBuilderInitialization();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "Builder",
        "name": "maybeForceBuilderInitialization",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [],
        "raw": "private void maybeForceBuilderInitialization(){\n  if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "Builder",
        "name": "clear",
        "return_type": "Builder",
        "modifiers": "@java.lang.Override public",
        "parameters": [],
        "raw": "@java.lang.Override public Builder clear(){\n  super.clear();\n  code_\u003d\"\";\n  data_\u003d\"\";\n  info_\u003d\"\";\n  return this;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "Builder",
        "name": "getDescriptorForType",
        "return_type": "com.google.protobuf.Descriptors.Descriptor",
        "modifiers": "@java.lang.Override public",
        "parameters": [],
        "raw": "@java.lang.Override public com.google.protobuf.Descriptors.Descriptor getDescriptorForType(){\n  return org.nico.ratel.landlords.entity.ClientTransferData.internal_static_org_nico_ratel_landlords_entity_ClientTransferDataProtoc_descriptor;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "Builder",
        "name": "getDefaultInstanceForType",
        "return_type": "org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc",
        "modifiers": "@java.lang.Override public",
        "parameters": [],
        "raw": "@java.lang.Override public org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc getDefaultInstanceForType(){\n  return org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc.getDefaultInstance();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "Builder",
        "name": "build",
        "return_type": "org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc",
        "modifiers": "@java.lang.Override public",
        "parameters": [],
        "raw": "@java.lang.Override public org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc build(){\n  org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc result\u003dbuildPartial();\n  if (!result.isInitialized()) {\n    throw newUninitializedMessageException(result);\n  }\n  return result;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "Builder",
        "name": "buildPartial",
        "return_type": "org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc",
        "modifiers": "@java.lang.Override public",
        "parameters": [],
        "raw": "@java.lang.Override public org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc buildPartial(){\n  org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc result\u003dnew org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc(this);\n  result.code_\u003dcode_;\n  result.data_\u003ddata_;\n  result.info_\u003dinfo_;\n  onBuilt();\n  return result;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "Builder",
        "name": "clone",
        "return_type": "Builder",
        "modifiers": "@java.lang.Override public",
        "parameters": [],
        "raw": "@java.lang.Override public Builder clone(){\n  return (Builder)super.clone();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "Builder",
        "name": "setField",
        "return_type": "Builder",
        "modifiers": "@java.lang.Override public",
        "parameters": [
            {
                "type": "com.google.protobuf.Descriptors.FieldDescriptor",
                "name": "field"
            },
            {
                "type": "java.lang.Object",
                "name": "value"
            }
        ],
        "raw": "@java.lang.Override public Builder setField(com.google.protobuf.Descriptors.FieldDescriptor field,java.lang.Object value){\n  return (Builder)super.setField(field,value);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "Builder",
        "name": "clearField",
        "return_type": "Builder",
        "modifiers": "@java.lang.Override public",
        "parameters": [
            {
                "type": "com.google.protobuf.Descriptors.FieldDescriptor",
                "name": "field"
            }
        ],
        "raw": "@java.lang.Override public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field){\n  return (Builder)super.clearField(field);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "Builder",
        "name": "clearOneof",
        "return_type": "Builder",
        "modifiers": "@java.lang.Override public",
        "parameters": [
            {
                "type": "com.google.protobuf.Descriptors.OneofDescriptor",
                "name": "oneof"
            }
        ],
        "raw": "@java.lang.Override public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof){\n  return (Builder)super.clearOneof(oneof);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "Builder",
        "name": "setRepeatedField",
        "return_type": "Builder",
        "modifiers": "@java.lang.Override public",
        "parameters": [
            {
                "type": "com.google.protobuf.Descriptors.FieldDescriptor",
                "name": "field"
            },
            {
                "type": "int",
                "name": "index"
            },
            {
                "type": "java.lang.Object",
                "name": "value"
            }
        ],
        "raw": "@java.lang.Override public Builder setRepeatedField(com.google.protobuf.Descriptors.FieldDescriptor field,int index,java.lang.Object value){\n  return (Builder)super.setRepeatedField(field,index,value);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "Builder",
        "name": "addRepeatedField",
        "return_type": "Builder",
        "modifiers": "@java.lang.Override public",
        "parameters": [
            {
                "type": "com.google.protobuf.Descriptors.FieldDescriptor",
                "name": "field"
            },
            {
                "type": "java.lang.Object",
                "name": "value"
            }
        ],
        "raw": "@java.lang.Override public Builder addRepeatedField(com.google.protobuf.Descriptors.FieldDescriptor field,java.lang.Object value){\n  return (Builder)super.addRepeatedField(field,value);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "Builder",
        "name": "mergeFrom",
        "return_type": "Builder",
        "modifiers": "@java.lang.Override public",
        "parameters": [
            {
                "type": "com.google.protobuf.Message",
                "name": "other"
            }
        ],
        "raw": "@java.lang.Override public Builder mergeFrom(com.google.protobuf.Message other){\n  if (other instanceof org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc) {\n    return mergeFrom((org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc)other);\n  }\n else {\n    super.mergeFrom(other);\n    return this;\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "Builder",
        "name": "mergeFrom",
        "return_type": "Builder",
        "modifiers": "public",
        "parameters": [
            {
                "type": "org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc",
                "name": "other"
            }
        ],
        "raw": "public Builder mergeFrom(org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc other){\n  if (other \u003d\u003d org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc.getDefaultInstance())   return this;\n  if (!other.getCode().isEmpty()) {\n    code_\u003dother.code_;\n    onChanged();\n  }\n  if (!other.getData().isEmpty()) {\n    data_\u003dother.data_;\n    onChanged();\n  }\n  if (!other.getInfo().isEmpty()) {\n    info_\u003dother.info_;\n    onChanged();\n  }\n  this.mergeUnknownFields(other.unknownFields);\n  onChanged();\n  return this;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "Builder",
        "name": "isInitialized",
        "return_type": "boolean",
        "modifiers": "@java.lang.Override public final",
        "parameters": [],
        "raw": "@java.lang.Override public final boolean isInitialized(){\n  return true;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "Builder",
        "name": "mergeFrom",
        "return_type": "Builder",
        "modifiers": "@java.lang.Override public",
        "parameters": [
            {
                "type": "com.google.protobuf.CodedInputStream",
                "name": "input"
            },
            {
                "type": "com.google.protobuf.ExtensionRegistryLite",
                "name": "extensionRegistry"
            }
        ],
        "raw": "@java.lang.Override public Builder mergeFrom(com.google.protobuf.CodedInputStream input,com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {\n  org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc parsedMessage\u003dnull;\n  try {\n    parsedMessage\u003dPARSER.parsePartialFrom(input,extensionRegistry);\n  }\n catch (  com.google.protobuf.InvalidProtocolBufferException e) {\n    parsedMessage\u003d(org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc)e.getUnfinishedMessage();\n    throw e.unwrapIOException();\n  }\n finally {\n    if (parsedMessage !\u003d null) {\n      mergeFrom(parsedMessage);\n    }\n  }\n  return this;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "Builder",
        "name": "getCode",
        "return_type": "java.lang.String",
        "modifiers": "public",
        "parameters": [],
        "raw": "/** \n * \u003ccode\u003estring code \u003d 1;\u003c/code\u003e\n */\npublic java.lang.String getCode(){\n  java.lang.Object ref\u003dcode_;\n  if (!(ref instanceof java.lang.String)) {\n    com.google.protobuf.ByteString bs\u003d(com.google.protobuf.ByteString)ref;\n    java.lang.String s\u003dbs.toStringUtf8();\n    code_\u003ds;\n    return s;\n  }\n else {\n    return (java.lang.String)ref;\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "Builder",
        "name": "getCodeBytes",
        "return_type": "com.google.protobuf.ByteString",
        "modifiers": "public",
        "parameters": [],
        "raw": "/** \n * \u003ccode\u003estring code \u003d 1;\u003c/code\u003e\n */\npublic com.google.protobuf.ByteString getCodeBytes(){\n  java.lang.Object ref\u003dcode_;\n  if (ref instanceof String) {\n    com.google.protobuf.ByteString b\u003dcom.google.protobuf.ByteString.copyFromUtf8((java.lang.String)ref);\n    code_\u003db;\n    return b;\n  }\n else {\n    return (com.google.protobuf.ByteString)ref;\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "Builder",
        "name": "setCode",
        "return_type": "Builder",
        "modifiers": "public",
        "parameters": [
            {
                "type": "java.lang.String",
                "name": "value"
            }
        ],
        "raw": "/** \n * \u003ccode\u003estring code \u003d 1;\u003c/code\u003e\n */\npublic Builder setCode(java.lang.String value){\n  if (value \u003d\u003d null) {\n    throw new NullPointerException();\n  }\n  code_\u003dvalue;\n  onChanged();\n  return this;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "Builder",
        "name": "clearCode",
        "return_type": "Builder",
        "modifiers": "public",
        "parameters": [],
        "raw": "/** \n * \u003ccode\u003estring code \u003d 1;\u003c/code\u003e\n */\npublic Builder clearCode(){\n  code_\u003dgetDefaultInstance().getCode();\n  onChanged();\n  return this;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "Builder",
        "name": "setCodeBytes",
        "return_type": "Builder",
        "modifiers": "public",
        "parameters": [
            {
                "type": "com.google.protobuf.ByteString",
                "name": "value"
            }
        ],
        "raw": "/** \n * \u003ccode\u003estring code \u003d 1;\u003c/code\u003e\n */\npublic Builder setCodeBytes(com.google.protobuf.ByteString value){\n  if (value \u003d\u003d null) {\n    throw new NullPointerException();\n  }\n  checkByteStringIsUtf8(value);\n  code_\u003dvalue;\n  onChanged();\n  return this;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "Builder",
        "name": "getData",
        "return_type": "java.lang.String",
        "modifiers": "public",
        "parameters": [],
        "raw": "/** \n * \u003ccode\u003estring data \u003d 2;\u003c/code\u003e\n */\npublic java.lang.String getData(){\n  java.lang.Object ref\u003ddata_;\n  if (!(ref instanceof java.lang.String)) {\n    com.google.protobuf.ByteString bs\u003d(com.google.protobuf.ByteString)ref;\n    java.lang.String s\u003dbs.toStringUtf8();\n    data_\u003ds;\n    return s;\n  }\n else {\n    return (java.lang.String)ref;\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "Builder",
        "name": "getDataBytes",
        "return_type": "com.google.protobuf.ByteString",
        "modifiers": "public",
        "parameters": [],
        "raw": "/** \n * \u003ccode\u003estring data \u003d 2;\u003c/code\u003e\n */\npublic com.google.protobuf.ByteString getDataBytes(){\n  java.lang.Object ref\u003ddata_;\n  if (ref instanceof String) {\n    com.google.protobuf.ByteString b\u003dcom.google.protobuf.ByteString.copyFromUtf8((java.lang.String)ref);\n    data_\u003db;\n    return b;\n  }\n else {\n    return (com.google.protobuf.ByteString)ref;\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "Builder",
        "name": "setData",
        "return_type": "Builder",
        "modifiers": "public",
        "parameters": [
            {
                "type": "java.lang.String",
                "name": "value"
            }
        ],
        "raw": "/** \n * \u003ccode\u003estring data \u003d 2;\u003c/code\u003e\n */\npublic Builder setData(java.lang.String value){\n  if (value \u003d\u003d null) {\n    throw new NullPointerException();\n  }\n  data_\u003dvalue;\n  onChanged();\n  return this;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "Builder",
        "name": "clearData",
        "return_type": "Builder",
        "modifiers": "public",
        "parameters": [],
        "raw": "/** \n * \u003ccode\u003estring data \u003d 2;\u003c/code\u003e\n */\npublic Builder clearData(){\n  data_\u003dgetDefaultInstance().getData();\n  onChanged();\n  return this;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "Builder",
        "name": "setDataBytes",
        "return_type": "Builder",
        "modifiers": "public",
        "parameters": [
            {
                "type": "com.google.protobuf.ByteString",
                "name": "value"
            }
        ],
        "raw": "/** \n * \u003ccode\u003estring data \u003d 2;\u003c/code\u003e\n */\npublic Builder setDataBytes(com.google.protobuf.ByteString value){\n  if (value \u003d\u003d null) {\n    throw new NullPointerException();\n  }\n  checkByteStringIsUtf8(value);\n  data_\u003dvalue;\n  onChanged();\n  return this;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "Builder",
        "name": "getInfo",
        "return_type": "java.lang.String",
        "modifiers": "public",
        "parameters": [],
        "raw": "/** \n * \u003ccode\u003estring info \u003d 3;\u003c/code\u003e\n */\npublic java.lang.String getInfo(){\n  java.lang.Object ref\u003dinfo_;\n  if (!(ref instanceof java.lang.String)) {\n    com.google.protobuf.ByteString bs\u003d(com.google.protobuf.ByteString)ref;\n    java.lang.String s\u003dbs.toStringUtf8();\n    info_\u003ds;\n    return s;\n  }\n else {\n    return (java.lang.String)ref;\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "Builder",
        "name": "getInfoBytes",
        "return_type": "com.google.protobuf.ByteString",
        "modifiers": "public",
        "parameters": [],
        "raw": "/** \n * \u003ccode\u003estring info \u003d 3;\u003c/code\u003e\n */\npublic com.google.protobuf.ByteString getInfoBytes(){\n  java.lang.Object ref\u003dinfo_;\n  if (ref instanceof String) {\n    com.google.protobuf.ByteString b\u003dcom.google.protobuf.ByteString.copyFromUtf8((java.lang.String)ref);\n    info_\u003db;\n    return b;\n  }\n else {\n    return (com.google.protobuf.ByteString)ref;\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "Builder",
        "name": "setInfo",
        "return_type": "Builder",
        "modifiers": "public",
        "parameters": [
            {
                "type": "java.lang.String",
                "name": "value"
            }
        ],
        "raw": "/** \n * \u003ccode\u003estring info \u003d 3;\u003c/code\u003e\n */\npublic Builder setInfo(java.lang.String value){\n  if (value \u003d\u003d null) {\n    throw new NullPointerException();\n  }\n  info_\u003dvalue;\n  onChanged();\n  return this;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "Builder",
        "name": "clearInfo",
        "return_type": "Builder",
        "modifiers": "public",
        "parameters": [],
        "raw": "/** \n * \u003ccode\u003estring info \u003d 3;\u003c/code\u003e\n */\npublic Builder clearInfo(){\n  info_\u003dgetDefaultInstance().getInfo();\n  onChanged();\n  return this;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "Builder",
        "name": "setInfoBytes",
        "return_type": "Builder",
        "modifiers": "public",
        "parameters": [
            {
                "type": "com.google.protobuf.ByteString",
                "name": "value"
            }
        ],
        "raw": "/** \n * \u003ccode\u003estring info \u003d 3;\u003c/code\u003e\n */\npublic Builder setInfoBytes(com.google.protobuf.ByteString value){\n  if (value \u003d\u003d null) {\n    throw new NullPointerException();\n  }\n  checkByteStringIsUtf8(value);\n  info_\u003dvalue;\n  onChanged();\n  return this;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "Builder",
        "name": "setUnknownFields",
        "return_type": "Builder",
        "modifiers": "@java.lang.Override public final",
        "parameters": [
            {
                "type": "com.google.protobuf.UnknownFieldSet",
                "name": "unknownFields"
            }
        ],
        "raw": "@java.lang.Override public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields){\n  return super.setUnknownFieldsProto3(unknownFields);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "class": "Builder",
        "name": "mergeUnknownFields",
        "return_type": "Builder",
        "modifiers": "@java.lang.Override public final",
        "parameters": [
            {
                "type": "com.google.protobuf.UnknownFieldSet",
                "name": "unknownFields"
            }
        ],
        "raw": "@java.lang.Override public final Builder mergeUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields){\n  return super.mergeUnknownFields(unknownFields);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "name": "getDefaultInstance",
        "return_type": "org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc",
        "modifiers": "public static",
        "parameters": [],
        "raw": "public static org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc getDefaultInstance(){\n  return DEFAULT_INSTANCE;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "name": "parsePartialFrom",
        "return_type": "ClientTransferDataProtoc",
        "modifiers": "@java.lang.Override public",
        "parameters": [
            {
                "type": "com.google.protobuf.CodedInputStream",
                "name": "input"
            },
            {
                "type": "com.google.protobuf.ExtensionRegistryLite",
                "name": "extensionRegistry"
            }
        ],
        "raw": "@java.lang.Override public ClientTransferDataProtoc parsePartialFrom(com.google.protobuf.CodedInputStream input,com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {\n  return new ClientTransferDataProtoc(input,extensionRegistry);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "name": "parser",
        "return_type": "com.google.protobuf.Parser\u003cClientTransferDataProtoc\u003e",
        "modifiers": "public static",
        "parameters": [],
        "raw": "public static com.google.protobuf.Parser\u003cClientTransferDataProtoc\u003e parser(){\n  return PARSER;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "name": "getParserForType",
        "return_type": "com.google.protobuf.Parser\u003cClientTransferDataProtoc\u003e",
        "modifiers": "@java.lang.Override public",
        "parameters": [],
        "raw": "@java.lang.Override public com.google.protobuf.Parser\u003cClientTransferDataProtoc\u003e getParserForType(){\n  return PARSER;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "name": "getDefaultInstanceForType",
        "return_type": "org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc",
        "modifiers": "@java.lang.Override public",
        "parameters": [],
        "raw": "@java.lang.Override public org.nico.ratel.landlords.entity.ClientTransferData.ClientTransferDataProtoc getDefaultInstanceForType(){\n  return DEFAULT_INSTANCE;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "name": "getDescriptor",
        "return_type": "com.google.protobuf.Descriptors.FileDescriptor",
        "modifiers": "public static",
        "parameters": [],
        "raw": "public static com.google.protobuf.Descriptors.FileDescriptor getDescriptor(){\n  return descriptor;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientTransferData.java",
        "name": "assignDescriptors",
        "return_type": "com.google.protobuf.ExtensionRegistry",
        "modifiers": "public",
        "parameters": [
            {
                "type": "com.google.protobuf.Descriptors.FileDescriptor",
                "name": "root"
            }
        ],
        "raw": "public com.google.protobuf.ExtensionRegistry assignDescriptors(com.google.protobuf.Descriptors.FileDescriptor root){\n  descriptor\u003droot;\n  return null;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientSide.java",
        "class": "ClientSide",
        "name": "ClientSide",
        "return_type": "void",
        "modifiers": "public",
        "parameters": [],
        "raw": "public ClientSide(){\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientSide.java",
        "class": "ClientSide",
        "name": "ClientSide",
        "return_type": "void",
        "modifiers": "public",
        "parameters": [
            {
                "type": "int",
                "name": "id"
            },
            {
                "type": "ClientStatus",
                "name": "status"
            },
            {
                "type": "Channel",
                "name": "channel"
            }
        ],
        "raw": "public ClientSide(int id,ClientStatus status,Channel channel){\n  this.id\u003did;\n  this.status\u003dstatus;\n  this.channel\u003dchannel;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientSide.java",
        "class": "ClientSide",
        "name": "init",
        "return_type": "void",
        "modifiers": "public",
        "parameters": [],
        "raw": "public void init(){\n  roomId\u003d0;\n  pokers\u003dnull;\n  status\u003dClientStatus.TO_CHOOSE;\n  type\u003dnull;\n  next\u003dnull;\n  pre\u003dnull;\n  score\u003d0;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientSide.java",
        "class": "ClientSide",
        "name": "resetRound",
        "return_type": "void",
        "modifiers": "public final",
        "parameters": [],
        "raw": "public final void resetRound(){\n  round\u003d0;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientSide.java",
        "class": "ClientSide",
        "name": "getRound",
        "return_type": "int",
        "modifiers": "public final",
        "parameters": [],
        "raw": "public final int getRound(){\n  return round;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientSide.java",
        "class": "ClientSide",
        "name": "addRound",
        "return_type": "void",
        "modifiers": "public final",
        "parameters": [],
        "raw": "public final void addRound(){\n  round+\u003d1;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientSide.java",
        "class": "ClientSide",
        "name": "getRole",
        "return_type": "ClientRole",
        "modifiers": "public final",
        "parameters": [],
        "raw": "public final ClientRole getRole(){\n  return role;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientSide.java",
        "class": "ClientSide",
        "name": "setRole",
        "return_type": "void",
        "modifiers": "public final",
        "parameters": [
            {
                "type": "ClientRole",
                "name": "role"
            }
        ],
        "raw": "public final void setRole(ClientRole role){\n  this.role\u003drole;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientSide.java",
        "class": "ClientSide",
        "name": "getNickname",
        "return_type": "String",
        "modifiers": "public final",
        "parameters": [],
        "raw": "public final String getNickname(){\n  return nickname;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientSide.java",
        "class": "ClientSide",
        "name": "setNickname",
        "return_type": "void",
        "modifiers": "public final",
        "parameters": [
            {
                "type": "String",
                "name": "nickname"
            }
        ],
        "raw": "public final void setNickname(String nickname){\n  this.nickname\u003dnickname;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientSide.java",
        "class": "ClientSide",
        "name": "getChannel",
        "return_type": "Channel",
        "modifiers": "public final",
        "parameters": [],
        "raw": "public final Channel getChannel(){\n  return channel;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientSide.java",
        "class": "ClientSide",
        "name": "setChannel",
        "return_type": "void",
        "modifiers": "public final",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            }
        ],
        "raw": "public final void setChannel(Channel channel){\n  this.channel\u003dchannel;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientSide.java",
        "class": "ClientSide",
        "name": "getRoomId",
        "return_type": "int",
        "modifiers": "public final",
        "parameters": [],
        "raw": "public final int getRoomId(){\n  return roomId;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientSide.java",
        "class": "ClientSide",
        "name": "setRoomId",
        "return_type": "void",
        "modifiers": "public final",
        "parameters": [
            {
                "type": "int",
                "name": "roomId"
            }
        ],
        "raw": "public final void setRoomId(int roomId){\n  this.roomId\u003droomId;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientSide.java",
        "class": "ClientSide",
        "name": "getPokers",
        "return_type": "List\u003cPoker\u003e",
        "modifiers": "public final",
        "parameters": [],
        "raw": "public final List\u003cPoker\u003e getPokers(){\n  return pokers;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientSide.java",
        "class": "ClientSide",
        "name": "setPokers",
        "return_type": "void",
        "modifiers": "public final",
        "parameters": [
            {
                "type": "List\u003cPoker\u003e",
                "name": "pokers"
            }
        ],
        "raw": "public final void setPokers(List\u003cPoker\u003e pokers){\n  this.pokers\u003dpokers;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientSide.java",
        "class": "ClientSide",
        "name": "getScore",
        "return_type": "int",
        "modifiers": "public final",
        "parameters": [],
        "raw": "public final int getScore(){\n  return score;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientSide.java",
        "class": "ClientSide",
        "name": "setScore",
        "return_type": "void",
        "modifiers": "public final",
        "parameters": [
            {
                "type": "int",
                "name": "score"
            }
        ],
        "raw": "public final void setScore(int score){\n  this.score\u003dscore;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientSide.java",
        "class": "ClientSide",
        "name": "addScore",
        "return_type": "void",
        "modifiers": "public final",
        "parameters": [
            {
                "type": "int",
                "name": "score"
            }
        ],
        "raw": "public final void addScore(int score){\n  this.score+\u003dscore;\n  this.scoreInc\u003dscore;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientSide.java",
        "class": "ClientSide",
        "name": "setScoreInc",
        "return_type": "void",
        "modifiers": "public final",
        "parameters": [
            {
                "type": "int",
                "name": "scoreInc"
            }
        ],
        "raw": "public final void setScoreInc(int scoreInc){\n  this.scoreInc\u003dscoreInc;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientSide.java",
        "class": "ClientSide",
        "name": "getScoreInc",
        "return_type": "int",
        "modifiers": "public final",
        "parameters": [],
        "raw": "public final int getScoreInc(){\n  return this.scoreInc;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientSide.java",
        "class": "ClientSide",
        "name": "getStatus",
        "return_type": "ClientStatus",
        "modifiers": "public final",
        "parameters": [],
        "raw": "public final ClientStatus getStatus(){\n  return status;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientSide.java",
        "class": "ClientSide",
        "name": "setStatus",
        "return_type": "void",
        "modifiers": "public final",
        "parameters": [
            {
                "type": "ClientStatus",
                "name": "status"
            }
        ],
        "raw": "public final void setStatus(ClientStatus status){\n  this.status\u003dstatus;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientSide.java",
        "class": "ClientSide",
        "name": "getType",
        "return_type": "ClientType",
        "modifiers": "public final",
        "parameters": [],
        "raw": "public final ClientType getType(){\n  return type;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientSide.java",
        "class": "ClientSide",
        "name": "setType",
        "return_type": "void",
        "modifiers": "public final",
        "parameters": [
            {
                "type": "ClientType",
                "name": "type"
            }
        ],
        "raw": "public final void setType(ClientType type){\n  this.type\u003dtype;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientSide.java",
        "class": "ClientSide",
        "name": "getId",
        "return_type": "int",
        "modifiers": "public final",
        "parameters": [],
        "raw": "public final int getId(){\n  return id;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientSide.java",
        "class": "ClientSide",
        "name": "setId",
        "return_type": "void",
        "modifiers": "public final",
        "parameters": [
            {
                "type": "int",
                "name": "id"
            }
        ],
        "raw": "public final void setId(int id){\n  this.id\u003did;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientSide.java",
        "class": "ClientSide",
        "name": "getNext",
        "return_type": "ClientSide",
        "modifiers": "public final",
        "parameters": [],
        "raw": "public final ClientSide getNext(){\n  return next;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientSide.java",
        "class": "ClientSide",
        "name": "setNext",
        "return_type": "void",
        "modifiers": "public final",
        "parameters": [
            {
                "type": "ClientSide",
                "name": "next"
            }
        ],
        "raw": "public final void setNext(ClientSide next){\n  this.next\u003dnext;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientSide.java",
        "class": "ClientSide",
        "name": "getPre",
        "return_type": "ClientSide",
        "modifiers": "public final",
        "parameters": [],
        "raw": "public final ClientSide getPre(){\n  return pre;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientSide.java",
        "class": "ClientSide",
        "name": "setPre",
        "return_type": "void",
        "modifiers": "public final",
        "parameters": [
            {
                "type": "ClientSide",
                "name": "pre"
            }
        ],
        "raw": "public final void setPre(ClientSide pre){\n  this.pre\u003dpre;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientSide.java",
        "class": "ClientSide",
        "name": "getVersion",
        "return_type": "String",
        "modifiers": "public",
        "parameters": [],
        "raw": "public String getVersion(){\n  return version;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientSide.java",
        "class": "ClientSide",
        "name": "setVersion",
        "return_type": "void",
        "modifiers": "public",
        "parameters": [
            {
                "type": "String",
                "name": "version"
            }
        ],
        "raw": "public void setVersion(String version){\n  this.version\u003dversion;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientSide.java",
        "class": "ClientSide",
        "name": "hashCode",
        "return_type": "int",
        "modifiers": "@Override public",
        "parameters": [],
        "raw": "@Override public int hashCode(){\n  final int prime\u003d31;\n  int result\u003d1;\n  result\u003dprime * result + id;\n  return result;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/entity/ClientSide.java",
        "class": "ClientSide",
        "name": "equals",
        "return_type": "boolean",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "Object",
                "name": "obj"
            }
        ],
        "raw": "@Override public boolean equals(Object obj){\n  if (this \u003d\u003d obj)   return true;\n  if (obj \u003d\u003d null)   return false;\n  if (getClass() !\u003d obj.getClass())   return false;\n  ClientSide other\u003d(ClientSide)obj;\n  return id \u003d\u003d other.id;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/channel/ChannelUtils.java",
        "class": "ChannelUtils",
        "name": "pushToClient",
        "return_type": "void",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            },
            {
                "type": "ClientEventCode",
                "name": "code"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "public static void pushToClient(Channel channel,ClientEventCode code,String data){\n  pushToClient(channel,code,data,null);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/channel/ChannelUtils.java",
        "class": "ChannelUtils",
        "name": "pushToClient",
        "return_type": "void",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            },
            {
                "type": "ClientEventCode",
                "name": "code"
            },
            {
                "type": "String",
                "name": "data"
            },
            {
                "type": "String",
                "name": "info"
            }
        ],
        "raw": "public static void pushToClient(Channel channel,ClientEventCode code,String data,String info){\n  if (channel !\u003d null) {\n    if (channel.pipeline().get(\"ws\") !\u003d null) {\n      Msg msg\u003dnew Msg();\n      msg.setCode(code.toString());\n      msg.setData(data);\n      msg.setInfo(info);\n      channel.writeAndFlush(new TextWebSocketFrame(JsonUtils.toJson(msg)));\n    }\n else {\n      ClientTransferData.ClientTransferDataProtoc.Builder clientTransferData\u003dClientTransferData.ClientTransferDataProtoc.newBuilder();\n      if (code !\u003d null) {\n        clientTransferData.setCode(code.toString());\n      }\n      if (data !\u003d null) {\n        clientTransferData.setData(data);\n      }\n      if (info !\u003d null) {\n        clientTransferData.setInfo(info);\n      }\n      channel.writeAndFlush(clientTransferData);\n    }\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/channel/ChannelUtils.java",
        "class": "ChannelUtils",
        "name": "pushToServer",
        "return_type": "ChannelFuture",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            },
            {
                "type": "ServerEventCode",
                "name": "code"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "public static ChannelFuture pushToServer(Channel channel,ServerEventCode code,String data){\n  if (channel.pipeline().get(\"ws\") !\u003d null) {\n    Msg msg\u003dnew Msg();\n    msg.setCode(code.toString());\n    msg.setData(data);\n    return channel.writeAndFlush(new TextWebSocketFrame(JsonUtils.toJson(msg)));\n  }\n else {\n    ServerTransferData.ServerTransferDataProtoc.Builder serverTransferData\u003dServerTransferData.ServerTransferDataProtoc.newBuilder();\n    if (code !\u003d null) {\n      serverTransferData.setCode(code.toString());\n    }\n    if (data !\u003d null) {\n      serverTransferData.setData(data);\n    }\n    return channel.writeAndFlush(serverTransferData);\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/exception/LandlordException.java",
        "class": "LandlordException",
        "name": "LandlordException",
        "return_type": "void",
        "modifiers": "public",
        "parameters": [],
        "raw": "public LandlordException(){\n  super();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/exception/LandlordException.java",
        "class": "LandlordException",
        "name": "LandlordException",
        "return_type": "void",
        "modifiers": "public",
        "parameters": [
            {
                "type": "String",
                "name": "message"
            },
            {
                "type": "Throwable",
                "name": "cause"
            },
            {
                "type": "boolean",
                "name": "enableSuppression"
            },
            {
                "type": "boolean",
                "name": "writableStackTrace"
            }
        ],
        "raw": "public LandlordException(String message,Throwable cause,boolean enableSuppression,boolean writableStackTrace){\n  super(message,cause,enableSuppression,writableStackTrace);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/exception/LandlordException.java",
        "class": "LandlordException",
        "name": "LandlordException",
        "return_type": "void",
        "modifiers": "public",
        "parameters": [
            {
                "type": "String",
                "name": "message"
            },
            {
                "type": "Throwable",
                "name": "cause"
            }
        ],
        "raw": "public LandlordException(String message,Throwable cause){\n  super(message,cause);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/exception/LandlordException.java",
        "class": "LandlordException",
        "name": "LandlordException",
        "return_type": "void",
        "modifiers": "public",
        "parameters": [
            {
                "type": "String",
                "name": "message"
            }
        ],
        "raw": "public LandlordException(String message){\n  super(message);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/exception/LandlordException.java",
        "class": "LandlordException",
        "name": "LandlordException",
        "return_type": "void",
        "modifiers": "public",
        "parameters": [
            {
                "type": "Throwable",
                "name": "cause"
            }
        ],
        "raw": "public LandlordException(Throwable cause){\n  super(cause);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/features/Features.java",
        "class": "Features",
        "name": "supported",
        "return_type": "boolean",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "String",
                "name": "clientVersion"
            },
            {
                "type": "String",
                "name": "feature"
            }
        ],
        "raw": "public static boolean supported(String clientVersion,String feature){\n  List\u003cString\u003e features\u003dFEATURES.get(clientVersion);\n  if (Objects.isNull(features) || Objects.isNull(feature)) {\n    return false;\n  }\n  return features.contains(feature.toUpperCase(Locale.ROOT));\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/transfer/ByteLink.java",
        "class": "ByteLink",
        "name": "append",
        "return_type": "void",
        "modifiers": "public",
        "parameters": [
            {
                "type": "byte",
                "name": "b"
            }
        ],
        "raw": "public void append(byte b){\n  if (start \u003d\u003d null) {\n    start\u003dnew ByteNode(b);\n    current\u003dstart;\n  }\n else {\n    ByteNode node\u003dnew ByteNode(b);\n    current.setNext(node);\n    current\u003dnode;\n  }\n  size++;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/transfer/ByteLink.java",
        "class": "ByteLink",
        "name": "append",
        "return_type": "void",
        "modifiers": "public",
        "parameters": [
            {
                "type": "byte[]",
                "name": "bs"
            }
        ],
        "raw": "public void append(byte[] bs){\n  if (bs !\u003d null) {\n    for (    byte b : bs) {\n      append(b);\n    }\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/transfer/ByteLink.java",
        "class": "ByteLink",
        "name": "toArray",
        "return_type": "byte[]",
        "modifiers": "public",
        "parameters": [],
        "raw": "public byte[] toArray(){\n  if (size \u003d\u003d 0) {\n    return null;\n  }\n  byte[] bytes\u003dnew byte[size];\n  int index\u003d0;\n  ByteNode s\u003dstart.clone();\n  while (s !\u003d null) {\n    bytes[index++]\u003ds.getB();\n    s\u003ds.getNext();\n  }\n  return bytes;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/transfer/ByteLink.java",
        "class": "ByteNode",
        "name": "ByteNode",
        "return_type": "void",
        "modifiers": "public",
        "parameters": [
            {
                "type": "byte",
                "name": "b"
            }
        ],
        "raw": "public ByteNode(byte b){\n  this.b\u003db;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/transfer/ByteLink.java",
        "class": "ByteNode",
        "name": "ByteNode",
        "return_type": "void",
        "modifiers": "public",
        "parameters": [
            {
                "type": "byte",
                "name": "b"
            },
            {
                "type": "ByteNode",
                "name": "next"
            }
        ],
        "raw": "public ByteNode(byte b,ByteNode next){\n  this.b\u003db;\n  this.next\u003dnext;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/transfer/ByteLink.java",
        "class": "ByteNode",
        "name": "clone",
        "return_type": "ByteNode",
        "modifiers": "protected",
        "parameters": [],
        "raw": "protected ByteNode clone(){\n  return new ByteNode(b,next);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/transfer/ByteLink.java",
        "class": "ByteNode",
        "name": "getB",
        "return_type": "byte",
        "modifiers": "public",
        "parameters": [],
        "raw": "public byte getB(){\n  return b;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/transfer/ByteLink.java",
        "class": "ByteNode",
        "name": "setB",
        "return_type": "void",
        "modifiers": "public",
        "parameters": [
            {
                "type": "byte",
                "name": "b"
            }
        ],
        "raw": "public void setB(byte b){\n  this.b\u003db;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/transfer/ByteLink.java",
        "class": "ByteNode",
        "name": "getNext",
        "return_type": "ByteNode",
        "modifiers": "public",
        "parameters": [],
        "raw": "public ByteNode getNext(){\n  return next;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/transfer/ByteLink.java",
        "class": "ByteNode",
        "name": "setNext",
        "return_type": "void",
        "modifiers": "public",
        "parameters": [
            {
                "type": "ByteNode",
                "name": "next"
            }
        ],
        "raw": "public void setNext(ByteNode next){\n  this.next\u003dnext;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/transfer/TransferProtocolUtils.java",
        "class": "TransferProtocolUtils",
        "name": "serialize",
        "return_type": "byte[]",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "Object",
                "name": "obj"
            }
        ],
        "raw": "/** \n * Serialize the poker list to transportable bytes\n * @param obj Poker list\n * @return Transportable byte array\n */\npublic static byte[] serialize(Object obj){\n  ByteLink bl\u003dnew ByteLink();\n  bl.append(PROTOCOL_HAED);\n  bl.append(Noson.reversal(obj).getBytes());\n  bl.append(PROTOCOL_TAIL);\n  return bl.toArray();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/transfer/TransferProtocolUtils.java",
        "class": "TransferProtocolUtils",
        "name": "unserialize",
        "return_type": "T",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "byte[]",
                "name": "bytes"
            },
            {
                "type": "Class\u003cT\u003e",
                "name": "clazz"
            }
        ],
        "raw": "/** \n * Deserialize the byte stream as an object\n * @param bytes Byte array\n * @return Genericity\n */\npublic static \u003cT\u003eT unserialize(byte[] bytes,Class\u003cT\u003e clazz){\n  ByteKit bk\u003dnew ByteKit(bytes);\n  int start\u003d-1;\n  int end\u003d-1;\n  int index\u003dbk.indexOf(PROTOCOL_HAED,0);\n  if (index !\u003d -1)   start\u003dindex + 1;\n  index\u003dbk.indexOf(PROTOCOL_TAIL,0);\n  if (index !\u003d -1)   end\u003dindex;\n  if (start !\u003d -1 \u0026\u0026 end !\u003d -1 \u0026\u0026 start \u003e end) {\n    throw new LandlordException(\"Message format error, head and tail error.\");\n  }\n else {\n    byte[] content\u003dnew byte[end - start];\n    System.arraycopy(bytes,start,content,0,content.length);\n    return Noson.convert(new String(content),clazz);\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/transfer/ByteKit.java",
        "class": "ByteKit",
        "name": "ByteKit",
        "return_type": "void",
        "modifiers": "public",
        "parameters": [
            {
                "type": "byte[]",
                "name": "bytes"
            }
        ],
        "raw": "public ByteKit(byte[] bytes){\n  this.bytes\u003dbytes;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/transfer/ByteKit.java",
        "class": "ByteKit",
        "name": "indexOf",
        "return_type": "int",
        "modifiers": "public",
        "parameters": [
            {
                "type": "byte[]",
                "name": "bs"
            },
            {
                "type": "int",
                "name": "start"
            }
        ],
        "raw": "/** \n * Gets the index of the incoming array in the target array, not matched to return -1\n * @param bs    Incoming array\n * @param start Matching start index\n * @return Match index, not match to return -1\n */\npublic int indexOf(byte[] bs,int start){\n  int targetIndex\u003d-1;\n  if (bs \u003d\u003d null) {\n    return targetIndex;\n  }\n  for (int index\u003dstart; index \u003c bytes.length; index++) {\n    byte cbyte\u003dbytes[index];\n    if (bs[0] \u003d\u003d cbyte) {\n      boolean isEquals\u003dtrue;\n      for (int sindex\u003d1; sindex \u003c bs.length; sindex++) {\n        if (index + sindex \u003e\u003d bytes.length || bs[sindex] !\u003d bytes[index + sindex]) {\n          isEquals\u003dfalse;\n          break;\n        }\n      }\n      if (isEquals) {\n        targetIndex\u003dindex;\n        break;\n      }\n    }\n  }\n  return targetIndex;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/transfer/ByteKit.java",
        "class": "ByteKit",
        "name": "indexOf",
        "return_type": "int",
        "modifiers": "public",
        "parameters": [
            {
                "type": "byte",
                "name": "b"
            },
            {
                "type": "int",
                "name": "start"
            }
        ],
        "raw": "/** \n * Gets the position of the byte byte in the byte array\n * @param b     Byte\n * @param start Matching start index\n * @return Match index, not match to return -1\n */\npublic int indexOf(byte b,int start){\n  return indexOf(new byte[]{b},start);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/enums/RoomType.java",
        "name": "RoomType",
        "return_type": "void",
        "modifiers": "",
        "parameters": [
            {
                "type": "String",
                "name": "msg"
            }
        ],
        "raw": "RoomType(String msg){\n  this.msg\u003dmsg;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/enums/RoomType.java",
        "name": "getMsg",
        "return_type": "String",
        "modifiers": "public final",
        "parameters": [],
        "raw": "public final String getMsg(){\n  return msg;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/enums/RoomType.java",
        "name": "setMsg",
        "return_type": "void",
        "modifiers": "public final",
        "parameters": [
            {
                "type": "String",
                "name": "msg"
            }
        ],
        "raw": "public final void setMsg(String msg){\n  this.msg\u003dmsg;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/enums/ServerEventCode.java",
        "name": "ServerEventCode",
        "return_type": "void",
        "modifiers": "",
        "parameters": [
            {
                "type": "String",
                "name": "msg"
            }
        ],
        "raw": "ServerEventCode(String msg){\n  this.msg\u003dmsg;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/enums/ServerEventCode.java",
        "name": "getMsg",
        "return_type": "String",
        "modifiers": "public final",
        "parameters": [],
        "raw": "public final String getMsg(){\n  return msg;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/enums/ServerEventCode.java",
        "name": "setMsg",
        "return_type": "void",
        "modifiers": "public final",
        "parameters": [
            {
                "type": "String",
                "name": "msg"
            }
        ],
        "raw": "public final void setMsg(String msg){\n  this.msg\u003dmsg;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/enums/PokerLevel.java",
        "name": "PokerLevel",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [
            {
                "type": "int",
                "name": "level"
            },
            {
                "type": "String",
                "name": "name"
            },
            {
                "type": "Character[]",
                "name": "alias"
            }
        ],
        "raw": "private PokerLevel(int level,String name,Character[] alias){\n  this.level\u003dlevel;\n  this.name\u003dname;\n  this.alias\u003dalias;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/enums/PokerLevel.java",
        "name": "aliasContains",
        "return_type": "boolean",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "char",
                "name": "key"
            }
        ],
        "raw": "public static boolean aliasContains(char key){\n  return aliasSet.contains(key);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/enums/PokerLevel.java",
        "name": "getAlias",
        "return_type": "Character[]",
        "modifiers": "public final",
        "parameters": [],
        "raw": "public final Character[] getAlias(){\n  return alias;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/enums/PokerLevel.java",
        "name": "setAlias",
        "return_type": "void",
        "modifiers": "public final",
        "parameters": [
            {
                "type": "Character[]",
                "name": "alias"
            }
        ],
        "raw": "public final void setAlias(Character[] alias){\n  this.alias\u003dalias;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/enums/PokerLevel.java",
        "name": "getName",
        "return_type": "String",
        "modifiers": "public final",
        "parameters": [],
        "raw": "public final String getName(){\n  return name;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/enums/PokerLevel.java",
        "name": "setName",
        "return_type": "void",
        "modifiers": "public final",
        "parameters": [
            {
                "type": "String",
                "name": "name"
            }
        ],
        "raw": "public final void setName(String name){\n  this.name\u003dname;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/enums/PokerLevel.java",
        "name": "getLevel",
        "return_type": "int",
        "modifiers": "public final",
        "parameters": [],
        "raw": "public final int getLevel(){\n  return level;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/enums/PokerLevel.java",
        "name": "setLevel",
        "return_type": "void",
        "modifiers": "public final",
        "parameters": [
            {
                "type": "int",
                "name": "level"
            }
        ],
        "raw": "public final void setLevel(int level){\n  this.level\u003dlevel;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/enums/PokerLevel.java",
        "name": "parseByName",
        "return_type": "PokerLevel",
        "modifiers": "public static final",
        "parameters": [
            {
                "type": "String",
                "name": "name"
            }
        ],
        "raw": "public static final PokerLevel parseByName(String name){\n  if (name \u003d\u003d null) {\n    return null;\n  }\n  for (  PokerLevel level : PokerLevel.values()) {\n    if (level.name.equals(name.toUpperCase())) {\n      return level;\n    }\n  }\n  return null;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/enums/PokerLevel.java",
        "name": "parseByLevel",
        "return_type": "PokerLevel",
        "modifiers": "public static final",
        "parameters": [
            {
                "type": "int",
                "name": "l"
            }
        ],
        "raw": "public static final PokerLevel parseByLevel(int l){\n  for (  PokerLevel level : PokerLevel.values()) {\n    if (level.level \u003d\u003d l) {\n      return level;\n    }\n  }\n  return null;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/enums/SellType.java",
        "name": "SellType",
        "return_type": "void",
        "modifiers": "",
        "parameters": [
            {
                "type": "String",
                "name": "msg"
            }
        ],
        "raw": "SellType(String msg){\n  this.msg\u003dmsg;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/enums/SellType.java",
        "name": "getMsg",
        "return_type": "String",
        "modifiers": "public final",
        "parameters": [],
        "raw": "public final String getMsg(){\n  return msg;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/enums/SellType.java",
        "name": "setMsg",
        "return_type": "void",
        "modifiers": "public final",
        "parameters": [
            {
                "type": "String",
                "name": "msg"
            }
        ],
        "raw": "public final void setMsg(String msg){\n  this.msg\u003dmsg;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/enums/RoomStatus.java",
        "name": "RoomStatus",
        "return_type": "void",
        "modifiers": "",
        "parameters": [
            {
                "type": "String",
                "name": "msg"
            }
        ],
        "raw": "RoomStatus(String msg){\n  this.msg\u003dmsg;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/enums/RoomStatus.java",
        "name": "getMsg",
        "return_type": "String",
        "modifiers": "public final",
        "parameters": [],
        "raw": "public final String getMsg(){\n  return msg;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/enums/RoomStatus.java",
        "name": "setMsg",
        "return_type": "void",
        "modifiers": "public final",
        "parameters": [
            {
                "type": "String",
                "name": "msg"
            }
        ],
        "raw": "public final void setMsg(String msg){\n  this.msg\u003dmsg;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/enums/ClientEventCode.java",
        "name": "ClientEventCode",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [
            {
                "type": "String",
                "name": "msg"
            }
        ],
        "raw": "private ClientEventCode(String msg){\n  this.msg\u003dmsg;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/enums/ClientEventCode.java",
        "name": "getMsg",
        "return_type": "String",
        "modifiers": "public final",
        "parameters": [],
        "raw": "public final String getMsg(){\n  return msg;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/enums/ClientEventCode.java",
        "name": "setMsg",
        "return_type": "void",
        "modifiers": "public final",
        "parameters": [
            {
                "type": "String",
                "name": "msg"
            }
        ],
        "raw": "public final void setMsg(String msg){\n  this.msg\u003dmsg;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/enums/PokerType.java",
        "name": "PokerType",
        "return_type": "void",
        "modifiers": "",
        "parameters": [
            {
                "type": "String",
                "name": "name"
            }
        ],
        "raw": "PokerType(String name){\n  this.name\u003dname;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/enums/PokerType.java",
        "name": "getName",
        "return_type": "String",
        "modifiers": "public final",
        "parameters": [],
        "raw": "public final String getName(){\n  return name;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/handler/DefaultDecoder.java",
        "class": "DefaultDecoder",
        "name": "decode",
        "return_type": "void",
        "modifiers": "@Override protected",
        "parameters": [
            {
                "type": "ChannelHandlerContext",
                "name": "ctx"
            },
            {
                "type": "ByteBuf",
                "name": "in"
            },
            {
                "type": "List\u003cObject\u003e",
                "name": "out"
            }
        ],
        "raw": "@Override protected void decode(ChannelHandlerContext ctx,ByteBuf in,List\u003cObject\u003e out){\n  int startIndex;\n  int endIndex;\n  if ((startIndex\u003din.indexOf(in.readerIndex(),in.writerIndex(),TransferProtocolUtils.PROTOCOL_HAED)) !\u003d -1 \u0026\u0026 (endIndex\u003din.indexOf(startIndex + 1,in.writerIndex(),TransferProtocolUtils.PROTOCOL_TAIL)) !\u003d -1) {\n    endIndex++;\n    byte[] bytes\u003dnew byte[endIndex - startIndex];\n    in.skipBytes(startIndex - in.readerIndex());\n    in.readBytes(bytes,0,bytes.length);\n    out.add(bytes);\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/robot/MediumRobotDecisionMakers.java",
        "class": "MediumRobotDecisionMakers",
        "name": "MediumRobotDecisionMakers",
        "return_type": "void",
        "modifiers": "public",
        "parameters": [],
        "raw": "public MediumRobotDecisionMakers(){\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/robot/MediumRobotDecisionMakers.java",
        "class": "MediumRobotDecisionMakers",
        "name": "howToPlayPokers",
        "return_type": "PokerSell",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "PokerSell",
                "name": "lastPokerSell"
            },
            {
                "type": "ClientSide",
                "name": "robot"
            }
        ],
        "raw": "@Override public PokerSell howToPlayPokers(PokerSell lastPokerSell,ClientSide robot){\n  if (lastPokerSell !\u003d null \u0026\u0026 lastPokerSell.getSellType() \u003d\u003d SellType.KING_BOMB) {\n    return null;\n  }\n  List\u003cPoker\u003e selfPoker\u003dPokerHelper.clonePokers(robot.getPokers());\n  List\u003cPoker\u003e leftPoker\u003dPokerHelper.clonePokers(robot.getPre().getPokers());\n  List\u003cPoker\u003e rightPoker\u003dPokerHelper.clonePokers(robot.getNext().getPokers());\n  PokerHelper.sortPoker(selfPoker);\n  PokerHelper.sortPoker(leftPoker);\n  PokerHelper.sortPoker(rightPoker);\n  List\u003cList\u003cPoker\u003e\u003e pokersList\u003dnew ArrayList\u003cList\u003cPoker\u003e\u003e();\n  pokersList.add(selfPoker);\n  pokersList.add(rightPoker);\n  pokersList.add(leftPoker);\n  List\u003cPokerSell\u003e sells\u003dPokerHelper.validSells(lastPokerSell,selfPoker);\n  if (sells.size() \u003d\u003d 0) {\n    return null;\n  }\n  PokerSell bestSell\u003dnull;\n  Long weight\u003dnull;\n  for (  PokerSell sell : sells) {\n    List\u003cPoker\u003e pokers\u003dPokerHelper.clonePokers(selfPoker);\n    pokers.removeAll(sell.getSellPokers());\n    if (pokers.size() \u003d\u003d 0) {\n      return sell;\n    }\n    pokersList.set(0,pokers);\n    AtomicLong counter\u003dnew AtomicLong();\n    deduce(0,sell,1,pokersList,counter);\n    if (weight \u003d\u003d null) {\n      bestSell\u003dsell;\n      weight\u003dcounter.get();\n    }\n else     if (counter.get() \u003e weight) {\n      bestSell\u003dsell;\n      weight\u003dcounter.get();\n    }\n    pokersList.set(0,selfPoker);\n  }\n  return bestSell;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/robot/MediumRobotDecisionMakers.java",
        "class": "MediumRobotDecisionMakers",
        "name": "deduce",
        "return_type": "Boolean",
        "modifiers": "private",
        "parameters": [
            {
                "type": "int",
                "name": "sellCursor"
            },
            {
                "type": "PokerSell",
                "name": "lastPokerSell"
            },
            {
                "type": "int",
                "name": "cursor"
            },
            {
                "type": "List\u003cList\u003cPoker\u003e\u003e",
                "name": "pokersList"
            },
            {
                "type": "AtomicLong",
                "name": "counter"
            }
        ],
        "raw": "private Boolean deduce(int sellCursor,PokerSell lastPokerSell,int cursor,List\u003cList\u003cPoker\u003e\u003e pokersList,AtomicLong counter){\n  if (cursor \u003e 2) {\n    cursor\u003d0;\n  }\n  if (sellCursor \u003d\u003d cursor) {\n    lastPokerSell\u003dnull;\n  }\n  List\u003cPoker\u003e original\u003dpokersList.get(cursor);\n  List\u003cPokerSell\u003e sells\u003dPokerHelper.validSells(lastPokerSell,original);\n  if (sells.size() \u003d\u003d 0) {\n    if (sellCursor !\u003d cursor) {\n      return deduce(sellCursor,lastPokerSell,cursor + 1,pokersList,counter);\n    }\n  }\n  for (  PokerSell sell : sells) {\n    List\u003cPoker\u003e pokers\u003dPokerHelper.clonePokers(original);\n    pokers.removeAll(sell.getSellPokers());\n    if (pokers.size() \u003d\u003d 0) {\n      return cursor \u003d\u003d 0;\n    }\n else {\n      pokersList.set(cursor,pokers);\n      Boolean suc\u003ddeduce(cursor,sell,cursor + 1,pokersList,counter);\n      if (cursor !\u003d 0) {\n        pokersList.set(cursor,original);\n        return suc;\n      }\n      if (Math.abs(counter.get()) \u003e DEDUCE_LIMIT) {\n        pokersList.set(cursor,original);\n        return counter.get() \u003e DEDUCE_LIMIT;\n      }\n      if (suc !\u003d null) {\n        counter.addAndGet((long)(suc ? 1 : -1));\n      }\n      pokersList.set(cursor,original);\n    }\n  }\n  return null;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/robot/MediumRobotDecisionMakers.java",
        "class": "MediumRobotDecisionMakers",
        "name": "serialPokers",
        "return_type": "String",
        "modifiers": "private static",
        "parameters": [
            {
                "type": "List\u003cPoker\u003e",
                "name": "pokers"
            }
        ],
        "raw": "private static String serialPokers(List\u003cPoker\u003e pokers){\n  if (pokers \u003d\u003d null || pokers.size() \u003d\u003d 0) {\n    return \"n\";\n  }\n  StringBuilder builder\u003dnew StringBuilder();\n  for (int index\u003d0; index \u003c pokers.size(); index++) {\n    builder.append(pokers.get(index).getLevel().getLevel()).append(index \u003d\u003d pokers.size() - 1 ? \"\" : \"_\");\n  }\n  return builder.toString();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/robot/MediumRobotDecisionMakers.java",
        "class": "MediumRobotDecisionMakers",
        "name": "serialPokersList",
        "return_type": "String",
        "modifiers": "private static",
        "parameters": [
            {
                "type": "List\u003cList\u003cPoker\u003e\u003e",
                "name": "pokersList"
            }
        ],
        "raw": "private static String serialPokersList(List\u003cList\u003cPoker\u003e\u003e pokersList){\n  StringBuilder builder\u003dnew StringBuilder();\n  for (int index\u003d0; index \u003c pokersList.size(); index++) {\n    List\u003cPoker\u003e pokers\u003dpokersList.get(index);\n    builder.append(serialPokers(pokers)).append(index \u003d\u003d pokersList.size() - 1 ? \"\" : \"m\");\n  }\n  return builder.toString();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/robot/MediumRobotDecisionMakers.java",
        "class": "MediumRobotDecisionMakers",
        "name": "getLandlordScore",
        "return_type": "int",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "List\u003cPoker\u003e",
                "name": "leftPokers"
            },
            {
                "type": "List\u003cPoker\u003e",
                "name": "rightPokers"
            },
            {
                "type": "List\u003cPoker\u003e",
                "name": "myPokers"
            }
        ],
        "raw": "@Override public int getLandlordScore(List\u003cPoker\u003e leftPokers,List\u003cPoker\u003e rightPokers,List\u003cPoker\u003e myPokers){\n  int leftScore\u003dPokerHelper.parsePokerColligationScore(leftPokers);\n  int rightScore\u003dPokerHelper.parsePokerColligationScore(rightPokers);\n  int myScore\u003dPokerHelper.parsePokerColligationScore(myPokers);\n  int expectedScore\u003d0;\n  if (myScore \u003e\u003d Math.min(leftScore,rightScore)) {\n    ++expectedScore;\n  }\n  if (myScore * 2 \u003e\u003d leftScore + rightScore) {\n    ++expectedScore;\n  }\n  if (myScore \u003e\u003d Math.max(leftScore,rightScore)) {\n    ++expectedScore;\n  }\n  return expectedScore;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/robot/RobotDecisionMakers.java",
        "class": "RobotDecisionMakers",
        "name": "init",
        "return_type": "void",
        "modifiers": "public static",
        "parameters": [],
        "raw": "public static void init(){\n  decisionMakersMap.put(1,new EasyRobotDecisionMakers());\n  decisionMakersMap.put(2,new MediumRobotDecisionMakers());\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/robot/RobotDecisionMakers.java",
        "class": "RobotDecisionMakers",
        "name": "contains",
        "return_type": "boolean",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "int",
                "name": "difficultyCoefficient"
            }
        ],
        "raw": "public static boolean contains(int difficultyCoefficient){\n  return decisionMakersMap.containsKey(difficultyCoefficient);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/robot/RobotDecisionMakers.java",
        "class": "RobotDecisionMakers",
        "name": "howToPlayPokers",
        "return_type": "PokerSell",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "int",
                "name": "difficultyCoefficient"
            },
            {
                "type": "PokerSell",
                "name": "lastPokerSell"
            },
            {
                "type": "ClientSide",
                "name": "robot"
            }
        ],
        "raw": "public static PokerSell howToPlayPokers(int difficultyCoefficient,PokerSell lastPokerSell,ClientSide robot){\n  return decisionMakersMap.get(difficultyCoefficient).howToPlayPokers(lastPokerSell,robot);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/robot/RobotDecisionMakers.java",
        "class": "RobotDecisionMakers",
        "name": "getLandlordScore",
        "return_type": "int",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "int",
                "name": "difficultyCoefficient"
            },
            {
                "type": "List\u003cPoker\u003e",
                "name": "leftPokers"
            },
            {
                "type": "List\u003cPoker\u003e",
                "name": "rightPokers"
            },
            {
                "type": "List\u003cPoker\u003e",
                "name": "myPokers"
            }
        ],
        "raw": "public static int getLandlordScore(int difficultyCoefficient,List\u003cPoker\u003e leftPokers,List\u003cPoker\u003e rightPokers,List\u003cPoker\u003e myPokers){\n  return decisionMakersMap.get(difficultyCoefficient).getLandlordScore(leftPokers,rightPokers,myPokers);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/robot/AbstractRobotDecisionMakers.java",
        "class": "AbstractRobotDecisionMakers",
        "name": "howToPlayPokers",
        "return_type": "PokerSell",
        "modifiers": "public abstract",
        "parameters": [
            {
                "type": "PokerSell",
                "name": "lastPokerSell"
            },
            {
                "type": "ClientSide",
                "name": "robot"
            }
        ],
        "raw": "public abstract PokerSell howToPlayPokers(PokerSell lastPokerSell,ClientSide robot);\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/robot/AbstractRobotDecisionMakers.java",
        "class": "AbstractRobotDecisionMakers",
        "name": "getLandlordScore",
        "return_type": "int",
        "modifiers": "public abstract",
        "parameters": [
            {
                "type": "List\u003cPoker\u003e",
                "name": "leftPokers"
            },
            {
                "type": "List\u003cPoker\u003e",
                "name": "rightPokers"
            },
            {
                "type": "List\u003cPoker\u003e",
                "name": "myPokers"
            }
        ],
        "raw": "public abstract int getLandlordScore(List\u003cPoker\u003e leftPokers,List\u003cPoker\u003e rightPokers,List\u003cPoker\u003e myPokers);\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/robot/EasyRobotDecisionMakers.java",
        "class": "EasyRobotDecisionMakers",
        "name": "howToPlayPokers",
        "return_type": "PokerSell",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "PokerSell",
                "name": "lastPokerSell"
            },
            {
                "type": "ClientSide",
                "name": "robot"
            }
        ],
        "raw": "@Override public PokerSell howToPlayPokers(PokerSell lastPokerSell,ClientSide robot){\n  if (lastPokerSell !\u003d null \u0026\u0026 lastPokerSell.getSellType() \u003d\u003d SellType.KING_BOMB) {\n    return null;\n  }\n  List\u003cPokerSell\u003e sells\u003dPokerHelper.parsePokerSells(robot.getPokers());\n  if (lastPokerSell \u003d\u003d null) {\n    return sells.get(random.nextInt(sells.size()));\n  }\n  for (  PokerSell sell : sells) {\n    if (sell.getSellType() \u003d\u003d lastPokerSell.getSellType()) {\n      if (sell.getScore() \u003e lastPokerSell.getScore() \u0026\u0026 sell.getSellPokers().size() \u003d\u003d lastPokerSell.getSellPokers().size()) {\n        return sell;\n      }\n    }\n  }\n  if (lastPokerSell.getSellType() !\u003d SellType.BOMB) {\n    for (    PokerSell sell : sells) {\n      if (sell.getSellType() \u003d\u003d SellType.BOMB) {\n        return sell;\n      }\n    }\n  }\n  for (  PokerSell sell : sells) {\n    if (sell.getSellType() \u003d\u003d SellType.KING_BOMB) {\n      return sell;\n    }\n  }\n  return null;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/robot/EasyRobotDecisionMakers.java",
        "class": "EasyRobotDecisionMakers",
        "name": "getLandlordScore",
        "return_type": "int",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "List\u003cPoker\u003e",
                "name": "leftPokers"
            },
            {
                "type": "List\u003cPoker\u003e",
                "name": "rightPokers"
            },
            {
                "type": "List\u003cPoker\u003e",
                "name": "myPokers"
            }
        ],
        "raw": "@Override public int getLandlordScore(List\u003cPoker\u003e leftPokers,List\u003cPoker\u003e rightPokers,List\u003cPoker\u003e myPokers){\n  List\u003cPokerSell\u003e leftSells\u003dPokerHelper.parsePokerSells(leftPokers);\n  List\u003cPokerSell\u003e mySells\u003dPokerHelper.parsePokerSells(myPokers);\n  List\u003cPokerSell\u003e rightSells\u003dPokerHelper.parsePokerSells(rightPokers);\n  int expectedScore\u003d0;\n  if (mySells.size() \u003e leftSells.size()) {\n    ++expectedScore;\n  }\n  if (mySells.size() \u003e rightSells.size()) {\n    ++expectedScore;\n  }\n  if (expectedScore !\u003d 0) {\n    ++expectedScore;\n  }\n  return expectedScore;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/print/FormatPrinter.java",
        "class": "FormatPrinter",
        "name": "FormatPrinter",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [],
        "raw": "private FormatPrinter(){\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/print/FormatPrinter.java",
        "class": "FormatPrinter",
        "name": "printNotice",
        "return_type": "void",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "String",
                "name": "format"
            },
            {
                "type": "Object",
                "name": "args"
            }
        ],
        "raw": "public static void printNotice(String format,Object... args){\n  System.out.printf(format,args);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/print/SimpleWriter.java",
        "class": "SimpleWriter",
        "name": "write",
        "return_type": "String",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "String",
                "name": "message"
            }
        ],
        "raw": "public static String write(String message){\n  return write(\"player\",message);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/print/SimpleWriter.java",
        "class": "SimpleWriter",
        "name": "write",
        "return_type": "String",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "String",
                "name": "nickname"
            },
            {
                "type": "String",
                "name": "message"
            }
        ],
        "raw": "public static String write(String nickname,String message){\n  System.out.println();\n  System.out.printf(\"[%s@%s]$ \",nickname,message);\n  try {\n    return write();\n  }\n  finally {\n    System.out.println();\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/print/SimpleWriter.java",
        "class": "SimpleWriter",
        "name": "write",
        "return_type": "String",
        "modifiers": "public static",
        "parameters": [],
        "raw": "public static String write(){\n  try {\n    return reader.readLine();\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n  return null;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/print/SimplePrinter.java",
        "class": "SimplePrinter",
        "name": "printPokers",
        "return_type": "void",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "List\u003cPoker\u003e",
                "name": "pokers"
            }
        ],
        "raw": "public static void printPokers(List\u003cPoker\u003e pokers){\n  System.out.println(PokerHelper.printPoker(pokers));\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/print/SimplePrinter.java",
        "class": "SimplePrinter",
        "name": "printNotice",
        "return_type": "void",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "String",
                "name": "msg"
            }
        ],
        "raw": "public static void printNotice(String msg){\n  System.out.println(msg);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/print/SimplePrinter.java",
        "class": "SimplePrinter",
        "name": "printNotice",
        "return_type": "void",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "String",
                "name": "msgKey"
            },
            {
                "type": "String",
                "name": "locale"
            }
        ],
        "raw": "public static void printNotice(String msgKey,String locale){\n  Map\u003cString,Map\u003cString,String\u003e\u003e map\u003dnew HashMap\u003c\u003e();\n  map.put(\"english\",new HashMap\u003c\u003e());\n  map.get(\"eng\").put(\"caterpillar\",\"caterpillar\u0027s message!!\");\n  System.out.println(map.get(locale).get(msgKey));\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/print/SimplePrinter.java",
        "class": "SimplePrinter",
        "name": "serverLog",
        "return_type": "void",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "String",
                "name": "msg"
            }
        ],
        "raw": "public static void serverLog(String msg){\n  System.out.println(FORMAT.format(new Date()) + \"-\u003e \" + msg);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/helper/TimeHelper.java",
        "class": "TimeHelper",
        "name": "sleep",
        "return_type": "void",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "long",
                "name": "millis"
            }
        ],
        "raw": "public static void sleep(long millis){\n  try {\n    Thread.sleep(millis);\n  }\n catch (  InterruptedException ignored) {\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/helper/MapHelper.java",
        "class": "MapHelper",
        "name": "MapHelper",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [],
        "raw": "private MapHelper(){\n  this.data\u003dnew LinkedHashMap\u003c\u003e();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/helper/MapHelper.java",
        "class": "MapHelper",
        "name": "newInstance",
        "return_type": "MapHelper",
        "modifiers": "public static",
        "parameters": [],
        "raw": "public static MapHelper newInstance(){\n  return new MapHelper();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/helper/MapHelper.java",
        "class": "MapHelper",
        "name": "parser",
        "return_type": "Map\u003cString,Object\u003e",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "String",
                "name": "json"
            }
        ],
        "raw": "public static Map\u003cString,Object\u003e parser(String json){\n  return Noson.convert(json,Map.class);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/helper/MapHelper.java",
        "class": "MapHelper",
        "name": "put",
        "return_type": "MapHelper",
        "modifiers": "public",
        "parameters": [
            {
                "type": "String",
                "name": "name"
            },
            {
                "type": "Object",
                "name": "Object"
            }
        ],
        "raw": "public MapHelper put(String name,Object Object){\n  this.data.put(name,Object);\n  return this;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/helper/MapHelper.java",
        "class": "MapHelper",
        "name": "json",
        "return_type": "String",
        "modifiers": "public",
        "parameters": [],
        "raw": "public String json(){\n  return Noson.reversal(data);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/helper/MapHelper.java",
        "class": "MapHelper",
        "name": "map",
        "return_type": "Map\u003cString,Object\u003e",
        "modifiers": "public",
        "parameters": [],
        "raw": "public Map\u003cString,Object\u003e map(){\n  return data;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/helper/PokerHelper.java",
        "class": "PokerHelper",
        "name": "sortPoker",
        "return_type": "void",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "List\u003cPoker\u003e",
                "name": "pokers"
            }
        ],
        "raw": "public static void sortPoker(List\u003cPoker\u003e pokers){\n  pokers.sort(pokerComparator);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/helper/PokerHelper.java",
        "class": "PokerHelper",
        "name": "clonePokers",
        "return_type": "List\u003cPoker\u003e",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "List\u003cPoker\u003e",
                "name": "pokers"
            }
        ],
        "raw": "public static List\u003cPoker\u003e clonePokers(List\u003cPoker\u003e pokers){\n  List\u003cPoker\u003e newPokers\u003dnew ArrayList\u003cPoker\u003e(pokers.size());\n  for (  Poker poker : pokers) {\n    newPokers.add(new Poker(poker.getLevel(),poker.getType()));\n  }\n  return newPokers;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/helper/PokerHelper.java",
        "class": "PokerHelper",
        "name": "validSells",
        "return_type": "List\u003cPokerSell\u003e",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "PokerSell",
                "name": "lastPokerSell"
            },
            {
                "type": "List\u003cPoker\u003e",
                "name": "pokers"
            }
        ],
        "raw": "public static List\u003cPokerSell\u003e validSells(PokerSell lastPokerSell,List\u003cPoker\u003e pokers){\n  List\u003cPokerSell\u003e sells\u003dPokerHelper.parsePokerSells(pokers);\n  if (lastPokerSell \u003d\u003d null) {\n    return sells;\n  }\n  List\u003cPokerSell\u003e validSells\u003dnew ArrayList\u003cPokerSell\u003e();\n  for (  PokerSell sell : sells) {\n    if (sell.getSellType() \u003d\u003d lastPokerSell.getSellType()) {\n      if (sell.getScore() \u003e lastPokerSell.getScore() \u0026\u0026 sell.getSellPokers().size() \u003d\u003d lastPokerSell.getSellPokers().size()) {\n        validSells.add(sell);\n      }\n    }\n    if (sell.getSellType() \u003d\u003d SellType.KING_BOMB) {\n      validSells.add(sell);\n    }\n  }\n  if (lastPokerSell.getSellType() !\u003d SellType.BOMB) {\n    for (    PokerSell sell : sells) {\n      if (sell.getSellType() \u003d\u003d SellType.BOMB) {\n        validSells.add(sell);\n      }\n    }\n  }\n  return validSells;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/helper/PokerHelper.java",
        "class": "PokerHelper",
        "name": "getIndexes",
        "return_type": "int[]",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "Character[]",
                "name": "options"
            },
            {
                "type": "List\u003cPoker\u003e",
                "name": "pokers"
            }
        ],
        "raw": "public static int[] getIndexes(Character[] options,List\u003cPoker\u003e pokers){\n  List\u003cPoker\u003e copyList\u003dnew ArrayList\u003c\u003e(pokers.size());\n  copyList.addAll(pokers);\n  int[] indexes\u003dnew int[options.length];\n  for (int index\u003d0; index \u003c options.length; index++) {\n    char option\u003doptions[index];\n    boolean isTarget\u003dfalse;\n    for (int pi\u003d0; pi \u003c copyList.size(); pi++) {\n      Poker poker\u003dcopyList.get(pi);\n      if (poker \u003d\u003d null) {\n        continue;\n      }\n      if (Arrays.asList(poker.getLevel().getAlias()).contains(option)) {\n        isTarget\u003dtrue;\n        indexes[index]\u003dpi + 1;\n        copyList.set(pi,null);\n        break;\n      }\n    }\n    if (!isTarget) {\n      return null;\n    }\n  }\n  Arrays.sort(indexes);\n  return indexes;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/helper/PokerHelper.java",
        "class": "PokerHelper",
        "name": "checkPokerIndex",
        "return_type": "boolean",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "int[]",
                "name": "indexes"
            },
            {
                "type": "List\u003cPoker\u003e",
                "name": "pokers"
            }
        ],
        "raw": "public static boolean checkPokerIndex(int[] indexes,List\u003cPoker\u003e pokers){\n  if (indexes \u003d\u003d null || indexes.length \u003d\u003d 0) {\n    return false;\n  }\n  for (  int index : indexes) {\n    if (index \u003e pokers.size() || index \u003c 1) {\n      return false;\n    }\n  }\n  return true;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/helper/PokerHelper.java",
        "class": "PokerHelper",
        "name": "checkPokerType",
        "return_type": "PokerSell",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "List\u003cPoker\u003e",
                "name": "pokers"
            }
        ],
        "raw": "public static PokerSell checkPokerType(List\u003cPoker\u003e pokers){\n  if (pokers \u003d\u003d null || pokers.isEmpty()) {\n    return new PokerSell(SellType.ILLEGAL,null,-1);\n  }\n  sortPoker(pokers);\n  int[] levelTable\u003dnew int[20];\n  for (  Poker poker : pokers) {\n    levelTable[poker.getLevel().getLevel()]++;\n  }\n  int startIndex\u003d-1;\n  int endIndex\u003d-1;\n  int count\u003d0;\n  int singleCount\u003d0;\n  int doubleCount\u003d0;\n  int threeCount\u003d0;\n  int threeStartIndex\u003d-1;\n  int threeEndIndex\u003d-1;\n  int fourCount\u003d0;\n  int fourStartIndex\u003d-1;\n  int fourEndIndex\u003d-1;\n  for (int index\u003d0; index \u003c levelTable.length; index++) {\n    int value\u003dlevelTable[index];\n    if (value \u003d\u003d 0) {\n      continue;\n    }\n    endIndex\u003dindex;\n    count++;\n    if (startIndex \u003d\u003d -1) {\n      startIndex\u003dindex;\n    }\n    if (value \u003d\u003d 1) {\n      singleCount++;\n    }\n else     if (value \u003d\u003d 2) {\n      doubleCount++;\n    }\n else     if (value \u003d\u003d 3) {\n      if (threeStartIndex \u003d\u003d -1) {\n        threeStartIndex\u003dindex;\n      }\n      threeEndIndex\u003dindex;\n      threeCount++;\n    }\n else     if (value \u003d\u003d 4) {\n      if (fourStartIndex \u003d\u003d -1) {\n        fourStartIndex\u003dindex;\n      }\n      fourEndIndex\u003dindex;\n      fourCount++;\n    }\n  }\n  if (singleCount \u003d\u003d doubleCount \u0026\u0026 singleCount \u003d\u003d threeCount \u0026\u0026 singleCount \u003d\u003d 0 \u0026\u0026 fourCount \u003d\u003d 1) {\n    return new PokerSell(SellType.BOMB,pokers,startIndex);\n  }\n  if (singleCount \u003d\u003d 2 \u0026\u0026 startIndex \u003d\u003d PokerLevel.LEVEL_SMALL_KING.getLevel() \u0026\u0026 endIndex \u003d\u003d PokerLevel.LEVEL_BIG_KING.getLevel()) {\n    return new PokerSell(SellType.KING_BOMB,pokers,PokerLevel.LEVEL_SMALL_KING.getLevel());\n  }\n  if (startIndex \u003d\u003d endIndex) {\n    if (levelTable[startIndex] \u003d\u003d 1) {\n      return new PokerSell(SellType.SINGLE,pokers,startIndex);\n    }\n else     if (levelTable[startIndex] \u003d\u003d 2) {\n      return new PokerSell(SellType.DOUBLE,pokers,startIndex);\n    }\n else     if (levelTable[startIndex] \u003d\u003d 3) {\n      return new PokerSell(SellType.THREE,pokers,startIndex);\n    }\n  }\n  if (endIndex - startIndex \u003d\u003d count - 1 \u0026\u0026 endIndex \u003c PokerLevel.LEVEL_2.getLevel()) {\n    if (levelTable[startIndex] \u003d\u003d 1 \u0026\u0026 singleCount \u003e 4 \u0026\u0026 doubleCount + threeCount + fourCount \u003d\u003d 0) {\n      return new PokerSell(SellType.SINGLE_STRAIGHT,pokers,endIndex);\n    }\n else     if (levelTable[startIndex] \u003d\u003d 2 \u0026\u0026 doubleCount \u003e 2 \u0026\u0026 singleCount + threeCount + fourCount \u003d\u003d 0) {\n      return new PokerSell(SellType.DOUBLE_STRAIGHT,pokers,endIndex);\n    }\n else     if (levelTable[startIndex] \u003d\u003d 3 \u0026\u0026 threeCount \u003e 1 \u0026\u0026 doubleCount + singleCount + fourCount \u003d\u003d 0) {\n      return new PokerSell(SellType.THREE_STRAIGHT,pokers,endIndex);\n    }\n else     if (levelTable[startIndex] \u003d\u003d 4 \u0026\u0026 fourCount \u003e 1 \u0026\u0026 doubleCount + threeCount + singleCount \u003d\u003d 0) {\n      return new PokerSell(SellType.FOUR_STRAIGHT,pokers,endIndex);\n    }\n  }\n  if (threeCount !\u003d 0) {\n    if (singleCount !\u003d 0 \u0026\u0026 singleCount \u003d\u003d threeCount \u0026\u0026 doubleCount \u003d\u003d 0 \u0026\u0026 fourCount \u003d\u003d 0) {\n      if (threeCount \u003d\u003d 1) {\n        return new PokerSell(SellType.THREE_ZONES_SINGLE,pokers,threeEndIndex);\n      }\n      if (threeEndIndex - threeStartIndex + 1 \u003d\u003d threeCount \u0026\u0026 threeEndIndex \u003c PokerLevel.LEVEL_2.getLevel()) {\n        return new PokerSell(SellType.THREE_STRAIGHT_WITH_SINGLE,pokers,threeEndIndex);\n      }\n    }\n else     if (doubleCount !\u003d 0 \u0026\u0026 doubleCount \u003d\u003d threeCount \u0026\u0026 singleCount \u003d\u003d 0 \u0026\u0026 fourCount \u003d\u003d 0) {\n      if (threeCount \u003d\u003d 1) {\n        return new PokerSell(SellType.THREE_ZONES_DOUBLE,pokers,threeEndIndex);\n      }\n      if (threeEndIndex - threeStartIndex + 1 \u003d\u003d threeCount \u0026\u0026 threeEndIndex \u003c PokerLevel.LEVEL_2.getLevel()) {\n        return new PokerSell(SellType.THREE_STRAIGHT_WITH_DOUBLE,pokers,threeEndIndex);\n      }\n    }\n else     if (singleCount + doubleCount * 2 \u003d\u003d threeCount \u0026\u0026 fourCount \u003d\u003d 0) {\n      return new PokerSell(SellType.THREE_STRAIGHT_WITH_SINGLE,pokers,threeEndIndex);\n    }\n  }\n  if (fourCount !\u003d 0) {\n    if (singleCount !\u003d 0 \u0026\u0026 singleCount \u003d\u003d fourCount * 2 \u0026\u0026 doubleCount \u003d\u003d 0 \u0026\u0026 threeCount \u003d\u003d 0) {\n      if (fourCount \u003d\u003d 1) {\n        return new PokerSell(SellType.FOUR_ZONES_SINGLE,pokers,fourEndIndex);\n      }\n      if (fourEndIndex - fourStartIndex + 1 \u003d\u003d fourCount \u0026\u0026 fourEndIndex \u003c PokerLevel.LEVEL_2.getLevel()) {\n        return new PokerSell(SellType.FOUR_STRAIGHT_WITH_SINGLE,pokers,fourEndIndex);\n      }\n    }\n else     if (doubleCount !\u003d 0 \u0026\u0026 doubleCount \u003d\u003d fourCount * 2 \u0026\u0026 singleCount \u003d\u003d 0 \u0026\u0026 threeCount \u003d\u003d 0) {\n      if (fourCount \u003d\u003d 1) {\n        return new PokerSell(SellType.FOUR_ZONES_DOUBLE,pokers,fourEndIndex);\n      }\n      if (fourEndIndex - fourStartIndex + 1 \u003d\u003d fourCount \u0026\u0026 fourEndIndex \u003c PokerLevel.LEVEL_2.getLevel()) {\n        return new PokerSell(SellType.FOUR_STRAIGHT_WITH_DOUBLE,pokers,fourEndIndex);\n      }\n    }\n  }\n  return new PokerSell(SellType.ILLEGAL,null,-1);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/helper/PokerHelper.java",
        "class": "PokerHelper",
        "name": "parseScore",
        "return_type": "int",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "SellType",
                "name": "sellType"
            },
            {
                "type": "int",
                "name": "level"
            }
        ],
        "raw": "public static int parseScore(SellType sellType,int level){\n  if (sellType \u003d\u003d SellType.BOMB) {\n    return level * 4 + 999;\n  }\n else   if (sellType \u003d\u003d SellType.KING_BOMB) {\n    return Integer.MAX_VALUE;\n  }\n else   if (sellType \u003d\u003d SellType.SINGLE || sellType \u003d\u003d SellType.DOUBLE || sellType \u003d\u003d SellType.THREE) {\n    return level;\n  }\n else   if (sellType \u003d\u003d SellType.SINGLE_STRAIGHT || sellType \u003d\u003d SellType.DOUBLE_STRAIGHT || sellType \u003d\u003d SellType.THREE_STRAIGHT || sellType \u003d\u003d SellType.FOUR_STRAIGHT) {\n    return level;\n  }\n else   if (sellType \u003d\u003d SellType.THREE_ZONES_SINGLE || sellType \u003d\u003d SellType.THREE_STRAIGHT_WITH_SINGLE || sellType \u003d\u003d SellType.THREE_ZONES_DOUBLE || sellType \u003d\u003d SellType.THREE_STRAIGHT_WITH_DOUBLE) {\n    return level;\n  }\n else   if (sellType \u003d\u003d SellType.FOUR_ZONES_SINGLE || sellType \u003d\u003d SellType.FOUR_STRAIGHT_WITH_SINGLE || sellType \u003d\u003d SellType.FOUR_ZONES_DOUBLE || sellType \u003d\u003d SellType.FOUR_STRAIGHT_WITH_DOUBLE) {\n    return level;\n  }\n  return -1;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/helper/PokerHelper.java",
        "class": "PokerHelper",
        "name": "getPoker",
        "return_type": "List\u003cPoker\u003e",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "int[]",
                "name": "indexes"
            },
            {
                "type": "List\u003cPoker\u003e",
                "name": "pokers"
            }
        ],
        "raw": "public static List\u003cPoker\u003e getPoker(int[] indexes,List\u003cPoker\u003e pokers){\n  List\u003cPoker\u003e resultPokers\u003dnew ArrayList\u003c\u003e(indexes.length);\n  for (  int index : indexes) {\n    resultPokers.add(pokers.get(index - 1));\n  }\n  sortPoker(resultPokers);\n  return resultPokers;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/helper/PokerHelper.java",
        "class": "PokerHelper",
        "name": "comparePoker",
        "return_type": "boolean",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "List\u003cPoker\u003e",
                "name": "pres"
            },
            {
                "type": "List\u003cPoker\u003e",
                "name": "currents"
            }
        ],
        "raw": "public static boolean comparePoker(List\u003cPoker\u003e pres,List\u003cPoker\u003e currents){\n  return true;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/helper/PokerHelper.java",
        "class": "PokerHelper",
        "name": "distributePoker",
        "return_type": "List\u003cList\u003cPoker\u003e\u003e",
        "modifiers": "public static",
        "parameters": [],
        "raw": "public static List\u003cList\u003cPoker\u003e\u003e distributePoker(){\n  Collections.shuffle(basePokers);\n  List\u003cList\u003cPoker\u003e\u003e pokersList\u003dnew ArrayList\u003cList\u003cPoker\u003e\u003e();\n  List\u003cPoker\u003e pokers1\u003dnew ArrayList\u003c\u003e(17);\n  pokers1.addAll(basePokers.subList(0,17));\n  List\u003cPoker\u003e pokers2\u003dnew ArrayList\u003c\u003e(17);\n  pokers2.addAll(basePokers.subList(17,34));\n  List\u003cPoker\u003e pokers3\u003dnew ArrayList\u003c\u003e(17);\n  pokers3.addAll(basePokers.subList(34,51));\n  List\u003cPoker\u003e pokers4\u003dnew ArrayList\u003c\u003e(3);\n  pokers4.addAll(basePokers.subList(51,54));\n  pokersList.add(pokers1);\n  pokersList.add(pokers2);\n  pokersList.add(pokers3);\n  pokersList.add(pokers4);\n  for (  List\u003cPoker\u003e pokers : pokersList) {\n    sortPoker(pokers);\n  }\n  return pokersList;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/helper/PokerHelper.java",
        "class": "PokerHelper",
        "name": "printPoker",
        "return_type": "String",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "List\u003cPoker\u003e",
                "name": "pokers"
            }
        ],
        "raw": "public static String printPoker(List\u003cPoker\u003e pokers){\n  sortPoker(pokers);\nswitch (pokerPrinterType) {\ncase 0:\n    return buildHandStringSharp(pokers);\ncase 1:\n  return buildHandStringRounded(pokers);\ncase 2:\nreturn textOnly(pokers);\ncase 3:\nreturn textOnlyNoType(pokers);\ndefault :\nreturn buildHandStringSharp(pokers);\n}\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/helper/PokerHelper.java",
        "class": "PokerHelper",
        "name": "buildHandStringSharp",
        "return_type": "String",
        "modifiers": "private static",
        "parameters": [
            {
                "type": "List\u003cPoker\u003e",
                "name": "pokers"
            }
        ],
        "raw": "private static String buildHandStringSharp(List\u003cPoker\u003e pokers){\n  StringBuilder builder\u003dnew StringBuilder();\n  if (pokers !\u003d null \u0026\u0026 pokers.size() \u003e 0) {\n    for (int index\u003d0; index \u003c pokers.size(); index++) {\n      if (index \u003d\u003d 0) {\n        builder.append(\"┌──┐\");\n      }\n else {\n        builder.append(\"──┐\");\n      }\n    }\n    builder.append(System.lineSeparator());\n    for (int index\u003d0; index \u003c pokers.size(); index++) {\n      if (index \u003d\u003d 0) {\n        builder.append(\"│\");\n      }\n      String name\u003dpokers.get(index).getLevel().getName();\n      builder.append(name).append(name.length() \u003d\u003d 1 ? \" \" : \"\").append(\"|\");\n    }\n    builder.append(System.lineSeparator());\n    for (int index\u003d0; index \u003c pokers.size(); index++) {\n      if (index \u003d\u003d 0) {\n        builder.append(\"│\");\n      }\n      builder.append(pokers.get(index).getType().getName()).append(\" |\");\n    }\n    builder.append(System.lineSeparator());\n    for (int index\u003d0; index \u003c pokers.size(); index++) {\n      if (index \u003d\u003d 0) {\n        builder.append(\"└──┘\");\n      }\n else {\n        builder.append(\"──┘\");\n      }\n    }\n  }\n  return builder.toString();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/helper/PokerHelper.java",
        "class": "PokerHelper",
        "name": "buildHandStringRounded",
        "return_type": "String",
        "modifiers": "private static",
        "parameters": [
            {
                "type": "List\u003cPoker\u003e",
                "name": "pokers"
            }
        ],
        "raw": "private static String buildHandStringRounded(List\u003cPoker\u003e pokers){\n  StringBuilder builder\u003dnew StringBuilder();\n  if (pokers !\u003d null \u0026\u0026 pokers.size() \u003e 0) {\n    for (int index\u003d0; index \u003c pokers.size(); index++) {\n      if (index \u003d\u003d 0) {\n        builder.append(\"┌──╮\");\n      }\n else {\n        builder.append(\"──╮\");\n      }\n    }\n    builder.append(System.lineSeparator());\n    for (int index\u003d0; index \u003c pokers.size(); index++) {\n      if (index \u003d\u003d 0) {\n        builder.append(\"│\");\n      }\n      String name\u003dpokers.get(index).getLevel().getName();\n      builder.append(name).append(name.length() \u003d\u003d 1 ? \" \" : \"\").append(\"|\");\n    }\n    builder.append(System.lineSeparator());\n    for (int index\u003d0; index \u003c pokers.size(); index++) {\n      if (index \u003d\u003d 0) {\n        builder.append(\"│\");\n      }\n      builder.append(pokers.get(index).getType().getName()).append(\" |\");\n    }\n    builder.append(System.lineSeparator());\n    for (int index\u003d0; index \u003c pokers.size(); index++) {\n      if (index \u003d\u003d 0) {\n        builder.append(\"└──╯\");\n      }\n else {\n        builder.append(\"──╯\");\n      }\n    }\n  }\n  return builder.toString();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/helper/PokerHelper.java",
        "class": "PokerHelper",
        "name": "textOnly",
        "return_type": "String",
        "modifiers": "private static",
        "parameters": [
            {
                "type": "List\u003cPoker\u003e",
                "name": "pokers"
            }
        ],
        "raw": "private static String textOnly(List\u003cPoker\u003e pokers){\n  StringBuilder builder\u003dnew StringBuilder();\n  if (pokers !\u003d null \u0026\u0026 pokers.size() \u003e 0) {\n    for (    Poker poker : pokers) {\n      String name\u003dpoker.getLevel().getName();\n      String type\u003dpoker.getType().getName();\n      builder.append(name).append(type);\n    }\n  }\n  return builder.toString();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/helper/PokerHelper.java",
        "class": "PokerHelper",
        "name": "textOnlyNoType",
        "return_type": "String",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "List\u003cPoker\u003e",
                "name": "pokers"
            }
        ],
        "raw": "public static String textOnlyNoType(List\u003cPoker\u003e pokers){\n  StringBuilder builder\u003dnew StringBuilder();\n  if (pokers !\u003d null \u0026\u0026 pokers.size() \u003e 0) {\n    for (    Poker poker : pokers) {\n      String name\u003dpoker.getLevel().getName();\n      builder.append(name).append(\" \");\n    }\n  }\n  return builder.toString();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/helper/PokerHelper.java",
        "class": "PokerHelper",
        "name": "parsePokerColligationScore",
        "return_type": "int",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "List\u003cPoker\u003e",
                "name": "pokers"
            }
        ],
        "raw": "public static int parsePokerColligationScore(List\u003cPoker\u003e pokers){\n  int score\u003d0;\n  int count\u003d0;\n  int increase\u003d0;\n  int lastLevel\u003d-1;\n  if (pokers !\u003d null \u0026\u0026 !pokers.isEmpty()) {\n    for (int index\u003d0; index \u003c pokers.size(); index++) {\n      int level\u003dpokers.get(index).getLevel().getLevel();\n      if (lastLevel \u003d\u003d -1) {\n        increase++;\n        count++;\n        score+\u003dlastLevel;\n      }\n else {\n        if (level \u003d\u003d lastLevel) {\n          ++count;\n        }\n else {\n          count\u003d1;\n        }\n        if (level \u003c PokerLevel.LEVEL_2.getLevel() \u0026\u0026 level - 1 \u003d\u003d lastLevel) {\n          ++increase;\n        }\n else {\n          increase\u003d1;\n        }\n        score+\u003d(count + (increase \u003e 4 ? increase : 0)) * level;\n      }\n      if (level \u003d\u003d PokerLevel.LEVEL_2.getLevel()) {\n        score+\u003dlevel * 2;\n      }\n else       if (level \u003e PokerLevel.LEVEL_2.getLevel()) {\n        score+\u003dlevel * 3;\n      }\n      lastLevel\u003dlevel;\n    }\n  }\n  return score;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/helper/PokerHelper.java",
        "class": "PokerHelper",
        "name": "parsePokerSells",
        "return_type": "List\u003cPokerSell\u003e",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "List\u003cPoker\u003e",
                "name": "pokers"
            }
        ],
        "raw": "public static List\u003cPokerSell\u003e parsePokerSells(List\u003cPoker\u003e pokers){\n  List\u003cPokerSell\u003e pokerSells\u003dnew ArrayList\u003c\u003e();\n  int size\u003dpokers.size();\n{\n    int count\u003d0;\n    int lastLevel\u003d-1;\n    List\u003cPoker\u003e sellPokers\u003dnew ArrayList\u003c\u003e(4);\n    for (    Poker poker : pokers) {\n      int level\u003dpoker.getLevel().getLevel();\n      if (lastLevel \u003d\u003d -1) {\n        ++count;\n      }\n else {\n        if (level \u003d\u003d lastLevel) {\n          ++count;\n        }\n else {\n          count\u003d1;\n          sellPokers.clear();\n        }\n      }\n      sellPokers.add(poker);\n      if (count \u003d\u003d 1) {\n        pokerSells.add(new PokerSell(SellType.SINGLE,ListUtils.getList(sellPokers),poker.getLevel().getLevel()));\n      }\n else       if (count \u003d\u003d 2) {\n        pokerSells.add(new PokerSell(SellType.DOUBLE,ListUtils.getList(sellPokers),poker.getLevel().getLevel()));\n      }\n else       if (count \u003d\u003d 3) {\n        pokerSells.add(new PokerSell(SellType.THREE,ListUtils.getList(sellPokers),poker.getLevel().getLevel()));\n      }\n else       if (count \u003d\u003d 4) {\n        pokerSells.add(new PokerSell(SellType.BOMB,ListUtils.getList(sellPokers),poker.getLevel().getLevel()));\n      }\n      lastLevel\u003dlevel;\n    }\n  }\n{\n    parsePokerSellStraight(pokerSells,SellType.SINGLE);\n    parsePokerSellStraight(pokerSells,SellType.DOUBLE);\n    parsePokerSellStraight(pokerSells,SellType.THREE);\n    parsePokerSellStraight(pokerSells,SellType.BOMB);\n  }\n{\n    for (int index\u003d0; index \u003c pokerSells.size(); index++) {\n      PokerSell sell\u003dpokerSells.get(index);\n      if (sell.getSellType() \u003d\u003d SellType.THREE) {\n        parseArgs(pokerSells,sell,1,SellType.SINGLE,SellType.THREE_ZONES_SINGLE);\n        parseArgs(pokerSells,sell,1,SellType.DOUBLE,SellType.THREE_ZONES_DOUBLE);\n      }\n else       if (sell.getSellType() \u003d\u003d SellType.BOMB) {\n        parseArgs(pokerSells,sell,2,SellType.SINGLE,SellType.FOUR_ZONES_SINGLE);\n        parseArgs(pokerSells,sell,2,SellType.DOUBLE,SellType.FOUR_ZONES_DOUBLE);\n      }\n else       if (sell.getSellType() \u003d\u003d SellType.THREE_STRAIGHT) {\n        int count\u003dsell.getSellPokers().size() / 3;\n        parseArgs(pokerSells,sell,count,SellType.SINGLE,SellType.THREE_STRAIGHT_WITH_SINGLE);\n        parseArgs(pokerSells,sell,count,SellType.DOUBLE,SellType.THREE_STRAIGHT_WITH_DOUBLE);\n      }\n else       if (sell.getSellType() \u003d\u003d SellType.FOUR_STRAIGHT) {\n        int count\u003d(sell.getSellPokers().size() / 4) * 2;\n        parseArgs(pokerSells,sell,count,SellType.SINGLE,SellType.FOUR_STRAIGHT_WITH_SINGLE);\n        parseArgs(pokerSells,sell,count,SellType.DOUBLE,SellType.FOUR_STRAIGHT_WITH_DOUBLE);\n      }\n    }\n  }\n{\n    if (size \u003e 1) {\n      if (pokers.get(size - 1).getLevel() \u003d\u003d PokerLevel.LEVEL_BIG_KING \u0026\u0026 pokers.get(size - 2).getLevel() \u003d\u003d PokerLevel.LEVEL_SMALL_KING) {\n        pokerSells.add(new PokerSell(SellType.KING_BOMB,ListUtils.getList(new Poker[]{pokers.get(size - 2),pokers.get(size - 1)}),PokerLevel.LEVEL_BIG_KING.getLevel()));\n      }\n    }\n  }\n  return pokerSells;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/helper/PokerHelper.java",
        "class": "PokerHelper",
        "name": "parseArgs",
        "return_type": "void",
        "modifiers": "private static",
        "parameters": [
            {
                "type": "List\u003cPokerSell\u003e",
                "name": "pokerSells"
            },
            {
                "type": "PokerSell",
                "name": "pokerSell"
            },
            {
                "type": "int",
                "name": "deep"
            },
            {
                "type": "SellType",
                "name": "sellType"
            },
            {
                "type": "SellType",
                "name": "targetSellType"
            }
        ],
        "raw": "private static void parseArgs(List\u003cPokerSell\u003e pokerSells,PokerSell pokerSell,int deep,SellType sellType,SellType targetSellType){\n  Set\u003cInteger\u003e existLevelSet\u003dnew HashSet\u003c\u003e();\n  for (  Poker p : pokerSell.getSellPokers()) {\n    existLevelSet.add(p.getLevel().getLevel());\n  }\n  parseArgs(existLevelSet,pokerSells,new HashSet\u003c\u003e(),pokerSell,deep,sellType,targetSellType);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/helper/PokerHelper.java",
        "class": "PokerHelper",
        "name": "parseArgs",
        "return_type": "void",
        "modifiers": "private static",
        "parameters": [
            {
                "type": "Set\u003cInteger\u003e",
                "name": "existLevelSet"
            },
            {
                "type": "List\u003cPokerSell\u003e",
                "name": "pokerSells"
            },
            {
                "type": "Set\u003cList\u003cPoker\u003e\u003e",
                "name": "pokersList"
            },
            {
                "type": "PokerSell",
                "name": "pokerSell"
            },
            {
                "type": "int",
                "name": "deep"
            },
            {
                "type": "SellType",
                "name": "sellType"
            },
            {
                "type": "SellType",
                "name": "targetSellType"
            }
        ],
        "raw": "private static void parseArgs(Set\u003cInteger\u003e existLevelSet,List\u003cPokerSell\u003e pokerSells,Set\u003cList\u003cPoker\u003e\u003e pokersList,PokerSell pokerSell,int deep,SellType sellType,SellType targetSellType){\n  if (deep \u003d\u003d 0) {\n    List\u003cPoker\u003e allPokers\u003dnew ArrayList\u003c\u003e(pokerSell.getSellPokers());\n    for (    List\u003cPoker\u003e ps : pokersList) {\n      allPokers.addAll(ps);\n    }\n    pokerSells.add(new PokerSell(targetSellType,allPokers,pokerSell.getCoreLevel()));\n    return;\n  }\n  for (int index\u003d0; index \u003c pokerSells.size(); index++) {\n    PokerSell subSell\u003dpokerSells.get(index);\n    if (subSell.getSellType() \u003d\u003d sellType \u0026\u0026 !existLevelSet.contains(subSell.getCoreLevel())) {\n      pokersList.add(subSell.getSellPokers());\n      existLevelSet.add(subSell.getCoreLevel());\n      parseArgs(existLevelSet,pokerSells,pokersList,pokerSell,deep - 1,sellType,targetSellType);\n      existLevelSet.remove(subSell.getCoreLevel());\n      pokersList.remove(subSell.getSellPokers());\n    }\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/helper/PokerHelper.java",
        "class": "PokerHelper",
        "name": "parsePokerSellStraight",
        "return_type": "void",
        "modifiers": "private static",
        "parameters": [
            {
                "type": "List\u003cPokerSell\u003e",
                "name": "pokerSells"
            },
            {
                "type": "SellType",
                "name": "sellType"
            }
        ],
        "raw": "private static void parsePokerSellStraight(List\u003cPokerSell\u003e pokerSells,SellType sellType){\n  int minLength\u003d-1;\n  int width\u003d-1;\n  SellType targetSellType\u003dnull;\n  if (sellType \u003d\u003d SellType.SINGLE) {\n    minLength\u003d5;\n    width\u003d1;\n    targetSellType\u003dSellType.SINGLE_STRAIGHT;\n  }\n else   if (sellType \u003d\u003d SellType.DOUBLE) {\n    minLength\u003d3;\n    width\u003d2;\n    targetSellType\u003dSellType.DOUBLE_STRAIGHT;\n  }\n else   if (sellType \u003d\u003d SellType.THREE) {\n    minLength\u003d2;\n    width\u003d3;\n    targetSellType\u003dSellType.THREE_STRAIGHT;\n  }\n else   if (sellType \u003d\u003d SellType.BOMB) {\n    minLength\u003d2;\n    width\u003d4;\n    targetSellType\u003dSellType.FOUR_STRAIGHT;\n  }\n  int increase_1\u003d0;\n  int lastLevel_1\u003d-1;\n  List\u003cPoker\u003e sellPokers_1\u003dnew ArrayList\u003c\u003e(4);\n  for (int index\u003d0; index \u003c pokerSells.size(); index++) {\n    PokerSell sell\u003dpokerSells.get(index);\n    if (sell.getSellType() !\u003d sellType) {\n      continue;\n    }\n    int level\u003dsell.getCoreLevel();\n    if (lastLevel_1 \u003d\u003d -1) {\n      ++increase_1;\n    }\n else {\n      if (level - 1 \u003d\u003d lastLevel_1 \u0026\u0026 level !\u003d PokerLevel.LEVEL_2.getLevel()) {\n        ++increase_1;\n      }\n else {\n        addPokers(pokerSells,minLength,width,targetSellType,increase_1,sellPokers_1);\n        increase_1\u003d1;\n      }\n    }\n    sellPokers_1.addAll(sell.getSellPokers());\n    lastLevel_1\u003dlevel;\n  }\n  addPokers(pokerSells,minLength,width,targetSellType,increase_1,sellPokers_1);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/main/java/org/nico/ratel/landlords/helper/PokerHelper.java",
        "class": "PokerHelper",
        "name": "addPokers",
        "return_type": "void",
        "modifiers": "private static",
        "parameters": [
            {
                "type": "List\u003cPokerSell\u003e",
                "name": "pokerSells"
            },
            {
                "type": "int",
                "name": "minLenght"
            },
            {
                "type": "int",
                "name": "width"
            },
            {
                "type": "SellType",
                "name": "targetSellType"
            },
            {
                "type": "int",
                "name": "increase_1"
            },
            {
                "type": "List\u003cPoker\u003e",
                "name": "sellPokers_1"
            }
        ],
        "raw": "private static void addPokers(List\u003cPokerSell\u003e pokerSells,int minLenght,int width,SellType targetSellType,int increase_1,List\u003cPoker\u003e sellPokers_1){\n  if (increase_1 \u003e\u003d minLenght) {\n    for (int s\u003d0; s \u003c\u003d increase_1 - minLenght; s++) {\n      int len\u003dminLenght + s;\n      for (int subIndex\u003d0; subIndex \u003c\u003d increase_1 - len; subIndex++) {\n        List\u003cPoker\u003e pokers\u003dListUtils.getList(sellPokers_1.subList(subIndex * width,(subIndex + len) * width));\n        pokerSells.add(new PokerSell(targetSellType,pokers,pokers.get(pokers.size() - 1).getLevel().getLevel()));\n      }\n    }\n  }\n  sellPokers_1.clear();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/test/java/org/nico/ratel/landlords/robot/tests/MediumRobotDecisionMakersTests.java",
        "class": "MediumRobotDecisionMakersTests",
        "name": "buildPokers",
        "return_type": "List\u003cPoker\u003e",
        "modifiers": "private",
        "parameters": [
            {
                "type": "Object[]",
                "name": "values"
            }
        ],
        "raw": "private List\u003cPoker\u003e buildPokers(Object[] values){\n  List\u003cPoker\u003e pokers\u003dnew ArrayList\u003cPoker\u003e();\n  for (  Object v : values) {\n    if (v \u003d\u003d null) {\n      continue;\n    }\n    if (v instanceof String) {\n      pokers.add(new Poker(PokerLevel.parseByName((String)v),PokerType.CLUB));\n    }\n else     if (v instanceof Integer || v.getClass() \u003d\u003d int.class) {\n      pokers.add(new Poker(PokerLevel.parseByLevel((int)v),PokerType.CLUB));\n    }\n  }\n  return pokers;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/test/java/org/nico/ratel/landlords/robot/tests/MediumRobotDecisionMakersTests.java",
        "class": "MediumRobotDecisionMakersTests",
        "name": "testMedium_1",
        "return_type": "void",
        "modifiers": "@Test public",
        "parameters": [],
        "raw": "@Test public void testMedium_1(){\n  ClientSide self\u003dnew ClientSide();\n  ClientSide right\u003dnew ClientSide();\n  ClientSide left\u003dnew ClientSide();\n  self.setPre(left);\n  self.setNext(right);\n  left.setPre(right);\n  left.setNext(self);\n  right.setPre(self);\n  right.setNext(left);\n  self.setPokers(buildPokers(new Object[]{3,3,3,4,4,4,5,6,8,8,11,12,13,13,14,15,15}));\n  right.setPokers(buildPokers(new Object[]{3,4,5,6,7,9,9,11,11,12,12,12,14,16}));\n  left.setPokers(buildPokers(new Object[]{6,6,7,7,7,8,8,9,9,10,10,10,10,11,13,14,14,17}));\n  MediumRobotDecisionMakers mediumRobot\u003dnew MediumRobotDecisionMakers();\n  PokerSell lastSell\u003dPokerHelper.checkPokerType(buildPokers(new Object[]{5,5}));\n  PokerSell sell\u003dmediumRobot.howToPlayPokers(lastSell,self);\n  if (sell \u003d\u003d null) {\n    System.out.println(\"打不起\");\n  }\n else {\n    System.out.println(PokerHelper.printPoker(sell.getSellPokers()));\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/test/java/org/nico/ratel/landlords/helper/tests/PokerHelperTest.java",
        "class": "PokerHelperTest",
        "name": "setUp",
        "return_type": "void",
        "modifiers": "@Before public",
        "parameters": [],
        "raw": "@Before public void setUp(){\n  pokers.add(new Poker(PokerLevel.LEVEL_3,PokerType.BLANK));\n  pokers.add(new Poker(PokerLevel.LEVEL_4,PokerType.DIAMOND));\n  pokers.add(new Poker(PokerLevel.LEVEL_4,PokerType.DIAMOND));\n  pokers.add(new Poker(PokerLevel.LEVEL_5,PokerType.CLUB));\n  pokers.add(new Poker(PokerLevel.LEVEL_5,PokerType.CLUB));\n  pokers.add(new Poker(PokerLevel.LEVEL_5,PokerType.CLUB));\n  pokers.add(new Poker(PokerLevel.LEVEL_7,PokerType.SPADE));\n  pokers.add(new Poker(PokerLevel.LEVEL_7,PokerType.HEART));\n  pokers.add(new Poker(PokerLevel.LEVEL_7,PokerType.HEART));\n  pokers.add(new Poker(PokerLevel.LEVEL_7,PokerType.HEART));\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/test/java/org/nico/ratel/landlords/helper/tests/PokerHelperTest.java",
        "class": "PokerHelperTest",
        "name": "testComparePoker",
        "return_type": "void",
        "modifiers": "@Test public",
        "parameters": [],
        "raw": "@Test public void testComparePoker(){\n  Assert.assertTrue(PokerHelper.comparePoker(new ArrayList\u003c\u003e(),new ArrayList\u003c\u003e()));\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/test/java/org/nico/ratel/landlords/helper/tests/PokerHelperTest.java",
        "class": "PokerHelperTest",
        "name": "testCheckPokerIndex",
        "return_type": "void",
        "modifiers": "@Test public",
        "parameters": [],
        "raw": "@Test public void testCheckPokerIndex(){\n  Assert.assertFalse(PokerHelper.checkPokerIndex(new int[]{},new ArrayList\u003c\u003e()));\n  Assert.assertFalse(PokerHelper.checkPokerIndex(new int[]{2,-4_194_302},new ArrayList\u003c\u003e()));\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/test/java/org/nico/ratel/landlords/helper/tests/PokerHelperTest.java",
        "class": "PokerHelperTest",
        "name": "testGetIndexes",
        "return_type": "void",
        "modifiers": "@Test public",
        "parameters": [],
        "raw": "@Test public void testGetIndexes(){\n  Assert.assertNull(PokerHelper.getIndexes(new Character[]{\u00273\u0027,\u00274\u0027,\u00275\u0027,\u00276\u0027,\u00277\u0027,\u00278\u0027},pokers));\n  Assert.assertNotNull(PokerHelper.getIndexes(new Character[]{},new ArrayList\u003c\u003e()));\n  Assert.assertEquals(0,PokerHelper.getIndexes(new Character[]{},new ArrayList\u003c\u003e()).length);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/test/java/org/nico/ratel/landlords/helper/tests/PokerHelperTest.java",
        "class": "PokerHelperTest",
        "name": "testGetPoker",
        "return_type": "void",
        "modifiers": "@Test public",
        "parameters": [],
        "raw": "@Test public void testGetPoker(){\n  Assert.assertEquals(PokerLevel.LEVEL_3,PokerHelper.getPoker(new int[]{1,2},pokers).get(0).getLevel());\n  Assert.assertEquals(PokerType.BLANK,PokerHelper.getPoker(new int[]{1,2},pokers).get(0).getType());\n  Assert.assertEquals(PokerLevel.LEVEL_4,PokerHelper.getPoker(new int[]{1,2},pokers).get(1).getLevel());\n  Assert.assertEquals(PokerType.DIAMOND,PokerHelper.getPoker(new int[]{1,2},pokers).get(1).getType());\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/test/java/org/nico/ratel/landlords/helper/tests/PokerHelperTest.java",
        "class": "PokerHelperTest",
        "name": "testPrintPoker",
        "return_type": "void",
        "modifiers": "@Test public",
        "parameters": [],
        "raw": "@Test public void testPrintPoker(){\n  Assert.assertNotNull(PokerHelper.printPoker(pokers));\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/test/java/org/nico/ratel/landlords/helper/tests/PokerHelperTest.java",
        "class": "PokerHelperTest",
        "name": "testDistributePoker",
        "return_type": "void",
        "modifiers": "@Test public",
        "parameters": [],
        "raw": "@Test public void testDistributePoker(){\n  Assert.assertNotNull(PokerHelper.distributePoker());\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/test/java/org/nico/ratel/landlords/helper/tests/PokerHelperTest.java",
        "class": "PokerHelperTest",
        "name": "testCheckPokerType1",
        "return_type": "void",
        "modifiers": "@Test public",
        "parameters": [],
        "raw": "@Test public void testCheckPokerType1(){\n  pokers.clear();\n  Assert.assertNull(PokerHelper.checkPokerType(pokers).getSellPokers());\n  Assert.assertEquals(-1,PokerHelper.checkPokerType(pokers).getScore());\n  Assert.assertEquals(SellType.ILLEGAL,PokerHelper.checkPokerType(pokers).getSellType());\n  pokers.add(new Poker(PokerLevel.LEVEL_SMALL_KING,PokerType.BLANK));\n  pokers.add(new Poker(PokerLevel.LEVEL_BIG_KING,PokerType.DIAMOND));\n  Assert.assertEquals(pokers,PokerHelper.checkPokerType(pokers).getSellPokers());\n  Assert.assertEquals(2147483647,PokerHelper.checkPokerType(pokers).getScore());\n  Assert.assertEquals(SellType.KING_BOMB,PokerHelper.checkPokerType(pokers).getSellType());\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/test/java/org/nico/ratel/landlords/helper/tests/PokerHelperTest.java",
        "class": "PokerHelperTest",
        "name": "testCheckPokerType2",
        "return_type": "void",
        "modifiers": "@Test public",
        "parameters": [],
        "raw": "@Test public void testCheckPokerType2(){\n  pokers.clear();\n  pokers.add(new Poker(PokerLevel.LEVEL_7,PokerType.HEART));\n  Assert.assertEquals(pokers,PokerHelper.checkPokerType(pokers).getSellPokers());\n  Assert.assertEquals(7,PokerHelper.checkPokerType(pokers).getScore());\n  Assert.assertEquals(SellType.SINGLE,PokerHelper.checkPokerType(pokers).getSellType());\n  pokers.add(new Poker(PokerLevel.LEVEL_7,PokerType.HEART));\n  Assert.assertEquals(pokers,PokerHelper.checkPokerType(pokers).getSellPokers());\n  Assert.assertEquals(7,PokerHelper.checkPokerType(pokers).getScore());\n  Assert.assertEquals(SellType.DOUBLE,PokerHelper.checkPokerType(pokers).getSellType());\n  pokers.add(new Poker(PokerLevel.LEVEL_7,PokerType.HEART));\n  Assert.assertEquals(pokers,PokerHelper.checkPokerType(pokers).getSellPokers());\n  Assert.assertEquals(7,PokerHelper.checkPokerType(pokers).getScore());\n  Assert.assertEquals(SellType.THREE,PokerHelper.checkPokerType(pokers).getSellType());\n  pokers.add(new Poker(PokerLevel.LEVEL_7,PokerType.HEART));\n  Assert.assertEquals(pokers,PokerHelper.checkPokerType(pokers).getSellPokers());\n  Assert.assertEquals(1027,PokerHelper.checkPokerType(pokers).getScore());\n  Assert.assertEquals(SellType.BOMB,PokerHelper.checkPokerType(pokers).getSellType());\n  pokers.remove(pokers.size() - 1);\n  pokers.add(new Poker(PokerLevel.LEVEL_8,PokerType.BLANK));\n  Assert.assertEquals(pokers,PokerHelper.checkPokerType(pokers).getSellPokers());\n  Assert.assertEquals(7,PokerHelper.checkPokerType(pokers).getScore());\n  Assert.assertEquals(SellType.THREE_ZONES_SINGLE,PokerHelper.checkPokerType(pokers).getSellType());\n  pokers.add(new Poker(PokerLevel.LEVEL_8,PokerType.BLANK));\n  Assert.assertEquals(pokers,PokerHelper.checkPokerType(pokers).getSellPokers());\n  Assert.assertEquals(7,PokerHelper.checkPokerType(pokers).getScore());\n  Assert.assertEquals(SellType.THREE_ZONES_DOUBLE,PokerHelper.checkPokerType(pokers).getSellType());\n  pokers.add(new Poker(PokerLevel.LEVEL_8,PokerType.BLANK));\n  pokers.add(new Poker(PokerLevel.LEVEL_9,PokerType.BLANK));\n  pokers.add(new Poker(PokerLevel.LEVEL_10,PokerType.BLANK));\n  Assert.assertEquals(pokers,PokerHelper.checkPokerType(pokers).getSellPokers());\n  Assert.assertEquals(8,PokerHelper.checkPokerType(pokers).getScore());\n  Assert.assertEquals(SellType.THREE_STRAIGHT_WITH_SINGLE,PokerHelper.checkPokerType(pokers).getSellType());\n  pokers.add(new Poker(PokerLevel.LEVEL_9,PokerType.BLANK));\n  pokers.add(new Poker(PokerLevel.LEVEL_10,PokerType.BLANK));\n  Assert.assertEquals(pokers,PokerHelper.checkPokerType(pokers).getSellPokers());\n  Assert.assertEquals(8,PokerHelper.checkPokerType(pokers).getScore());\n  Assert.assertEquals(SellType.THREE_STRAIGHT_WITH_DOUBLE,PokerHelper.checkPokerType(pokers).getSellType());\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/test/java/org/nico/ratel/landlords/helper/tests/PokerHelperTest.java",
        "class": "PokerHelperTest",
        "name": "testCheckPokerType3",
        "return_type": "void",
        "modifiers": "@Test public",
        "parameters": [],
        "raw": "@Test public void testCheckPokerType3(){\n  pokers.clear();\n  pokers.add(new Poker(PokerLevel.LEVEL_6,PokerType.HEART));\n  pokers.add(new Poker(PokerLevel.LEVEL_7,PokerType.HEART));\n  pokers.add(new Poker(PokerLevel.LEVEL_8,PokerType.HEART));\n  pokers.add(new Poker(PokerLevel.LEVEL_9,PokerType.BLANK));\n  pokers.add(new Poker(PokerLevel.LEVEL_10,PokerType.BLANK));\n  Assert.assertEquals(pokers,PokerHelper.checkPokerType(pokers).getSellPokers());\n  Assert.assertEquals(10,PokerHelper.checkPokerType(pokers).getScore());\n  Assert.assertEquals(SellType.SINGLE_STRAIGHT,PokerHelper.checkPokerType(pokers).getSellType());\n  pokers.add(new Poker(PokerLevel.LEVEL_6,PokerType.HEART));\n  pokers.add(new Poker(PokerLevel.LEVEL_7,PokerType.HEART));\n  pokers.add(new Poker(PokerLevel.LEVEL_8,PokerType.HEART));\n  pokers.add(new Poker(PokerLevel.LEVEL_9,PokerType.BLANK));\n  pokers.add(new Poker(PokerLevel.LEVEL_10,PokerType.BLANK));\n  Assert.assertEquals(pokers,PokerHelper.checkPokerType(pokers).getSellPokers());\n  Assert.assertEquals(10,PokerHelper.checkPokerType(pokers).getScore());\n  Assert.assertEquals(SellType.DOUBLE_STRAIGHT,PokerHelper.checkPokerType(pokers).getSellType());\n  pokers.add(new Poker(PokerLevel.LEVEL_6,PokerType.HEART));\n  pokers.add(new Poker(PokerLevel.LEVEL_7,PokerType.HEART));\n  pokers.add(new Poker(PokerLevel.LEVEL_8,PokerType.HEART));\n  pokers.add(new Poker(PokerLevel.LEVEL_9,PokerType.BLANK));\n  pokers.add(new Poker(PokerLevel.LEVEL_10,PokerType.BLANK));\n  Assert.assertEquals(pokers,PokerHelper.checkPokerType(pokers).getSellPokers());\n  Assert.assertEquals(10,PokerHelper.checkPokerType(pokers).getScore());\n  Assert.assertEquals(SellType.THREE_STRAIGHT,PokerHelper.checkPokerType(pokers).getSellType());\n  pokers.add(new Poker(PokerLevel.LEVEL_6,PokerType.HEART));\n  pokers.add(new Poker(PokerLevel.LEVEL_7,PokerType.HEART));\n  pokers.add(new Poker(PokerLevel.LEVEL_8,PokerType.HEART));\n  pokers.add(new Poker(PokerLevel.LEVEL_9,PokerType.BLANK));\n  pokers.add(new Poker(PokerLevel.LEVEL_10,PokerType.BLANK));\n  Assert.assertEquals(pokers,PokerHelper.checkPokerType(pokers).getSellPokers());\n  Assert.assertEquals(10,PokerHelper.checkPokerType(pokers).getScore());\n  Assert.assertEquals(SellType.FOUR_STRAIGHT,PokerHelper.checkPokerType(pokers).getSellType());\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/test/java/org/nico/ratel/landlords/helper/tests/PokerHelperTest.java",
        "class": "PokerHelperTest",
        "name": "testCheckPokerType4",
        "return_type": "void",
        "modifiers": "@Test public",
        "parameters": [],
        "raw": "@Test public void testCheckPokerType4(){\n  pokers.clear();\n  pokers.add(new Poker(PokerLevel.LEVEL_8,PokerType.HEART));\n  pokers.add(new Poker(PokerLevel.LEVEL_8,PokerType.HEART));\n  pokers.add(new Poker(PokerLevel.LEVEL_8,PokerType.HEART));\n  pokers.add(new Poker(PokerLevel.LEVEL_8,PokerType.HEART));\n  pokers.add(new Poker(PokerLevel.LEVEL_9,PokerType.BLANK));\n  pokers.add(new Poker(PokerLevel.LEVEL_10,PokerType.BLANK));\n  Assert.assertEquals(pokers,PokerHelper.checkPokerType(pokers).getSellPokers());\n  Assert.assertEquals(8,PokerHelper.checkPokerType(pokers).getScore());\n  Assert.assertEquals(SellType.FOUR_ZONES_SINGLE,PokerHelper.checkPokerType(pokers).getSellType());\n  pokers.add(new Poker(PokerLevel.LEVEL_5,PokerType.HEART));\n  pokers.add(new Poker(PokerLevel.LEVEL_6,PokerType.HEART));\n  pokers.add(new Poker(PokerLevel.LEVEL_7,PokerType.HEART));\n  pokers.add(new Poker(PokerLevel.LEVEL_7,PokerType.HEART));\n  pokers.add(new Poker(PokerLevel.LEVEL_7,PokerType.HEART));\n  pokers.add(new Poker(PokerLevel.LEVEL_7,PokerType.HEART));\n  Assert.assertEquals(pokers,PokerHelper.checkPokerType(pokers).getSellPokers());\n  Assert.assertEquals(8,PokerHelper.checkPokerType(pokers).getScore());\n  Assert.assertEquals(SellType.FOUR_STRAIGHT_WITH_SINGLE,PokerHelper.checkPokerType(pokers).getSellType());\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/test/java/org/nico/ratel/landlords/helper/tests/PokerHelperTest.java",
        "class": "PokerHelperTest",
        "name": "testCheckPokerType5",
        "return_type": "void",
        "modifiers": "@Test public",
        "parameters": [],
        "raw": "@Test public void testCheckPokerType5(){\n  pokers.clear();\n  pokers.add(new Poker(PokerLevel.LEVEL_8,PokerType.HEART));\n  pokers.add(new Poker(PokerLevel.LEVEL_8,PokerType.HEART));\n  pokers.add(new Poker(PokerLevel.LEVEL_8,PokerType.HEART));\n  pokers.add(new Poker(PokerLevel.LEVEL_8,PokerType.HEART));\n  pokers.add(new Poker(PokerLevel.LEVEL_9,PokerType.BLANK));\n  pokers.add(new Poker(PokerLevel.LEVEL_9,PokerType.BLANK));\n  pokers.add(new Poker(PokerLevel.LEVEL_10,PokerType.BLANK));\n  pokers.add(new Poker(PokerLevel.LEVEL_10,PokerType.BLANK));\n  Assert.assertEquals(pokers,PokerHelper.checkPokerType(pokers).getSellPokers());\n  Assert.assertEquals(8,PokerHelper.checkPokerType(pokers).getScore());\n  Assert.assertEquals(SellType.FOUR_ZONES_DOUBLE,PokerHelper.checkPokerType(pokers).getSellType());\n  pokers.add(new Poker(PokerLevel.LEVEL_5,PokerType.HEART));\n  pokers.add(new Poker(PokerLevel.LEVEL_5,PokerType.HEART));\n  pokers.add(new Poker(PokerLevel.LEVEL_6,PokerType.HEART));\n  pokers.add(new Poker(PokerLevel.LEVEL_6,PokerType.HEART));\n  pokers.add(new Poker(PokerLevel.LEVEL_7,PokerType.HEART));\n  pokers.add(new Poker(PokerLevel.LEVEL_7,PokerType.HEART));\n  pokers.add(new Poker(PokerLevel.LEVEL_7,PokerType.HEART));\n  pokers.add(new Poker(PokerLevel.LEVEL_7,PokerType.HEART));\n  Assert.assertEquals(pokers,PokerHelper.checkPokerType(pokers).getSellPokers());\n  Assert.assertEquals(8,PokerHelper.checkPokerType(pokers).getScore());\n  Assert.assertEquals(SellType.FOUR_STRAIGHT_WITH_DOUBLE,PokerHelper.checkPokerType(pokers).getSellType());\n}\n"
    },
    {
        "relative_path": "ratel/landlords-common/src/test/java/org/nico/ratel/landlords/helper/tests/PokerHelperTest.java",
        "class": "PokerHelperTest",
        "name": "testCheckPokerType6",
        "return_type": "void",
        "modifiers": "@Test public",
        "parameters": [],
        "raw": "@Test public void testCheckPokerType6(){\n  pokers.clear();\n  pokers.add(new Poker(PokerLevel.LEVEL_6,PokerType.HEART));\n  pokers.add(new Poker(PokerLevel.LEVEL_6,PokerType.HEART));\n  pokers.add(new Poker(PokerLevel.LEVEL_6,PokerType.HEART));\n  pokers.add(new Poker(PokerLevel.LEVEL_7,PokerType.BLANK));\n  pokers.add(new Poker(PokerLevel.LEVEL_7,PokerType.BLANK));\n  pokers.add(new Poker(PokerLevel.LEVEL_7,PokerType.BLANK));\n  pokers.add(new Poker(PokerLevel.LEVEL_8,PokerType.BLANK));\n  pokers.add(new Poker(PokerLevel.LEVEL_8,PokerType.BLANK));\n  pokers.add(new Poker(PokerLevel.LEVEL_8,PokerType.BLANK));\n  pokers.add(new Poker(PokerLevel.LEVEL_4,PokerType.BLANK));\n  pokers.add(new Poker(PokerLevel.LEVEL_4,PokerType.BLANK));\n  pokers.add(new Poker(PokerLevel.LEVEL_5,PokerType.BLANK));\n  PokerSell pokerSell\u003dPokerHelper.checkPokerType(pokers);\n  Assert.assertEquals(pokers,pokerSell.getSellPokers());\n  Assert.assertEquals(8,PokerHelper.checkPokerType(pokers).getScore());\n  Assert.assertEquals(SellType.THREE_STRAIGHT_WITH_SINGLE,pokerSell.getSellType());\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/SimpleServer.java",
        "class": "SimpleServer",
        "name": "main",
        "return_type": "void",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "String[]",
                "name": "args"
            }
        ],
        "raw": "public static void main(String[] args) throws InterruptedException {\n  if (args !\u003d null \u0026\u0026 args.length \u003e 1) {\n    if (args[0].equalsIgnoreCase(\"-p\") || args[0].equalsIgnoreCase(\"-port\")) {\n      ServerContains.port\u003dInteger.parseInt(args[1]);\n    }\n  }\n  new Thread(() -\u003e {\n    try {\n      new ProtobufProxy().start(ServerContains.port);\n    }\n catch (    InterruptedException e) {\n      e.printStackTrace();\n    }\n  }\n).start();\n  new WebsocketProxy().start(ServerContains.port + 1);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/ServerContains.java",
        "class": "ServerContains",
        "name": "getClientId",
        "return_type": "int",
        "modifiers": "public final static",
        "parameters": [],
        "raw": "public final static int getClientId(){\n  return CLIENT_ATOMIC_ID.getAndIncrement();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/ServerContains.java",
        "class": "ServerContains",
        "name": "getServerId",
        "return_type": "int",
        "modifiers": "public final static",
        "parameters": [],
        "raw": "public final static int getServerId(){\n  return SERVER_ATOMIC_ID.getAndIncrement();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/ServerContains.java",
        "class": "ServerContains",
        "name": "getRoom",
        "return_type": "Room",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "int",
                "name": "id"
            }
        ],
        "raw": "/** \n * Get room by id, with flush time\n * @param id room id\n * @return\n */\npublic static Room getRoom(int id){\n  Room room\u003dROOM_MAP.get(id);\n  if (room !\u003d null) {\n    room.setLastFlushTime(System.currentTimeMillis());\n  }\n  return room;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/ServerContains.java",
        "class": "ServerContains",
        "name": "getRoomMap",
        "return_type": "Map\u003cInteger,Room\u003e",
        "modifiers": "public static",
        "parameters": [],
        "raw": "public static Map\u003cInteger,Room\u003e getRoomMap(){\n  return ROOM_MAP;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/ServerContains.java",
        "class": "ServerContains",
        "name": "removeRoom",
        "return_type": "Room",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "int",
                "name": "id"
            }
        ],
        "raw": "public static Room removeRoom(int id){\n  return ROOM_MAP.remove(id);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/ServerContains.java",
        "class": "ServerContains",
        "name": "addRoom",
        "return_type": "Room",
        "modifiers": "public static",
        "parameters": [
            {
                "type": "Room",
                "name": "room"
            }
        ],
        "raw": "public static Room addRoom(Room room){\n  return ROOM_MAP.put(room.getId(),room);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/handler/WebsocketTransferHandler.java",
        "class": "WebsocketTransferHandler",
        "name": "channelRead0",
        "return_type": "void",
        "modifiers": "@Override protected",
        "parameters": [
            {
                "type": "ChannelHandlerContext",
                "name": "ctx"
            },
            {
                "type": "TextWebSocketFrame",
                "name": "frame"
            }
        ],
        "raw": "@Override protected void channelRead0(ChannelHandlerContext ctx,TextWebSocketFrame frame) throws Exception {\n  Msg msg\u003dJsonUtils.fromJson(frame.text(),Msg.class);\n  ServerEventCode code\u003dServerEventCode.valueOf(msg.getCode());\n  if (!Objects.equals(code,ServerEventCode.CODE_CLIENT_HEAD_BEAT)) {\n    ClientSide client\u003dServerContains.CLIENT_SIDE_MAP.get(getId(ctx.channel()));\n    SimplePrinter.serverLog(client.getId() + \" | \" + client.getNickname()+ \" do:\"+ code.getMsg());\n    ServerEventListener.get(code).call(client,msg.getData());\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/handler/WebsocketTransferHandler.java",
        "class": "WebsocketTransferHandler",
        "name": "exceptionCaught",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "ChannelHandlerContext",
                "name": "ctx"
            },
            {
                "type": "Throwable",
                "name": "cause"
            }
        ],
        "raw": "@Override public void exceptionCaught(ChannelHandlerContext ctx,Throwable cause) throws Exception {\n  if (cause instanceof java.io.IOException) {\n    clientOfflineEvent(ctx.channel());\n  }\n else {\n    SimplePrinter.serverLog(\"ERROR：\" + cause.getMessage());\n    cause.printStackTrace();\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/handler/WebsocketTransferHandler.java",
        "class": "WebsocketTransferHandler",
        "name": "userEventTriggered",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "ChannelHandlerContext",
                "name": "ctx"
            },
            {
                "type": "Object",
                "name": "evt"
            }
        ],
        "raw": "@Override public void userEventTriggered(ChannelHandlerContext ctx,Object evt) throws Exception {\n  if (evt instanceof IdleStateEvent) {\n    IdleStateEvent event\u003d(IdleStateEvent)evt;\n    if (event.state() \u003d\u003d IdleState.READER_IDLE) {\n      try {\n        clientOfflineEvent(ctx.channel());\n        ctx.channel().close();\n      }\n catch (      Exception e) {\n      }\n    }\n  }\n else   if (evt instanceof WebSocketServerProtocolHandler.HandshakeComplete) {\n    Channel ch\u003dctx.channel();\n    ClientSide clientSide\u003dnew ClientSide(getId(ctx.channel()),ClientStatus.TO_CHOOSE,ch);\n    clientSide.setNickname(String.valueOf(clientSide.getId()));\n    clientSide.setRole(ClientRole.PLAYER);\n    ServerContains.CLIENT_SIDE_MAP.put(clientSide.getId(),clientSide);\n    SimplePrinter.serverLog(\"Has client connect to the server：\" + clientSide.getId());\n    new Thread(() -\u003e {\n      try {\n        Thread.sleep(2000L);\n        ChannelUtils.pushToClient(ch,ClientEventCode.CODE_CLIENT_CONNECT,String.valueOf(clientSide.getId()));\n        ChannelUtils.pushToClient(ch,ClientEventCode.CODE_CLIENT_NICKNAME_SET,null);\n      }\n catch (      InterruptedException ignored) {\n      }\n    }\n).start();\n  }\n else {\n    super.userEventTriggered(ctx,evt);\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/handler/WebsocketTransferHandler.java",
        "class": "WebsocketTransferHandler",
        "name": "getId",
        "return_type": "int",
        "modifiers": "private",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            }
        ],
        "raw": "private int getId(Channel channel){\n  String longId\u003dchannel.id().asLongText();\n  Integer clientId\u003dServerContains.CHANNEL_ID_MAP.get(longId);\n  if (null \u003d\u003d clientId) {\n    clientId\u003dServerContains.getClientId();\n    ServerContains.CHANNEL_ID_MAP.put(longId,clientId);\n  }\n  return clientId;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/handler/WebsocketTransferHandler.java",
        "class": "WebsocketTransferHandler",
        "name": "clientOfflineEvent",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            }
        ],
        "raw": "private void clientOfflineEvent(Channel channel){\n  int clientId\u003dgetId(channel);\n  ClientSide client\u003dServerContains.CLIENT_SIDE_MAP.get(clientId);\n  if (client !\u003d null) {\n    SimplePrinter.serverLog(\"Has client exit to the server：\" + clientId + \" | \"+ client.getNickname());\n    ServerEventListener.get(ServerEventCode.CODE_CLIENT_OFFLINE).call(client,null);\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/handler/SecondProtobufCodec.java",
        "class": "SecondProtobufCodec",
        "name": "encode",
        "return_type": "void",
        "modifiers": "@Override protected",
        "parameters": [
            {
                "type": "ChannelHandlerContext",
                "name": "ctx"
            },
            {
                "type": "MessageLite",
                "name": "msg"
            },
            {
                "type": "List\u003cObject\u003e",
                "name": "out"
            }
        ],
        "raw": "@Override protected void encode(ChannelHandlerContext ctx,MessageLite msg,List\u003cObject\u003e out){\n  out.add(msg);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/handler/SecondProtobufCodec.java",
        "class": "SecondProtobufCodec",
        "name": "decode",
        "return_type": "void",
        "modifiers": "@Override protected",
        "parameters": [
            {
                "type": "ChannelHandlerContext",
                "name": "ctx"
            },
            {
                "type": "ServerTransferDataProtoc",
                "name": "msg"
            },
            {
                "type": "List\u003cObject\u003e",
                "name": "out"
            }
        ],
        "raw": "@Override protected void decode(ChannelHandlerContext ctx,ServerTransferDataProtoc msg,List\u003cObject\u003e out){\n  out.add(msg);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/handler/ProtobufTransferHandler.java",
        "class": "ProtobufTransferHandler",
        "name": "handlerRemoved",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "ChannelHandlerContext",
                "name": "ctx"
            }
        ],
        "raw": "@Override public void handlerRemoved(ChannelHandlerContext ctx){\n  ClientSide client\u003dServerContains.CLIENT_SIDE_MAP.get(getId(ctx.channel()));\n  SimplePrinter.serverLog(\"client \" + client.getId() + \"(\"+ client.getNickname()+ \") disconnected\");\n  clientOfflineEvent(ctx.channel());\n  ctx.channel().close();\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/handler/ProtobufTransferHandler.java",
        "class": "ProtobufTransferHandler",
        "name": "channelRegistered",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "ChannelHandlerContext",
                "name": "ctx"
            }
        ],
        "raw": "@Override public void channelRegistered(ChannelHandlerContext ctx) throws Exception {\n  Channel ch\u003dctx.channel();\n  ClientSide clientSide\u003dnew ClientSide(getId(ctx.channel()),ClientStatus.TO_CHOOSE,ch);\n  clientSide.setNickname(String.valueOf(clientSide.getId()));\n  clientSide.setRole(ClientRole.PLAYER);\n  ServerContains.CLIENT_SIDE_MAP.put(clientSide.getId(),clientSide);\n  SimplePrinter.serverLog(\"Has client connect to the server: \" + clientSide.getId());\n  ChannelUtils.pushToClient(ch,ClientEventCode.CODE_CLIENT_CONNECT,String.valueOf(clientSide.getId()));\n  ChannelUtils.pushToClient(ch,ClientEventCode.CODE_CLIENT_NICKNAME_SET,null);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/handler/ProtobufTransferHandler.java",
        "class": "ProtobufTransferHandler",
        "name": "channelRead",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "ChannelHandlerContext",
                "name": "ctx"
            },
            {
                "type": "Object",
                "name": "msg"
            }
        ],
        "raw": "@Override public void channelRead(ChannelHandlerContext ctx,Object msg) throws Exception {\n  if (msg instanceof ServerTransferDataProtoc) {\n    ServerTransferDataProtoc serverTransferData\u003d(ServerTransferDataProtoc)msg;\n    ServerEventCode code\u003dServerEventCode.valueOf(serverTransferData.getCode());\n    if (code !\u003d ServerEventCode.CODE_CLIENT_HEAD_BEAT) {\n      ClientSide client\u003dServerContains.CLIENT_SIDE_MAP.get(getId(ctx.channel()));\n      SimplePrinter.serverLog(client.getId() + \" | \" + client.getNickname()+ \" do:\"+ code.getMsg());\n      ServerEventListener.get(code).call(client,serverTransferData.getData());\n    }\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/handler/ProtobufTransferHandler.java",
        "class": "ProtobufTransferHandler",
        "name": "userEventTriggered",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "ChannelHandlerContext",
                "name": "ctx"
            },
            {
                "type": "Object",
                "name": "evt"
            }
        ],
        "raw": "@Override public void userEventTriggered(ChannelHandlerContext ctx,Object evt) throws Exception {\n  if (evt instanceof IdleStateEvent) {\n    IdleStateEvent event\u003d(IdleStateEvent)evt;\n    if (event.state() \u003d\u003d IdleState.READER_IDLE) {\n      try {\n        clientOfflineEvent(ctx.channel());\n        ctx.channel().close();\n      }\n catch (      Exception ignore) {\n      }\n    }\n  }\n else {\n    super.userEventTriggered(ctx,evt);\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/handler/ProtobufTransferHandler.java",
        "class": "ProtobufTransferHandler",
        "name": "getId",
        "return_type": "int",
        "modifiers": "private",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            }
        ],
        "raw": "private int getId(Channel channel){\n  String longId\u003dchannel.id().asLongText();\n  Integer clientId\u003dServerContains.CHANNEL_ID_MAP.get(longId);\n  if (null \u003d\u003d clientId) {\n    clientId\u003dServerContains.getClientId();\n    ServerContains.CHANNEL_ID_MAP.put(longId,clientId);\n  }\n  return clientId;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/handler/ProtobufTransferHandler.java",
        "class": "ProtobufTransferHandler",
        "name": "clientOfflineEvent",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [
            {
                "type": "Channel",
                "name": "channel"
            }
        ],
        "raw": "private void clientOfflineEvent(Channel channel){\n  int clientId\u003dgetId(channel);\n  ClientSide client\u003dServerContains.CLIENT_SIDE_MAP.get(clientId);\n  if (client !\u003d null) {\n    SimplePrinter.serverLog(\"Has client exit to the server：\" + clientId + \" | \"+ client.getNickname());\n    ServerEventListener.get(ServerEventCode.CODE_CLIENT_OFFLINE).call(client,null);\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/robot/RobotEventListener_CODE_GAME_LANDLORD_ELECT.java",
        "class": "RobotEventListener_CODE_GAME_LANDLORD_ELECT",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "ClientSide",
                "name": "robot"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(ClientSide robot,String data){\n  ServerContains.THREAD_EXCUTER.execute(() -\u003e {\n    Room room\u003dServerContains.getRoom(robot.getRoomId());\n    List\u003cPoker\u003e landlordPokers\u003dnew ArrayList\u003c\u003e(20);\n    landlordPokers.addAll(robot.getPokers());\n    landlordPokers.addAll(room.getLandlordPokers());\n    List\u003cPoker\u003e leftPokers\u003dnew ArrayList\u003c\u003e(17);\n    leftPokers.addAll(robot.getPre().getPokers());\n    List\u003cPoker\u003e rightPokers\u003dnew ArrayList\u003c\u003e(17);\n    rightPokers.addAll(robot.getNext().getPokers());\n    PokerHelper.sortPoker(landlordPokers);\n    PokerHelper.sortPoker(leftPokers);\n    PokerHelper.sortPoker(rightPokers);\n    TimeHelper.sleep(300);\n    Map\u003cString,Object\u003e map\u003dMapHelper.parser(data);\n    int expectedScore\u003dRobotDecisionMakers.getLandlordScore(room.getDifficultyCoefficient(),leftPokers,rightPokers,landlordPokers);\n    int highestScore\u003d(Integer)map.get(\"highestScore\");\n    String result;\n    if (expectedScore \u003e highestScore) {\n      result\u003dMapHelper.newInstance().put(\"highestScore\",expectedScore).put(\"currentLandlordId\",robot.getId()).json();\n    }\n else {\n      result\u003ddata;\n    }\n    ServerEventListener.get(ServerEventCode.CODE_GAME_LANDLORD_ELECT).call(robot,result);\n  }\n);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/robot/RobotEventListener_CODE_GAME_POKER_PLAY.java",
        "class": "RobotEventListener_CODE_GAME_POKER_PLAY",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "ClientSide",
                "name": "robot"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(ClientSide robot,String data){\n  ServerContains.THREAD_EXCUTER.execute(() -\u003e {\n    Room room\u003dServerContains.getRoom(robot.getRoomId());\n    PokerSell lastPokerSell\u003dnull;\n    PokerSell pokerSell\u003dnull;\n    if (room.getLastSellClient() !\u003d robot.getId()) {\n      lastPokerSell\u003droom.getLastPokerShell();\n      pokerSell\u003dRobotDecisionMakers.howToPlayPokers(room.getDifficultyCoefficient(),lastPokerSell,robot);\n    }\n else {\n      pokerSell\u003dRobotDecisionMakers.howToPlayPokers(room.getDifficultyCoefficient(),null,robot);\n    }\n    if (pokerSell !\u003d null \u0026\u0026 lastPokerSell !\u003d null) {\n      SimplePrinter.serverLog(\"Robot monitoring[room:\" + room.getId() + \"]\");\n      SimplePrinter.serverLog(\"last  sell  -\u003e \" + lastPokerSell.toString());\n      SimplePrinter.serverLog(\"robot sell  -\u003e \" + pokerSell.toString());\n      SimplePrinter.serverLog(\"robot poker -\u003e \" + PokerHelper.textOnlyNoType(robot.getPokers()));\n    }\n    TimeHelper.sleep(300);\n    if (pokerSell \u003d\u003d null || pokerSell.getSellType() \u003d\u003d SellType.ILLEGAL) {\n      ServerEventListener.get(ServerEventCode.CODE_GAME_POKER_PLAY_PASS).call(robot,data);\n    }\n else {\n      Character[] cs\u003dnew Character[pokerSell.getSellPokers().size()];\n      for (int index\u003d0; index \u003c cs.length; index++) {\n        cs[index]\u003dpokerSell.getSellPokers().get(index).getLevel().getAlias()[0];\n      }\n      ServerEventListener.get(ServerEventCode.CODE_GAME_POKER_PLAY).call(robot,Noson.reversal(cs));\n    }\n  }\n);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/robot/RobotEventListener.java",
        "class": "RobotEventListener",
        "name": "call",
        "return_type": "void",
        "modifiers": "",
        "parameters": [
            {
                "type": "ClientSide",
                "name": "robot"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "void call(ClientSide robot,String data);\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/robot/RobotEventListener.java",
        "class": "RobotEventListener",
        "name": "get",
        "return_type": "RobotEventListener",
        "modifiers": "@SuppressWarnings(\"unchecked\") static",
        "parameters": [
            {
                "type": "ClientEventCode",
                "name": "code"
            }
        ],
        "raw": "@SuppressWarnings(\"unchecked\") static RobotEventListener get(ClientEventCode code){\n  RobotEventListener listener\u003dnull;\n  try {\n    if (RobotEventListener.LISTENER_MAP.containsKey(code)) {\n      listener\u003dRobotEventListener.LISTENER_MAP.get(code);\n    }\n else {\n      String eventListener\u003dLISTENER_PREFIX + code.name();\n      Class\u003cRobotEventListener\u003e listenerClass\u003d(Class\u003cRobotEventListener\u003e)Class.forName(eventListener);\n      try {\n        listener\u003dlistenerClass.getDeclaredConstructor().newInstance();\n      }\n catch (      NoSuchMethodException|InvocationTargetException e) {\n        e.printStackTrace();\n      }\n      RobotEventListener.LISTENER_MAP.put(code,listener);\n    }\n    return listener;\n  }\n catch (  ClassNotFoundException|InstantiationException|IllegalAccessException e) {\n    e.printStackTrace();\n  }\n  return null;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/proxy/Proxy.java",
        "class": "Proxy",
        "name": "start",
        "return_type": "void",
        "modifiers": "",
        "parameters": [
            {
                "type": "int",
                "name": "port"
            }
        ],
        "raw": "void start(int port) throws InterruptedException ;\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/proxy/WebsocketProxy.java",
        "class": "WebsocketProxy",
        "name": "start",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "int",
                "name": "port"
            }
        ],
        "raw": "@Override public void start(int port) throws InterruptedException {\n  EventLoopGroup parentGroup\u003dEpoll.isAvailable() ? new EpollEventLoopGroup() : new NioEventLoopGroup();\n  EventLoopGroup childGroup\u003dEpoll.isAvailable() ? new EpollEventLoopGroup() : new NioEventLoopGroup();\n  try {\n    ServerBootstrap bootstrap\u003dnew ServerBootstrap().group(parentGroup,childGroup).channel(Epoll.isAvailable() ? EpollServerSocketChannel.class : NioServerSocketChannel.class).localAddress(new InetSocketAddress(port)).childHandler(new ChannelInitializer\u003cSocketChannel\u003e(){\n      @Override protected void initChannel(      SocketChannel ch) throws Exception {\n        ch.pipeline().addLast(new IdleStateHandler(60 * 30,0,0,TimeUnit.SECONDS)).addLast(new HttpServerCodec()).addLast(new ChunkedWriteHandler()).addLast(new HttpObjectAggregator(8192)).addLast(\"ws\",new WebSocketServerProtocolHandler(\"/ratel\")).addLast(new WebsocketTransferHandler());\n      }\n    }\n);\n    ChannelFuture f\u003dbootstrap.bind().sync();\n    SimplePrinter.serverLog(\"The websocket server was successfully started on port \" + port);\n    RobotDecisionMakers.init();\n    f.channel().closeFuture().sync();\n  }\n  finally {\n    parentGroup.shutdownGracefully();\n    childGroup.shutdownGracefully();\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/proxy/WebsocketProxy.java",
        "class": "WebsocketProxy",
        "name": "initChannel",
        "return_type": "void",
        "modifiers": "@Override protected",
        "parameters": [
            {
                "type": "SocketChannel",
                "name": "ch"
            }
        ],
        "raw": "@Override protected void initChannel(SocketChannel ch) throws Exception {\n  ch.pipeline().addLast(new IdleStateHandler(60 * 30,0,0,TimeUnit.SECONDS)).addLast(new HttpServerCodec()).addLast(new ChunkedWriteHandler()).addLast(new HttpObjectAggregator(8192)).addLast(\"ws\",new WebSocketServerProtocolHandler(\"/ratel\")).addLast(new WebsocketTransferHandler());\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/proxy/ProtobufProxy.java",
        "class": "ProtobufProxy",
        "name": "start",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "int",
                "name": "port"
            }
        ],
        "raw": "@Override public void start(int port) throws InterruptedException {\n  EventLoopGroup parentGroup\u003dEpoll.isAvailable() ? new EpollEventLoopGroup() : new NioEventLoopGroup();\n  EventLoopGroup childGroup\u003dEpoll.isAvailable() ? new EpollEventLoopGroup() : new NioEventLoopGroup();\n  try {\n    ServerBootstrap bootstrap\u003dnew ServerBootstrap().group(parentGroup,childGroup).channel(Epoll.isAvailable() ? EpollServerSocketChannel.class : NioServerSocketChannel.class).localAddress(new InetSocketAddress(port)).childHandler(new ChannelInitializer\u003cSocketChannel\u003e(){\n      @Override protected void initChannel(      SocketChannel ch) throws Exception {\n        ch.pipeline().addLast(new IdleStateHandler(60 * 30,0,0,TimeUnit.SECONDS)).addLast(new ProtobufVarint32FrameDecoder()).addLast(new ProtobufDecoder(ServerTransferData.ServerTransferDataProtoc.getDefaultInstance())).addLast(new ProtobufVarint32LengthFieldPrepender()).addLast(new ProtobufEncoder()).addLast(new SecondProtobufCodec()).addLast(new ProtobufTransferHandler());\n      }\n    }\n);\n    ChannelFuture f\u003dbootstrap.bind().sync();\n    SimplePrinter.serverLog(\"The protobuf server was successfully started on port \" + port);\n    RobotDecisionMakers.init();\n    ServerContains.THREAD_EXCUTER.execute(() -\u003e {\n      Timer timer\u003dnew Timer();\n      timer.schedule(new RoomClearTask(),0L,3000L);\n    }\n);\n    f.channel().closeFuture().sync();\n  }\n  finally {\n    parentGroup.shutdownGracefully();\n    childGroup.shutdownGracefully();\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/proxy/ProtobufProxy.java",
        "class": "ProtobufProxy",
        "name": "initChannel",
        "return_type": "void",
        "modifiers": "@Override protected",
        "parameters": [
            {
                "type": "SocketChannel",
                "name": "ch"
            }
        ],
        "raw": "@Override protected void initChannel(SocketChannel ch) throws Exception {\n  ch.pipeline().addLast(new IdleStateHandler(60 * 30,0,0,TimeUnit.SECONDS)).addLast(new ProtobufVarint32FrameDecoder()).addLast(new ProtobufDecoder(ServerTransferData.ServerTransferDataProtoc.getDefaultInstance())).addLast(new ProtobufVarint32LengthFieldPrepender()).addLast(new ProtobufEncoder()).addLast(new SecondProtobufCodec()).addLast(new ProtobufTransferHandler());\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/timer/RoomClearTask.java",
        "class": "RoomClearTask",
        "name": "run",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [],
        "raw": "@Override public void run(){\n  try {\n    doing();\n  }\n catch (  Exception e) {\n    SimplePrinter.serverLog(e.getMessage());\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/timer/RoomClearTask.java",
        "class": "RoomClearTask",
        "name": "doing",
        "return_type": "void",
        "modifiers": "public",
        "parameters": [],
        "raw": "public void doing(){\n  Map\u003cInteger,Room\u003e rooms\u003dServerContains.getRoomMap();\n  if (rooms \u003d\u003d null || rooms.isEmpty()) {\n    return;\n  }\n  long now\u003dSystem.currentTimeMillis();\n  for (  Room room : rooms.values()) {\n    long alreadyLiveTime\u003dSystem.currentTimeMillis() - room.getCreateTime();\n    SimplePrinter.serverLog(\"room \" + room.getId() + \" already live \"+ alreadyLiveTime+ \"ms\");\n    if (alreadyLiveTime \u003e liveTime) {\n      SimplePrinter.serverLog(\"room \" + room.getId() + \" live time overflow \"+ liveTime+ \", closed!\");\n      ServerEventListener.get(ServerEventCode.CODE_CLIENT_EXIT).call(room.getClientSideList().get(0),null);\n      continue;\n    }\n    long diff\u003dnow - room.getLastFlushTime();\n    if (room.getStatus() !\u003d RoomStatus.STARTING \u0026\u0026 diff \u003e waitingStatusInterval) {\n      SimplePrinter.serverLog(\"room \" + room.getId() + \" starting waiting time overflow \"+ waitingStatusInterval+ \", closed!\");\n      ServerEventListener.get(ServerEventCode.CODE_CLIENT_EXIT).call(room.getClientSideList().get(0),null);\n      continue;\n    }\n    if (room.getType() !\u003d RoomType.PVP) {\n      continue;\n    }\n    if (diff \u003c\u003d startingStatusInterval) {\n      continue;\n    }\n    boolean allRobots\u003dtrue;\n    for (    ClientSide client : room.getClientSideList()) {\n      if (client.getId() !\u003d room.getCurrentSellClient() \u0026\u0026 client.getRole() \u003d\u003d ClientRole.PLAYER) {\n        allRobots\u003dfalse;\n        break;\n      }\n    }\n    ClientSide currentPlayer\u003droom.getClientSideMap().get(room.getCurrentSellClient());\n    if (allRobots) {\n      SimplePrinter.serverLog(\"room \" + room.getId() + \" all is robots, closed!\");\n      ServerEventListener.get(ServerEventCode.CODE_CLIENT_EXIT).call(currentPlayer,null);\n      continue;\n    }\n    ChannelUtils.pushToClient(currentPlayer.getChannel(),ClientEventCode.CODE_CLIENT_KICK,null);\n    notifyWatcherClientKick(room,currentPlayer);\n    room.getClientSideMap().remove(currentPlayer.getId());\n    room.getClientSideList().remove(currentPlayer);\n    ClientSide robot\u003dnew ClientSide(-ServerContains.getClientId(),ClientStatus.PLAYING,null);\n    robot.setNickname(currentPlayer.getNickname());\n    robot.setRole(ClientRole.ROBOT);\n    robot.setRoomId(room.getId());\n    robot.setNext(currentPlayer.getNext());\n    robot.setPre(currentPlayer.getPre());\n    robot.getNext().setPre(robot);\n    robot.getPre().setNext(robot);\n    robot.setPokers(currentPlayer.getPokers());\n    robot.setType(currentPlayer.getType());\n    room.getClientSideMap().put(robot.getId(),robot);\n    room.getClientSideList().add(robot);\n    room.setCurrentSellClient(robot.getId());\n    if (room.getLastSellClient() \u003d\u003d currentPlayer.getId()) {\n      room.setLastSellClient(robot.getId());\n    }\n    room.setDifficultyCoefficient(1);\n    ServerContains.CLIENT_SIDE_MAP.put(robot.getId(),robot);\n    currentPlayer.init();\n    SimplePrinter.serverLog(\"room \" + room.getId() + \" player \"+ currentPlayer.getNickname()+ \" \"+ startingStatusInterval+ \"ms not operating, automatic custody!\");\n    RobotEventListener.get(room.getLandlordId() \u003d\u003d -1 ? ClientEventCode.CODE_GAME_LANDLORD_ELECT : ClientEventCode.CODE_GAME_POKER_PLAY).call(robot,null);\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/timer/RoomClearTask.java",
        "class": "RoomClearTask",
        "name": "notifyWatcherClientKick",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [
            {
                "type": "Room",
                "name": "room"
            },
            {
                "type": "ClientSide",
                "name": "player"
            }
        ],
        "raw": "/** \n * 通知观战者玩家被提出房间\n * @param room\t房间\n * @param player\t被提出的玩家\n */\nprivate void notifyWatcherClientKick(Room room,ClientSide player){\n  for (  ClientSide watcher : room.getWatcherList()) {\n    ChannelUtils.pushToClient(watcher.getChannel(),ClientEventCode.CODE_CLIENT_KICK,player.getNickname());\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/event/ServerEventListener_CODE_GAME_READY.java",
        "class": "ServerEventListener_CODE_GAME_READY",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "ClientSide",
                "name": "clientSide"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(ClientSide clientSide,String data){\n  Room room\u003dServerContains.getRoom(clientSide.getRoomId());\n  if (room \u003d\u003d null) {\n    return;\n  }\n  SimplePrinter.serverLog(\"房间状态：\" + room.getStatus());\n  SimplePrinter.serverLog(\"玩家状态：\" + clientSide.getStatus());\n  if (room.getStatus() \u003d\u003d RoomStatus.STARTING) {\n    return;\n  }\n  if (clientSide.getStatus() \u003d\u003d ClientStatus.PLAYING || clientSide.getStatus() \u003d\u003d ClientStatus.TO_CHOOSE || clientSide.getStatus() \u003d\u003d ClientStatus.CALL_LANDLORD) {\n    return;\n  }\n  clientSide.setStatus(clientSide.getStatus() \u003d\u003d ClientStatus.READY ? ClientStatus.NO_READY : ClientStatus.READY);\n  String result\u003dMapHelper.newInstance().put(\"clientNickName\",clientSide.getNickname()).put(\"status\",clientSide.getStatus()).put(\"clientId\",clientSide.getId()).json();\n  boolean allReady\u003dtrue;\n  ConcurrentSkipListMap\u003cInteger,ClientSide\u003e roomClientMap\u003d(ConcurrentSkipListMap\u003cInteger,ClientSide\u003e)room.getClientSideMap();\n  if (roomClientMap.size() \u003c 3) {\n    allReady\u003dfalse;\n  }\n else {\n    for (    ClientSide client : room.getClientSideList()) {\n      if (client.getRole() \u003d\u003d ClientRole.PLAYER \u0026\u0026 client.getStatus() !\u003d ClientStatus.READY) {\n        allReady\u003dfalse;\n        break;\n      }\n    }\n  }\n  for (  ClientSide client : room.getClientSideList()) {\n    if (client.getRole() \u003d\u003d ClientRole.PLAYER) {\n      ChannelUtils.pushToClient(client.getChannel(),ClientEventCode.CODE_GAME_READY,result);\n    }\n  }\n  if (allReady) {\n    ServerEventListener.get(ServerEventCode.CODE_GAME_STARTING).call(clientSide,data);\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/event/ServerEventListener_CODE_ROOM_JOIN.java",
        "class": "ServerEventListener_CODE_ROOM_JOIN",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "ClientSide",
                "name": "clientSide"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(ClientSide clientSide,String data){\n  Room room\u003dServerContains.getRoom(Integer.parseInt(data));\n  if (room \u003d\u003d null) {\n    String result\u003dMapHelper.newInstance().put(\"roomId\",data).json();\n    ChannelUtils.pushToClient(clientSide.getChannel(),ClientEventCode.CODE_ROOM_JOIN_FAIL_BY_INEXIST,result);\n    return;\n  }\n  if (room.getClientSideList().size() \u003d\u003d 3) {\n    String result\u003dMapHelper.newInstance().put(\"roomId\",room.getId()).put(\"roomOwner\",room.getRoomOwner()).json();\n    ChannelUtils.pushToClient(clientSide.getChannel(),ClientEventCode.CODE_ROOM_JOIN_FAIL_BY_FULL,result);\n    return;\n  }\n  clientSide.setStatus(ClientStatus.READY);\n  clientSide.setRoomId(room.getId());\n  ConcurrentSkipListMap\u003cInteger,ClientSide\u003e roomClientMap\u003d(ConcurrentSkipListMap\u003cInteger,ClientSide\u003e)room.getClientSideMap();\n  LinkedList\u003cClientSide\u003e roomClientList\u003droom.getClientSideList();\n  if (roomClientList.size() \u003e 0) {\n    ClientSide pre\u003droomClientList.getLast();\n    pre.setNext(clientSide);\n    clientSide.setPre(pre);\n  }\n  roomClientList.add(clientSide);\n  roomClientMap.put(clientSide.getId(),clientSide);\n  room.setStatus(RoomStatus.WAIT);\n  String result\u003dMapHelper.newInstance().put(\"clientId\",clientSide.getId()).put(\"clientNickname\",clientSide.getNickname()).put(\"roomId\",room.getId()).put(\"roomOwner\",room.getRoomOwner()).put(\"roomClientCount\",room.getClientSideList().size()).json();\n  for (  ClientSide client : roomClientMap.values()) {\n    ChannelUtils.pushToClient(client.getChannel(),ClientEventCode.CODE_ROOM_JOIN_SUCCESS,result);\n  }\n  if (roomClientMap.size() \u003d\u003d 3) {\n    clientSide.setNext(roomClientList.getFirst());\n    roomClientList.getFirst().setPre(clientSide);\n    ServerEventListener.get(ServerEventCode.CODE_GAME_STARTING).call(clientSide,String.valueOf(room.getId()));\n    return;\n  }\n  notifyWatcherJoinRoom(room,clientSide);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/event/ServerEventListener_CODE_ROOM_JOIN.java",
        "class": "ServerEventListener_CODE_ROOM_JOIN",
        "name": "notifyWatcherJoinRoom",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [
            {
                "type": "Room",
                "name": "room"
            },
            {
                "type": "ClientSide",
                "name": "clientSide"
            }
        ],
        "raw": "/** \n * 通知观战者玩家加入房间\n * @param room\t房间\n * @param clientSide\t玩家\n */\nprivate void notifyWatcherJoinRoom(Room room,ClientSide clientSide){\n  for (  ClientSide watcher : room.getWatcherList()) {\n    ChannelUtils.pushToClient(watcher.getChannel(),ClientEventCode.CODE_ROOM_JOIN_SUCCESS,clientSide.getNickname());\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/event/ServerEventListener_CODE_GAME_LANDLORD_ELECT.java",
        "class": "ServerEventListener_CODE_GAME_LANDLORD_ELECT",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "ClientSide",
                "name": "clientSide"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(ClientSide clientSide,String data){\n  Room room\u003dServerContains.getRoom(clientSide.getRoomId());\n  Map\u003cString,Object\u003e map\u003dMapHelper.parser(data);\n  int highestScore\u003d(Integer)map.get(\"highestScore\");\n  if (room \u003d\u003d null) {\n    return;\n  }\n  if (highestScore \u003d\u003d 3) {\n    room.setBaseScore(highestScore);\n    confirmLandlord(clientSide,room);\n    return;\n  }\n  if (clientSide.getNext().getId() \u003d\u003d room.getFirstSellClient()) {\n    if (highestScore \u003d\u003d 0) {\n      for (      ClientSide client : room.getClientSideList()) {\n        if (client.getRole() \u003d\u003d ClientRole.PLAYER) {\n          ChannelUtils.pushToClient(client.getChannel(),ClientEventCode.CODE_GAME_LANDLORD_CYCLE,null);\n        }\n      }\n      ServerEventListener.get(ServerEventCode.CODE_GAME_STARTING).call(clientSide,null);\n      return;\n    }\n else {\n      room.setBaseScore(highestScore);\n      int landlordId\u003d(Integer)map.get(\"currentLandlordId\");\n      for (      ClientSide client : room.getClientSideList())       if (client.getId() \u003d\u003d landlordId) {\n        confirmLandlord(client,room);\n        return;\n      }\n    }\n  }\n  ClientSide turnClientSide\u003dclientSide.getNext();\n  room.setCurrentSellClient(turnClientSide.getId());\n  String result;\n  if (highestScore !\u003d 0) {\n    result\u003dMapHelper.newInstance().put(\"roomId\",room.getId()).put(\"roomOwner\",room.getRoomOwner()).put(\"roomClientCount\",room.getClientSideList().size()).put(\"preClientNickname\",clientSide.getNickname()).put(\"preClientId\",clientSide.getId()).put(\"nextClientNickname\",turnClientSide.getNickname()).put(\"nextClientId\",turnClientSide.getId()).put(\"highestScore\",highestScore).put(\"currentLandlordId\",(Integer)map.get(\"currentLandlordId\")).json();\n  }\n else {\n    result\u003dMapHelper.newInstance().put(\"roomId\",room.getId()).put(\"roomOwner\",room.getRoomOwner()).put(\"roomClientCount\",room.getClientSideList().size()).put(\"preClientNickname\",clientSide.getNickname()).put(\"nextClientNickname\",turnClientSide.getNickname()).put(\"nextClientId\",turnClientSide.getId()).put(\"highestScore\",0).json();\n  }\n  for (  ClientSide client : room.getClientSideList()) {\n    if (client.getRole() \u003d\u003d ClientRole.PLAYER) {\n      ChannelUtils.pushToClient(client.getChannel(),ClientEventCode.CODE_GAME_LANDLORD_ELECT,result);\n      continue;\n    }\n    if (client.getId() \u003d\u003d turnClientSide.getId()) {\n      RobotEventListener.get(ClientEventCode.CODE_GAME_LANDLORD_ELECT).call(client,result);\n    }\n  }\n  notifyWatcherRobLandlord(room,clientSide);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/event/ServerEventListener_CODE_GAME_LANDLORD_ELECT.java",
        "class": "ServerEventListener_CODE_GAME_LANDLORD_ELECT",
        "name": "confirmLandlord",
        "return_type": "void",
        "modifiers": "public",
        "parameters": [
            {
                "type": "ClientSide",
                "name": "clientSide"
            },
            {
                "type": "Room",
                "name": "room"
            }
        ],
        "raw": "public void confirmLandlord(ClientSide clientSide,Room room){\n  clientSide.getPokers().addAll(room.getLandlordPokers());\n  PokerHelper.sortPoker(clientSide.getPokers());\n  int currentClientId\u003dclientSide.getId();\n  room.setLandlordId(currentClientId);\n  room.setLastSellClient(currentClientId);\n  room.setCurrentSellClient(currentClientId);\n  clientSide.setType(ClientType.LANDLORD);\n  for (  ClientSide client : room.getClientSideList()) {\n    String result\u003dMapHelper.newInstance().put(\"roomId\",room.getId()).put(\"roomOwner\",room.getRoomOwner()).put(\"roomClientCount\",room.getClientSideList().size()).put(\"landlordNickname\",clientSide.getNickname()).put(\"landlordId\",clientSide.getId()).put(\"additionalPokers\",room.getLandlordPokers()).put(\"baseScore\",room.getBaseScore()).json();\n    client.resetRound();\n    if (client.getRole() \u003d\u003d ClientRole.PLAYER) {\n      ChannelUtils.pushToClient(client.getChannel(),ClientEventCode.CODE_GAME_LANDLORD_CONFIRM,result);\n      continue;\n    }\n    if (currentClientId \u003d\u003d client.getId()) {\n      RobotEventListener.get(ClientEventCode.CODE_GAME_POKER_PLAY).call(client,result);\n    }\n  }\n  notifyWatcherConfirmLandlord(room,clientSide);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/event/ServerEventListener_CODE_GAME_LANDLORD_ELECT.java",
        "class": "ServerEventListener_CODE_GAME_LANDLORD_ELECT",
        "name": "notifyWatcherConfirmLandlord",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [
            {
                "type": "Room",
                "name": "room"
            },
            {
                "type": "ClientSide",
                "name": "landlord"
            }
        ],
        "raw": "/** \n * 通知房间内的观战人员谁是地主\n * @param room\t房间\n * @param landlord 地主\n */\nprivate void notifyWatcherConfirmLandlord(Room room,ClientSide landlord){\n  String json\u003dMapHelper.newInstance().put(\"landlord\",landlord.getNickname()).put(\"additionalPokers\",room.getLandlordPokers()).json();\n  for (  ClientSide watcher : room.getWatcherList()) {\n    ChannelUtils.pushToClient(watcher.getChannel(),ClientEventCode.CODE_GAME_LANDLORD_CONFIRM,json);\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/event/ServerEventListener_CODE_GAME_LANDLORD_ELECT.java",
        "class": "ServerEventListener_CODE_GAME_LANDLORD_ELECT",
        "name": "notifyWatcherRobLandlord",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [
            {
                "type": "Room",
                "name": "room"
            },
            {
                "type": "ClientSide",
                "name": "player"
            }
        ],
        "raw": "/** \n * 通知房间内的观战人员抢地主情况\n * @param room\t房间\n */\nprivate void notifyWatcherRobLandlord(Room room,ClientSide player){\n  for (  ClientSide watcher : room.getWatcherList()) {\n    ChannelUtils.pushToClient(watcher.getChannel(),ClientEventCode.CODE_GAME_LANDLORD_ELECT,player.getNickname());\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/event/ServerEventListener_CODE_CLIENT_EXIT.java",
        "class": "ServerEventListener_CODE_CLIENT_EXIT",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "ClientSide",
                "name": "clientSide"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(ClientSide clientSide,String data){\nsynchronized (locked) {\n    Room room\u003dServerContains.getRoom(clientSide.getRoomId());\n    if (room \u003d\u003d null) {\n      return;\n    }\n    String result\u003dMapHelper.newInstance().put(\"roomId\",room.getId()).put(\"exitClientId\",clientSide.getId()).put(\"exitClientNickname\",clientSide.getNickname()).json();\n    for (    ClientSide client : room.getClientSideList()) {\n      if (client.getRole() \u003d\u003d ClientRole.PLAYER) {\n        ChannelUtils.pushToClient(client.getChannel(),ClientEventCode.CODE_CLIENT_EXIT,result);\n        client.init();\n      }\n    }\n    notifyWatcherClientExit(room,clientSide);\n    ServerContains.removeRoom(room.getId());\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/event/ServerEventListener_CODE_CLIENT_EXIT.java",
        "class": "ServerEventListener_CODE_CLIENT_EXIT",
        "name": "notifyWatcherClientExit",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [
            {
                "type": "Room",
                "name": "room"
            },
            {
                "type": "ClientSide",
                "name": "player"
            }
        ],
        "raw": "/** \n * 通知所有观战者玩家退出游戏\n * @param room 房间\n * @param player 退出游戏玩家\n */\nprivate void notifyWatcherClientExit(Room room,ClientSide player){\n  for (  ClientSide watcher : room.getWatcherList()) {\n    ChannelUtils.pushToClient(watcher.getChannel(),ClientEventCode.CODE_CLIENT_EXIT,player.getNickname());\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/event/ServerEventListener.java",
        "class": "ServerEventListener",
        "name": "call",
        "return_type": "void",
        "modifiers": "",
        "parameters": [
            {
                "type": "ClientSide",
                "name": "client"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "void call(ClientSide client,String data);\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/event/ServerEventListener.java",
        "class": "ServerEventListener",
        "name": "get",
        "return_type": "ServerEventListener",
        "modifiers": "@SuppressWarnings(\"unchecked\") static",
        "parameters": [
            {
                "type": "ServerEventCode",
                "name": "code"
            }
        ],
        "raw": "@SuppressWarnings(\"unchecked\") static ServerEventListener get(ServerEventCode code){\n  ServerEventListener listener\u003dnull;\n  try {\n    if (ServerEventListener.LISTENER_MAP.containsKey(code)) {\n      listener\u003dServerEventListener.LISTENER_MAP.get(code);\n    }\n else {\n      String eventListener\u003dLISTENER_PREFIX + code.name();\n      Class\u003cServerEventListener\u003e listenerClass\u003d(Class\u003cServerEventListener\u003e)Class.forName(eventListener);\n      try {\n        listener\u003dlistenerClass.getDeclaredConstructor().newInstance();\n      }\n catch (      InvocationTargetException|NoSuchMethodException e) {\n        e.printStackTrace();\n      }\n      ServerEventListener.LISTENER_MAP.put(code,listener);\n    }\n    return listener;\n  }\n catch (  ClassNotFoundException|InstantiationException|IllegalAccessException e) {\n    e.printStackTrace();\n  }\n  return null;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/event/ServerEventListener_CODE_GAME_WATCH.java",
        "class": "ServerEventListener_CODE_GAME_WATCH",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "ClientSide",
                "name": "clientSide"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(ClientSide clientSide,String data){\n  Room room\u003dServerContains.getRoom(Integer.parseInt(data));\n  if (room \u003d\u003d null) {\n    String result\u003dMapHelper.newInstance().put(\"roomId\",data).json();\n    ChannelUtils.pushToClient(clientSide.getChannel(),ClientEventCode.CODE_ROOM_JOIN_FAIL_BY_INEXIST,result);\n  }\n else {\n    clientSide.setRoomId(room.getId());\n    room.getWatcherList().add(clientSide);\n    Map\u003cString,String\u003e map\u003dnew HashMap\u003c\u003e(16);\n    map.put(\"owner\",room.getRoomOwner());\n    map.put(\"status\",room.getStatus().toString());\n    ChannelUtils.pushToClient(clientSide.getChannel(),ClientEventCode.CODE_GAME_WATCH_SUCCESSFUL,Noson.reversal(map));\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/event/ServerEventListener_CODE_ROOM_CREATE.java",
        "class": "ServerEventListener_CODE_ROOM_CREATE",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "ClientSide",
                "name": "clientSide"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(ClientSide clientSide,String data){\n  Room room\u003dnew Room(ServerContains.getServerId());\n  room.setStatus(RoomStatus.WAIT);\n  room.setType(RoomType.PVP);\n  room.setRoomOwner(clientSide.getNickname());\n  room.getClientSideMap().put(clientSide.getId(),clientSide);\n  room.getClientSideList().add(clientSide);\n  room.setCurrentSellClient(clientSide.getId());\n  room.setCreateTime(System.currentTimeMillis());\n  room.setLastFlushTime(System.currentTimeMillis());\n  clientSide.setRoomId(room.getId());\n  ServerContains.addRoom(room);\n  clientSide.setStatus(ClientStatus.NO_READY);\n  ChannelUtils.pushToClient(clientSide.getChannel(),ClientEventCode.CODE_ROOM_CREATE_SUCCESS,Noson.reversal(room));\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/event/ServerEventListener_CODE_GAME_POKER_PLAY.java",
        "class": "ServerEventListener_CODE_GAME_POKER_PLAY",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "ClientSide",
                "name": "clientSide"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(ClientSide clientSide,String data){\n  Room room\u003dServerContains.getRoom(clientSide.getRoomId());\n  if (room \u003d\u003d null) {\n    return;\n  }\n  if (room.getCurrentSellClient() !\u003d clientSide.getId()) {\n    ChannelUtils.pushToClient(clientSide.getChannel(),ClientEventCode.CODE_GAME_POKER_PLAY_ORDER_ERROR,null);\n    return;\n  }\n  Character[] options\u003dNoson.convert(data,Character[].class);\n  int[] indexes\u003dPokerHelper.getIndexes(options,clientSide.getPokers());\n  if (!PokerHelper.checkPokerIndex(indexes,clientSide.getPokers())) {\n    ChannelUtils.pushToClient(clientSide.getChannel(),ClientEventCode.CODE_GAME_POKER_PLAY_INVALID,null);\n    return;\n  }\n  boolean sellFlag\u003dtrue;\n  List\u003cPoker\u003e currentPokers\u003dPokerHelper.getPoker(indexes,clientSide.getPokers());\n  PokerSell currentPokerSell\u003dPokerHelper.checkPokerType(currentPokers);\n  if (currentPokerSell.getSellType() \u003d\u003d SellType.ILLEGAL) {\n    ChannelUtils.pushToClient(clientSide.getChannel(),ClientEventCode.CODE_GAME_POKER_PLAY_INVALID,null);\n    return;\n  }\n  if (room.getLastSellClient() !\u003d clientSide.getId() \u0026\u0026 room.getLastPokerShell() !\u003d null) {\n    PokerSell lastPokerSell\u003droom.getLastPokerShell();\n    if ((lastPokerSell.getSellType() !\u003d currentPokerSell.getSellType() || lastPokerSell.getSellPokers().size() !\u003d currentPokerSell.getSellPokers().size()) \u0026\u0026 currentPokerSell.getSellType() !\u003d SellType.BOMB \u0026\u0026 currentPokerSell.getSellType() !\u003d SellType.KING_BOMB) {\n      String result\u003dMapHelper.newInstance().put(\"playType\",currentPokerSell.getSellType()).put(\"playCount\",currentPokerSell.getSellPokers().size()).put(\"preType\",lastPokerSell.getSellType()).put(\"preCount\",lastPokerSell.getSellPokers().size()).json();\n      ChannelUtils.pushToClient(clientSide.getChannel(),ClientEventCode.CODE_GAME_POKER_PLAY_MISMATCH,result);\n      return;\n    }\n    if (lastPokerSell.getScore() \u003e\u003d currentPokerSell.getScore()) {\n      String result\u003dMapHelper.newInstance().put(\"playScore\",currentPokerSell.getScore()).put(\"preScore\",lastPokerSell.getScore()).json();\n      ChannelUtils.pushToClient(clientSide.getChannel(),ClientEventCode.CODE_GAME_POKER_PLAY_LESS,result);\n      return;\n    }\n  }\n  ClientSide next\u003dclientSide.getNext();\n  clientSide.addRound();\n  if (currentPokerSell.getSellType() \u003d\u003d SellType.BOMB || currentPokerSell.getSellType() \u003d\u003d SellType.KING_BOMB) {\n    room.increaseRate();\n  }\n  room.setLastSellClient(clientSide.getId());\n  room.setLastPokerShell(currentPokerSell);\n  room.setCurrentSellClient(next.getId());\n  List\u003cList\u003cPoker\u003e\u003e lastPokerList\u003dnew ArrayList\u003c\u003e();\n  for (int i\u003d0; i \u003c room.getClientSideList().size(); i++) {\n    if (room.getClientSideList().get(i).getId() !\u003d clientSide.getId()) {\n      lastPokerList.add(room.getClientSideList().get(i).getPokers());\n    }\n  }\n  String lastPokers\u003dLastCardsUtils.getLastCards(lastPokerList);\n  lastPokerList\u003dnew ArrayList\u003c\u003e();\n  clientSide.getPokers().removeAll(currentPokers);\n  MapHelper mapHelper\u003dMapHelper.newInstance().put(\"clientId\",clientSide.getId()).put(\"clientNickname\",clientSide.getNickname()).put(\"clientType\",clientSide.getType()).put(\"pokers\",currentPokers).put(\"lastSellClientId\",clientSide.getId()).put(\"lastSellPokers\",currentPokers).put(\"lastPokers\",lastPokers);\n  if (!clientSide.getPokers().isEmpty()) {\n    mapHelper.put(\"sellClientNickname\",next.getNickname());\n  }\n  String result\u003dmapHelper.json();\n  for (  ClientSide client : room.getClientSideList()) {\n    if (client.getRole() \u003d\u003d ClientRole.PLAYER) {\n      ChannelUtils.pushToClient(client.getChannel(),ClientEventCode.CODE_SHOW_POKERS,result);\n    }\n  }\n  notifyWatcherPlayPoker(room,result);\n  if (!clientSide.getPokers().isEmpty()) {\n    if (next.getRole() \u003d\u003d ClientRole.ROBOT) {\n      RobotEventListener.get(ClientEventCode.CODE_GAME_POKER_PLAY).call(next,data);\n    }\n else {\n      ServerEventListener.get(ServerEventCode.CODE_GAME_POKER_PLAY_REDIRECT).call(next,result);\n    }\n    return;\n  }\n  gameOver(clientSide,room);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/event/ServerEventListener_CODE_GAME_POKER_PLAY.java",
        "class": "ServerEventListener_CODE_GAME_POKER_PLAY",
        "name": "setRoomClientScore",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [
            {
                "type": "Room",
                "name": "room"
            },
            {
                "type": "ClientType",
                "name": "winnerType"
            }
        ],
        "raw": "private void setRoomClientScore(Room room,ClientType winnerType){\n  int landLordScore\u003droom.getScore() * 2;\n  int peasantScore\u003droom.getScore();\n  if (winnerType \u003d\u003d ClientType.LANDLORD) {\n    peasantScore\u003d-peasantScore;\n  }\n else {\n    landLordScore\u003d-landLordScore;\n  }\n  for (  ClientSide client : room.getClientSideList()) {\n    if (client.getType() \u003d\u003d ClientType.LANDLORD) {\n      client.addScore(landLordScore);\n    }\n else {\n      client.addScore(peasantScore);\n    }\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/event/ServerEventListener_CODE_GAME_POKER_PLAY.java",
        "class": "ServerEventListener_CODE_GAME_POKER_PLAY",
        "name": "gameOver",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [
            {
                "type": "ClientSide",
                "name": "winner"
            },
            {
                "type": "Room",
                "name": "room"
            }
        ],
        "raw": "private void gameOver(ClientSide winner,Room room){\n  ClientType winnerType\u003dwinner.getType();\n  if (isSpring(winner,room)) {\n    room.increaseRate();\n  }\n  setRoomClientScore(room,winnerType);\n  ArrayList\u003cObject\u003e clientScores\u003dnew ArrayList\u003c\u003e();\n  for (  ClientSide client : room.getClientSideList()) {\n    MapHelper score\u003dMapHelper.newInstance().put(\"clientId\",client.getId()).put(\"nickName\",client.getNickname()).put(\"score\",client.getScore()).put(\"scoreInc\",client.getScoreInc()).put(\"pokers\",client.getPokers());\n    clientScores.add(score.map());\n  }\n  SimplePrinter.serverLog(clientScores.toString());\n  String result\u003dMapHelper.newInstance().put(\"winnerNickname\",winner.getNickname()).put(\"winnerType\",winner.getType()).put(\"scores\",clientScores).json();\n  boolean supportReady\u003dtrue;\n  for (  ClientSide client : room.getClientSideList()) {\n    if (client.getRole() \u003d\u003d ClientRole.ROBOT || !Features.supported(client.getVersion(),Features.READY)) {\n      supportReady\u003dfalse;\n      break;\n    }\n  }\n  if (supportReady) {\n    room.setStatus(RoomStatus.WAIT);\n    room.initScoreRate();\n    for (    ClientSide client : room.getClientSideList()) {\n      client.setStatus(ClientStatus.NO_READY);\n      ChannelUtils.pushToClient(client.getChannel(),ClientEventCode.CODE_GAME_OVER,result);\n    }\n  }\n else {\n    ServerEventListener.get(ServerEventCode.CODE_CLIENT_EXIT).call(winner,\"\");\n  }\n  notifyWatcherGameOver(room,result);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/event/ServerEventListener_CODE_GAME_POKER_PLAY.java",
        "class": "ServerEventListener_CODE_GAME_POKER_PLAY",
        "name": "isSpring",
        "return_type": "boolean",
        "modifiers": "private",
        "parameters": [
            {
                "type": "ClientSide",
                "name": "winner"
            },
            {
                "type": "Room",
                "name": "room"
            }
        ],
        "raw": "private boolean isSpring(ClientSide winner,Room room){\n  boolean isSpring\u003dtrue;\n  for (  ClientSide client : room.getClientSideList()) {\n    if (client.getType() \u003d\u003d winner.getType()) {\n      continue;\n    }\n    if (client.getType() \u003d\u003d ClientType.PEASANT \u0026\u0026 client.getRound() \u003e 0) {\n      isSpring\u003dfalse;\n    }\n    if (client.getType() \u003d\u003d ClientType.LANDLORD \u0026\u0026 client.getRound() \u003e 1) {\n      isSpring\u003dfalse;\n    }\n  }\n  return isSpring;\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/event/ServerEventListener_CODE_GAME_POKER_PLAY.java",
        "class": "ServerEventListener_CODE_GAME_POKER_PLAY",
        "name": "notifyWatcherPlayPoker",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [
            {
                "type": "Room",
                "name": "room"
            },
            {
                "type": "String",
                "name": "result"
            }
        ],
        "raw": "/** \n * 通知观战者出牌信息\n * @param room\t房间\n * @param result\t出牌信息\n */\nprivate void notifyWatcherPlayPoker(Room room,String result){\n  for (  ClientSide watcher : room.getWatcherList()) {\n    ChannelUtils.pushToClient(watcher.getChannel(),ClientEventCode.CODE_SHOW_POKERS,result);\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/event/ServerEventListener_CODE_GAME_POKER_PLAY.java",
        "class": "ServerEventListener_CODE_GAME_POKER_PLAY",
        "name": "notifyWatcherGameOver",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [
            {
                "type": "Room",
                "name": "room"
            },
            {
                "type": "String",
                "name": "result"
            }
        ],
        "raw": "/** \n * 通知观战者游戏结束\n * @param room\t房间\n * @param result\t出牌信息\n */\nprivate void notifyWatcherGameOver(Room room,String result){\n  for (  ClientSide watcher : room.getWatcherList()) {\n    ChannelUtils.pushToClient(watcher.getChannel(),ClientEventCode.CODE_GAME_OVER,result);\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/event/ServerEventListener_CODE_CLIENT_INFO_SET.java",
        "class": "ServerEventListener_CODE_CLIENT_INFO_SET",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "ClientSide",
                "name": "client"
            },
            {
                "type": "String",
                "name": "info"
            }
        ],
        "raw": "@Override public void call(ClientSide client,String info){\n  Map\u003c?,?\u003e infos\u003dJsonUtils.fromJson(info,Map.class);\n  client.setVersion(DEFAULT_VERSION);\n  if (infos.containsKey(\"version\")) {\n    client.setVersion(String.valueOf(infos.get(\"version\")));\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/event/ServerEventListener_CODE_CLIENT_NICKNAME_SET.java",
        "class": "ServerEventListener_CODE_CLIENT_NICKNAME_SET",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "ClientSide",
                "name": "client"
            },
            {
                "type": "String",
                "name": "nickname"
            }
        ],
        "raw": "@Override public void call(ClientSide client,String nickname){\n  if (nickname.trim().length() \u003e NICKNAME_MAX_LENGTH || nickname.trim().isEmpty()) {\n    String result\u003dMapHelper.newInstance().put(\"invalidLength\",nickname.trim().length()).json();\n    ChannelUtils.pushToClient(client.getChannel(),ClientEventCode.CODE_CLIENT_NICKNAME_SET,result);\n    return;\n  }\n  ServerContains.CLIENT_SIDE_MAP.get(client.getId()).setNickname(nickname);\n  ChannelUtils.pushToClient(client.getChannel(),ClientEventCode.CODE_SHOW_OPTIONS,null);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/event/ServerEventListener_CODE_GET_ROOMS.java",
        "class": "ServerEventListener_CODE_GET_ROOMS",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "ClientSide",
                "name": "clientSide"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(ClientSide clientSide,String data){\n  List\u003cMap\u003cString,Object\u003e\u003e roomList\u003dnew ArrayList\u003c\u003e(ServerContains.getRoomMap().size());\n  for (  Entry\u003cInteger,Room\u003e entry : ServerContains.getRoomMap().entrySet()) {\n    Room room\u003dentry.getValue();\n    roomList.add(MapHelper.newInstance().put(\"roomId\",room.getId()).put(\"roomOwner\",room.getRoomOwner()).put(\"roomClientCount\",room.getClientSideList().size()).put(\"roomType\",room.getType()).map());\n  }\n  ChannelUtils.pushToClient(clientSide.getChannel(),ClientEventCode.CODE_SHOW_ROOMS,Noson.reversal(roomList));\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/event/ServerEventListener_CODE_CLIENT_OFFLINE.java",
        "class": "ServerEventListener_CODE_CLIENT_OFFLINE",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "ClientSide",
                "name": "clientSide"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(ClientSide clientSide,String data){\n  Room room\u003dServerContains.getRoom(clientSide.getRoomId());\n  if (room \u003d\u003d null) {\n    ServerContains.CLIENT_SIDE_MAP.remove(clientSide.getId());\n    return;\n  }\n  if (room.getWatcherList().contains(clientSide)) {\n    return;\n  }\n  String result\u003dMapHelper.newInstance().put(\"roomId\",room.getId()).put(\"exitClientId\",clientSide.getId()).put(\"exitClientNickname\",clientSide.getNickname()).json();\n  for (  ClientSide client : room.getClientSideList()) {\n    if (client.getRole() !\u003d ClientRole.PLAYER) {\n      continue;\n    }\n    if (client.getId() !\u003d clientSide.getId()) {\n      ChannelUtils.pushToClient(client.getChannel(),ClientEventCode.CODE_CLIENT_EXIT,result);\n      client.init();\n    }\n  }\n  ServerContains.removeRoom(room.getId());\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/event/ServerEventListener_CODE_GAME_POKER_PLAY_PASS.java",
        "class": "ServerEventListener_CODE_GAME_POKER_PLAY_PASS",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "ClientSide",
                "name": "clientSide"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(ClientSide clientSide,String data){\n  Room room\u003dServerContains.getRoom(clientSide.getRoomId());\n  if (room !\u003d null) {\n    if (room.getCurrentSellClient() \u003d\u003d clientSide.getId()) {\n      if (clientSide.getId() !\u003d room.getLastSellClient()) {\n        ClientSide turnClient\u003dclientSide.getNext();\n        room.setCurrentSellClient(turnClient.getId());\n        for (        ClientSide client : room.getClientSideList()) {\n          String result\u003dMapHelper.newInstance().put(\"clientId\",clientSide.getId()).put(\"clientNickname\",clientSide.getNickname()).put(\"nextClientId\",turnClient.getId()).put(\"nextClientNickname\",turnClient.getNickname()).json();\n          if (client.getRole() \u003d\u003d ClientRole.PLAYER) {\n            ChannelUtils.pushToClient(client.getChannel(),ClientEventCode.CODE_GAME_POKER_PLAY_PASS,result);\n          }\n else {\n            if (client.getId() \u003d\u003d turnClient.getId()) {\n              RobotEventListener.get(ClientEventCode.CODE_GAME_POKER_PLAY).call(turnClient,data);\n            }\n          }\n        }\n        notifyWatcherPlayPass(room,clientSide);\n      }\n else {\n        ChannelUtils.pushToClient(clientSide.getChannel(),ClientEventCode.CODE_GAME_POKER_PLAY_CANT_PASS,null);\n      }\n    }\n else {\n      ChannelUtils.pushToClient(clientSide.getChannel(),ClientEventCode.CODE_GAME_POKER_PLAY_ORDER_ERROR,null);\n    }\n  }\n else {\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/event/ServerEventListener_CODE_GAME_POKER_PLAY_PASS.java",
        "class": "ServerEventListener_CODE_GAME_POKER_PLAY_PASS",
        "name": "notifyWatcherPlayPass",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [
            {
                "type": "Room",
                "name": "room"
            },
            {
                "type": "ClientSide",
                "name": "player"
            }
        ],
        "raw": "/** \n * 通知观战者玩家不出牌\n * @param room\t房间\n * @param player\t不出牌的玩家\n */\nprivate void notifyWatcherPlayPass(Room room,ClientSide player){\n  for (  ClientSide watcher : room.getWatcherList()) {\n    ChannelUtils.pushToClient(watcher.getChannel(),ClientEventCode.CODE_GAME_POKER_PLAY_PASS,player.getNickname());\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/event/ServerEventListener_CODE_GAME_STARTING.java",
        "class": "ServerEventListener_CODE_GAME_STARTING",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "ClientSide",
                "name": "clientSide"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(ClientSide clientSide,String data){\n  Room room\u003dServerContains.getRoom(clientSide.getRoomId());\n  LinkedList\u003cClientSide\u003e roomClientList\u003droom.getClientSideList();\n  List\u003cList\u003cPoker\u003e\u003e pokersList\u003dPokerHelper.distributePoker();\n  int cursor\u003d0;\n  for (  ClientSide client : roomClientList) {\n    client.setPokers(pokersList.get(cursor++));\n  }\n  room.setLandlordPokers(pokersList.get(3));\n  int startGrabIndex\u003d(int)(Math.random() * 3);\n  ClientSide startGrabClient\u003droomClientList.get(startGrabIndex);\n  room.setCurrentSellClient(startGrabClient.getId());\n  room.setStatus(RoomStatus.STARTING);\n  room.setCreateTime(System.currentTimeMillis());\n  room.setLastFlushTime(System.currentTimeMillis());\n  room.setFirstSellClient(startGrabClient.getId());\n  List\u003cList\u003cPoker\u003e\u003e otherPokers\u003dnew ArrayList\u003c\u003e();\n  for (  ClientSide client : roomClientList) {\n    client.setType(ClientType.PEASANT);\n    client.setStatus(ClientStatus.PLAYING);\n    for (    ClientSide otherClient : roomClientList) {\n      if (otherClient.getId() !\u003d client.getId()) {\n        otherPokers.add(otherClient.getPokers());\n      }\n    }\n    otherPokers.add(room.getLandlordPokers());\n    String lastCards\u003dLastCardsUtils.getLastCards(otherPokers);\n    otherPokers\u003dnew ArrayList\u003c\u003e();\n    String result\u003dMapHelper.newInstance().put(\"roomId\",room.getId()).put(\"roomOwner\",room.getRoomOwner()).put(\"roomClientCount\",room.getClientSideList().size()).put(\"nextClientNickname\",startGrabClient.getNickname()).put(\"nextClientId\",startGrabClient.getId()).put(\"pokers\",client.getPokers()).put(\"lastPokers\",lastCards).put(\"highestScore\",0).json();\n    if (client.getRole() \u003d\u003d ClientRole.PLAYER) {\n      ChannelUtils.pushToClient(client.getChannel(),ClientEventCode.CODE_GAME_STARTING,result);\n    }\n else {\n      if (startGrabClient.getId() \u003d\u003d client.getId()) {\n        RobotEventListener.get(ClientEventCode.CODE_GAME_LANDLORD_ELECT).call(client,result);\n      }\n    }\n  }\n  notifyWatcherGameStart(room);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/event/ServerEventListener_CODE_GAME_STARTING.java",
        "class": "ServerEventListener_CODE_GAME_STARTING",
        "name": "notifyWatcherGameStart",
        "return_type": "void",
        "modifiers": "private",
        "parameters": [
            {
                "type": "Room",
                "name": "room"
            }
        ],
        "raw": "/** \n * 通知房间内的观战人员游戏开始\n * @param room\t房间\n */\nprivate void notifyWatcherGameStart(Room room){\n  String result\u003dMapHelper.newInstance().put(\"player1\",room.getClientSideList().getFirst().getNickname()).put(\"player2\",room.getClientSideList().getFirst().getNext().getNickname()).put(\"player3\",room.getClientSideList().getLast().getNickname()).json();\n  for (  ClientSide clientSide : room.getWatcherList()) {\n    ChannelUtils.pushToClient(clientSide.getChannel(),ClientEventCode.CODE_GAME_STARTING,result);\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/event/ServerEventListener_CODE_GAME_WATCH_EXIT.java",
        "class": "ServerEventListener_CODE_GAME_WATCH_EXIT",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "ClientSide",
                "name": "clientSide"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(ClientSide clientSide,String data){\n  Room room\u003dServerContains.getRoom(clientSide.getRoomId());\n  if (room !\u003d null) {\n    clientSide.setRoomId(room.getId());\n    boolean successful\u003droom.getWatcherList().remove(clientSide);\n    if (successful) {\n      SimplePrinter.serverLog(clientSide.getNickname() + \" exit room \" + room.getId());\n    }\n  }\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/event/ServerEventListener_CODE_GAME_POKER_PLAY_REDIRECT.java",
        "class": "ServerEventListener_CODE_GAME_POKER_PLAY_REDIRECT",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "ClientSide",
                "name": "clientSide"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(ClientSide clientSide,String data){\n  Room room\u003dServerContains.getRoom(clientSide.getRoomId());\n  Map\u003cString,Object\u003e datas\u003dnew HashMap\u003cString,Object\u003e();\n  if (StringUtils.isNotBlank(data)) {\n    datas\u003dNoson.parseMap(data);\n  }\n  List\u003cMap\u003cString,Object\u003e\u003e clientInfos\u003dnew ArrayList\u003cMap\u003cString,Object\u003e\u003e(3);\n  for (  ClientSide client : room.getClientSideList()) {\n    if (clientSide.getId() !\u003d client.getId()) {\n      clientInfos.add(MapHelper.newInstance().put(\"clientId\",client.getId()).put(\"clientNickname\",client.getNickname()).put(\"type\",client.getType()).put(\"surplus\",client.getPokers().size()).put(\"position\",clientSide.getPre().getId() \u003d\u003d client.getId() ? \"UP\" : \"DOWN\").map());\n    }\n  }\n  List\u003cList\u003cPoker\u003e\u003e lastPokerList\u003dnew ArrayList\u003c\u003e();\n  for (int i\u003d0; i \u003c room.getClientSideList().size(); i++) {\n    if (room.getClientSideList().get(i).getId() !\u003d clientSide.getId()) {\n      lastPokerList.add(room.getClientSideList().get(i).getPokers());\n    }\n  }\n  String lastPokers\u003dLastCardsUtils.getLastCards(lastPokerList);\n  lastPokerList\u003dnew ArrayList\u003c\u003e();\n  String result\u003dMapHelper.newInstance().put(\"pokers\",clientSide.getPokers()).put(\"lastSellPokers\",datas.get(\"lastSellPokers\")).put(\"lastSellClientId\",datas.get(\"lastSellClientId\")).put(\"clientInfos\",clientInfos).put(\"sellClientId\",room.getCurrentSellClient()).put(\"sellClientNickname\",ServerContains.CLIENT_SIDE_MAP.get(room.getCurrentSellClient()).getNickname()).put(\"lastPokers\",lastPokers).json();\n  ChannelUtils.pushToClient(clientSide.getChannel(),ClientEventCode.CODE_GAME_POKER_PLAY_REDIRECT,result);\n}\n"
    },
    {
        "relative_path": "ratel/landlords-server/src/main/java/org/nico/ratel/landlords/server/event/ServerEventListener_CODE_ROOM_CREATE_PVE.java",
        "class": "ServerEventListener_CODE_ROOM_CREATE_PVE",
        "name": "call",
        "return_type": "void",
        "modifiers": "@Override public",
        "parameters": [
            {
                "type": "ClientSide",
                "name": "clientSide"
            },
            {
                "type": "String",
                "name": "data"
            }
        ],
        "raw": "@Override public void call(ClientSide clientSide,String data){\n  int difficultyCoefficient\u003dInteger.parseInt(data);\n  if (!RobotDecisionMakers.contains(difficultyCoefficient)) {\n    ChannelUtils.pushToClient(clientSide.getChannel(),ClientEventCode.CODE_PVE_DIFFICULTY_NOT_SUPPORT,null);\n    return;\n  }\n  Room room\u003dnew Room(ServerContains.getServerId());\n  room.setType(RoomType.PVE);\n  room.setStatus(RoomStatus.BLANK);\n  room.setRoomOwner(clientSide.getNickname());\n  room.getClientSideMap().put(clientSide.getId(),clientSide);\n  room.getClientSideList().add(clientSide);\n  room.setCurrentSellClient(clientSide.getId());\n  room.setCreateTime(System.currentTimeMillis());\n  room.setDifficultyCoefficient(difficultyCoefficient);\n  clientSide.setRoomId(room.getId());\n  ServerContains.addRoom(room);\n  ClientSide preClient\u003dclientSide;\n  for (int index\u003d1; index \u003c 3; index++) {\n    ClientSide robot\u003dnew ClientSide(-ServerContains.getClientId(),ClientStatus.PLAYING,null);\n    robot.setNickname(\"robot_\" + index);\n    robot.setRole(ClientRole.ROBOT);\n    preClient.setNext(robot);\n    robot.setPre(preClient);\n    robot.setRoomId(room.getId());\n    room.getClientSideMap().put(robot.getId(),robot);\n    room.getClientSideList().add(robot);\n    preClient\u003drobot;\n    ServerContains.CLIENT_SIDE_MAP.put(robot.getId(),robot);\n  }\n  preClient.setNext(clientSide);\n  clientSide.setPre(preClient);\n  ServerEventListener.get(ServerEventCode.CODE_GAME_STARTING).call(clientSide,String.valueOf(room.getId()));\n}\n"
    }
]